
ProjectGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c04c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c1e0  0800c1e0  0001c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c688  0800c688  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c688  0800c688  0001c688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c690  0800c690  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c694  0800c694  0001c694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800c698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002484  2000022c  0800c8c4  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026b0  0800c8c4  000226b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c5e  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c4d  00000000  00000000  00049eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002058  00000000  00000000  0004eb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e20  00000000  00000000  00050b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c410  00000000  00000000  00052980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a72e  00000000  00000000  0007ed90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105d0d  00000000  00000000  000994be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019f1cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091b8  00000000  00000000  0019f248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1c4 	.word	0x0800c1c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	0800c1c4 	.word	0x0800c1c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000eb6:	f000 faa9 	bl	800140c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fb3f 	bl	800154c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	2201      	movs	r2, #1
 8000ede:	2123      	movs	r1, #35	; 0x23
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fb33 	bl	800154c <GYRO_IO_Write>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f02:	f000 fa83 	bl	800140c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	2201      	movs	r2, #1
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fb59 	bl	80015c4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2201      	movs	r2, #1
 8000f26:	2124      	movs	r1, #36	; 0x24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fb4b 	bl	80015c4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2124      	movs	r1, #36	; 0x24
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fb04 	bl	800154c <GYRO_IO_Write>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000f60:	f107 030f 	add.w	r3, r7, #15
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 faef 	bl	800154c <GYRO_IO_Write>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000f88:	f107 030f 	add.w	r3, r7, #15
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2130      	movs	r1, #48	; 0x30
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fb17 	bl	80015c4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000f96:	f107 030e 	add.w	r3, r7, #14
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2122      	movs	r1, #34	; 0x22
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb10 	bl	80015c4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f023 0320 	bic.w	r3, r3, #32
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000fd8:	f107 030f 	add.w	r3, r7, #15
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2130      	movs	r1, #48	; 0x30
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fab3 	bl	800154c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000fe6:	f107 030e 	add.w	r3, r7, #14
 8000fea:	2201      	movs	r2, #1
 8000fec:	2122      	movs	r1, #34	; 0x22
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 faac 	bl	800154c <GYRO_IO_Write>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	2201      	movs	r2, #1
 800100c:	2122      	movs	r1, #34	; 0x22
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fad8 	bl	80015c4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10a      	bne.n	8001030 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e00c      	b.n	800104a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d109      	bne.n	800104a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f023 0308 	bic.w	r3, r3, #8
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	b2db      	uxtb	r3, r3
 8001048:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	2201      	movs	r2, #1
 8001050:	2122      	movs	r1, #34	; 0x22
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa7a 	bl	800154c <GYRO_IO_Write>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800106a:	f107 030f 	add.w	r3, r7, #15
 800106e:	2201      	movs	r2, #1
 8001070:	2122      	movs	r1, #34	; 0x22
 8001072:	4618      	mov	r0, r3
 8001074:	f000 faa6 	bl	80015c4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e009      	b.n	80010a2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f023 0308 	bic.w	r3, r3, #8
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	2201      	movs	r2, #1
 80010a8:	2122      	movs	r1, #34	; 0x22
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fa4e 	bl	800154c <GYRO_IO_Write>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80010c2:	f107 030f 	add.w	r3, r7, #15
 80010c6:	2201      	movs	r2, #1
 80010c8:	2121      	movs	r1, #33	; 0x21
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fa7a 	bl	80015c4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4313      	orrs	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80010e4:	f107 030f 	add.w	r3, r7, #15
 80010e8:	2201      	movs	r2, #1
 80010ea:	2121      	movs	r1, #33	; 0x21
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fa2d 	bl	800154c <GYRO_IO_Write>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	2201      	movs	r2, #1
 800110a:	2124      	movs	r1, #36	; 0x24
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fa59 	bl	80015c4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f023 0310 	bic.w	r3, r3, #16
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4313      	orrs	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001126:	f107 030f 	add.w	r3, r7, #15
 800112a:	2201      	movs	r2, #1
 800112c:	2124      	movs	r1, #36	; 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fa0c 	bl	800154c <GYRO_IO_Write>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001166:	f107 030f 	add.w	r3, r7, #15
 800116a:	2201      	movs	r2, #1
 800116c:	2123      	movs	r1, #35	; 0x23
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fa28 	bl	80015c4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	2206      	movs	r2, #6
 800117a:	2128      	movs	r1, #40	; 0x28
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fa21 	bl	80015c4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d126      	bne.n	80011da <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	e01f      	b.n	80011d2 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	3301      	adds	r3, #1
 8001198:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800119c:	4413      	add	r3, r2
 800119e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011b0:	440b      	add	r3, r1
 80011b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21a      	sxth	r2, r3
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011c6:	440b      	add	r3, r1
 80011c8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	3301      	adds	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	dddc      	ble.n	8001192 <L3GD20_ReadXYZAngRate+0x56>
 80011d8:	e025      	b.n	8001226 <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e01f      	b.n	8001220 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e8:	4413      	add	r3, r2
 80011ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	3301      	adds	r3, #1
 80011fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011fe:	440b      	add	r3, r1
 8001200:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001214:	440b      	add	r3, r1
 8001216:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	3301      	adds	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	2b02      	cmp	r3, #2
 8001224:	dddc      	ble.n	80011e0 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800122c:	2b10      	cmp	r3, #16
 800122e:	d006      	beq.n	800123e <L3GD20_ReadXYZAngRate+0x102>
 8001230:	2b20      	cmp	r3, #32
 8001232:	d007      	beq.n	8001244 <L3GD20_ReadXYZAngRate+0x108>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <L3GD20_ReadXYZAngRate+0x154>)
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800123c:	e005      	b.n	800124a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <L3GD20_ReadXYZAngRate+0x158>)
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001242:	e002      	b.n	800124a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <L3GD20_ReadXYZAngRate+0x15c>)
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001248:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	e017      	b.n	8001280 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001258:	4413      	add	r3, r2
 800125a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	3301      	adds	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	2b02      	cmp	r3, #2
 8001284:	dde4      	ble.n	8001250 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	410c0000 	.word	0x410c0000
 8001294:	418c0000 	.word	0x418c0000
 8001298:	428c0000 	.word	0x428c0000

0800129c <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <SPIx_Init+0x70>)
 80012a2:	f004 f85e 	bl	8005362 <HAL_SPI_GetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12c      	bne.n	8001306 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <SPIx_Init+0x70>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <SPIx_Init+0x74>)
 80012b0:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <SPIx_Init+0x70>)
 80012b4:	2210      	movs	r2, #16
 80012b6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <SPIx_Init+0x70>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <SPIx_Init+0x70>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <SPIx_Init+0x70>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <SPIx_Init+0x70>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <SPIx_Init+0x70>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <SPIx_Init+0x70>)
 80012d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012dc:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <SPIx_Init+0x70>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <SPIx_Init+0x70>)
 80012e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ea:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <SPIx_Init+0x70>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <SPIx_Init+0x70>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <SPIx_Init+0x70>)
 80012fc:	f000 f80a 	bl	8001314 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <SPIx_Init+0x70>)
 8001302:	f003 ffa4 	bl	800524e <HAL_SPI_Init>
  }
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000248 	.word	0x20000248
 8001310:	40003800 	.word	0x40003800

08001314 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <SPIx_MspInit+0x60>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <SPIx_MspInit+0x60>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6593      	str	r3, [r2, #88]	; 0x58
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <SPIx_MspInit+0x60>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <SPIx_MspInit+0x60>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <SPIx_MspInit+0x60>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SPIx_MspInit+0x60>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800134c:	231a      	movs	r3, #26
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <SPIx_MspInit+0x64>)
 8001368:	f002 f882 	bl	8003470 <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	48000c00 	.word	0x48000c00

0800137c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <SPIx_WriteRead+0x8c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <SPIx_WriteRead+0x8c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001394:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001396:	bf00      	nop
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <SPIx_WriteRead+0x8c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d1f8      	bne.n	8001398 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	330c      	adds	r3, #12
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80013b0:	bf00      	nop
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1f8      	bne.n	80013b2 <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	330c      	adds	r3, #12
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80013ca:	bf00      	nop
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f8      	bne.n	80013cc <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80013da:	bf00      	nop
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b80      	cmp	r3, #128	; 0x80
 80013e8:	d0f8      	beq.n	80013dc <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f8:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000248 	.word	0x20000248

0800140c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	483e      	ldr	r0, [pc, #248]	; (800153c <GYRO_IO_Init+0x130>)
 8001442:	f002 f815 	bl	8003470 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8001446:	2201      	movs	r2, #1
 8001448:	2101      	movs	r1, #1
 800144a:	483c      	ldr	r0, [pc, #240]	; (800153c <GYRO_IO_Init+0x130>)
 800144c:	f002 f9b8 	bl	80037c0 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	4a38      	ldr	r2, [pc, #224]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <GYRO_IO_Init+0x12c>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4830      	ldr	r0, [pc, #192]	; (8001540 <GYRO_IO_Init+0x134>)
 8001480:	f001 fff6 	bl	8003470 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8001484:	2201      	movs	r2, #1
 8001486:	2101      	movs	r1, #1
 8001488:	482d      	ldr	r0, [pc, #180]	; (8001540 <GYRO_IO_Init+0x134>)
 800148a:	f002 f999 	bl	80037c0 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <GYRO_IO_Init+0x12c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4821      	ldr	r0, [pc, #132]	; (8001544 <GYRO_IO_Init+0x138>)
 80014be:	f001 ffd7 	bl	8003470 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80014c2:	2201      	movs	r2, #1
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	481f      	ldr	r0, [pc, #124]	; (8001544 <GYRO_IO_Init+0x138>)
 80014c8:	f002 f97a 	bl	80037c0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <GYRO_IO_Init+0x12c>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <GYRO_IO_Init+0x12c>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <GYRO_IO_Init+0x12c>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 80014e4:	2304      	movs	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <GYRO_IO_Init+0x138>)
 80014fc:	f001 ffb8 	bl	8003470 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <GYRO_IO_Init+0x12c>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <GYRO_IO_Init+0x13c>)
 8001526:	f001 ffa3 	bl	8003470 <HAL_GPIO_Init>

  SPIx_Init();
 800152a:	f7ff feb7 	bl	800129c <SPIx_Init>

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	48001000 	.word	0x48001000
 8001540:	48000800 	.word	0x48000800
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48000400 	.word	0x48000400

0800154c <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
 8001558:	4613      	mov	r3, r2
 800155a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 800155c:	883b      	ldrh	r3, [r7, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d903      	bls.n	800156a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001568:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <GYRO_IO_Write+0x70>)
 8001570:	f002 f926 	bl	80037c0 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <GYRO_IO_Write+0x74>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <GYRO_IO_Write+0x74>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001582:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fef8 	bl	800137c <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 800158c:	e00a      	b.n	80015a4 <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fef2 	bl	800137c <SPIx_WriteRead>
    NumByteToWrite--;
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 80015a4:	883b      	ldrh	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f1      	bne.n	800158e <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80015aa:	2201      	movs	r2, #1
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <GYRO_IO_Write+0x70>)
 80015b0:	f002 f906 	bl	80037c0 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	48000c00 	.word	0x48000c00
 80015c0:	20000248 	.word	0x20000248

080015c4 <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	4613      	mov	r3, r2
 80015d2:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d904      	bls.n	80015e4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	e003      	b.n	80015ec <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ea:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80015ec:	2200      	movs	r2, #0
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <GYRO_IO_Read+0x80>)
 80015f2:	f002 f8e5 	bl	80037c0 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <GYRO_IO_Read+0x84>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <GYRO_IO_Read+0x84>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001604:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff feb7 	bl	800137c <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800160e:	e00c      	b.n	800162a <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff feb3 	bl	800137c <SPIx_WriteRead>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800161e:	883b      	ldrh	r3, [r7, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 800162a:	883b      	ldrh	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ef      	bne.n	8001610 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001630:	2201      	movs	r2, #1
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <GYRO_IO_Read+0x80>)
 8001636:	f002 f8c3 	bl	80037c0 <HAL_GPIO_WritePin>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	48000c00 	.word	0x48000c00
 8001648:	20000248 	.word	0x20000248

0800164c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001656:	2300      	movs	r3, #0
 8001658:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 800165a:	2300      	movs	r3, #0
 800165c:	703b      	strb	r3, [r7, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <BSP_GYRO_Init+0xcc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4798      	blx	r3
 8001668:	4603      	mov	r3, r0
 800166a:	2bd4      	cmp	r3, #212	; 0xd4
 800166c:	d005      	beq.n	800167a <BSP_GYRO_Init+0x2e>
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <BSP_GYRO_Init+0xcc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	2bd5      	cmp	r3, #213	; 0xd5
 8001678:	d146      	bne.n	8001708 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <BSP_GYRO_Init+0xd0>)
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <BSP_GYRO_Init+0xcc>)
 800167e:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001680:	2308      	movs	r3, #8
 8001682:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001684:	2300      	movs	r3, #0
 8001686:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001688:	2307      	movs	r3, #7
 800168a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 800168c:	2330      	movs	r3, #48	; 0x30
 800168e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001690:	2300      	movs	r3, #0
 8001692:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001694:	2300      	movs	r3, #0
 8001696:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8001698:	2310      	movs	r3, #16
 800169a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 800169c:	793a      	ldrb	r2, [r7, #4]
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80016a4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80016b2:	7a3a      	ldrb	r2, [r7, #8]
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 80016ba:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80016bc:	4313      	orrs	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	89bb      	ldrh	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <BSP_GYRO_Init+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	89ba      	ldrh	r2, [r7, #12]
 80016d4:	4610      	mov	r0, r2
 80016d6:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 80016d8:	2300      	movs	r3, #0
 80016da:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80016dc:	2300      	movs	r3, #0
 80016de:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 80016e0:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 80016e2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <BSP_GYRO_Init+0xd0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	89ba      	ldrh	r2, [r7, #12]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	4610      	mov	r0, r2
 80016f6:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <BSP_GYRO_Init+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	2010      	movs	r0, #16
 8001700:	4798      	blx	r3

    ret = GYRO_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e001      	b.n	800170c <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000
 800171c:	200002ac 	.word	0x200002ac

08001720 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <BSP_GYRO_GetXYZ+0x24>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <BSP_GYRO_GetXYZ+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002ac 	.word	0x200002ac

08001748 <UART_print>:
#include <stdlib.h>
#include <string.h>

extern int Rx_data[];

void UART_print(int integer) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[64];
	int n = sprintf((char *)buffer, "%d", integer);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4909      	ldr	r1, [pc, #36]	; (800177c <UART_print+0x34>)
 8001758:	4618      	mov	r0, r3
 800175a:	f009 f95d 	bl	800aa18 <siprintf>
 800175e:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 8001760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001762:	b29a      	uxth	r2, r3
 8001764:	f107 010c 	add.w	r1, r7, #12
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <UART_print+0x38>)
 800176e:	f004 fe25 	bl	80063bc <HAL_UART_Transmit>
}
 8001772:	bf00      	nop
 8001774:	3750      	adds	r7, #80	; 0x50
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800c1e0 	.word	0x0800c1e0
 8001780:	200025a8 	.word	0x200025a8

08001784 <wait_for_key>:
	uint8_t buffer = Rx_data[0];
	Rx_data[0] = 0;
	return buffer;
}

void wait_for_key(uint8_t key){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	while(Rx_data[0] != key);
 800178e:	bf00      	nop
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <wait_for_key+0x28>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	429a      	cmp	r2, r3
 8001798:	d1fa      	bne.n	8001790 <wait_for_key+0xc>
	Rx_data[0] = 0;
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <wait_for_key+0x28>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20002480 	.word	0x20002480

080017b0 <UART_println>:

void UART_println(int integer) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[64];
	int n = sprintf((char *)buffer, "%d\r\n", integer);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <UART_println+0x34>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f009 f929 	bl	800aa18 <siprintf>
 80017c6:	64f8      	str	r0, [r7, #76]	; 0x4c
	HAL_UART_Transmit(&huart2, buffer, n, HAL_MAX_DELAY);
 80017c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f107 010c 	add.w	r1, r7, #12
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <UART_println+0x38>)
 80017d6:	f004 fdf1 	bl	80063bc <HAL_UART_Transmit>
}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	; 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	0800c1e4 	.word	0x0800c1e4
 80017e8:	200025a8 	.word	0x200025a8

080017ec <display_board>:
#include <math.h>

extern int scores[];
extern RNG_HandleTypeDef hrng;

void display_board(Game *g) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	uint8_t esc[1] = { 27 };
 80017f4:	231b      	movs	r3, #27
 80017f6:	723b      	strb	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, esc, strlen(esc), HAL_MAX_DELAY);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fce7 	bl	80001d0 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	f107 0108 	add.w	r1, r7, #8
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	4824      	ldr	r0, [pc, #144]	; (80018a0 <display_board+0xb4>)
 8001810:	f004 fdd4 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "[2J", strlen("[2J"), HAL_MAX_DELAY);
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	2203      	movs	r2, #3
 800181a:	4922      	ldr	r1, [pc, #136]	; (80018a4 <display_board+0xb8>)
 800181c:	4820      	ldr	r0, [pc, #128]	; (80018a0 <display_board+0xb4>)
 800181e:	f004 fdcd 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, esc, strlen(esc), HAL_MAX_DELAY);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fcd2 	bl	80001d0 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 0108 	add.w	r1, r7, #8
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	4819      	ldr	r0, [pc, #100]	; (80018a0 <display_board+0xb4>)
 800183a:	f004 fdbf 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "[H", strlen("[H"), HAL_MAX_DELAY);
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	2202      	movs	r2, #2
 8001844:	4918      	ldr	r1, [pc, #96]	; (80018a8 <display_board+0xbc>)
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <display_board+0xb4>)
 8001848:	f004 fdb8 	bl	80063bc <HAL_UART_Transmit>

	UART_prints("\r\n");
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	2202      	movs	r2, #2
 8001852:	4916      	ldr	r1, [pc, #88]	; (80018ac <display_board+0xc0>)
 8001854:	4812      	ldr	r0, [pc, #72]	; (80018a0 <display_board+0xb4>)
 8001856:	f004 fdb1 	bl	80063bc <HAL_UART_Transmit>
	for (int i = 0; i < g->rows; i++) {
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e016      	b.n	800188e <display_board+0xa2>
		HAL_UART_Transmit(&huart2, g->board[i], BOARD_COLS, HAL_MAX_DELAY);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	222c      	movs	r2, #44	; 0x2c
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	3308      	adds	r3, #8
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	18d1      	adds	r1, r2, r3
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	222c      	movs	r2, #44	; 0x2c
 8001874:	480a      	ldr	r0, [pc, #40]	; (80018a0 <display_board+0xb4>)
 8001876:	f004 fda1 	bl	80063bc <HAL_UART_Transmit>
		UART_prints("\r\n");
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	2202      	movs	r2, #2
 8001880:	490a      	ldr	r1, [pc, #40]	; (80018ac <display_board+0xc0>)
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <display_board+0xb4>)
 8001884:	f004 fd9a 	bl	80063bc <HAL_UART_Transmit>
	for (int i = 0; i < g->rows; i++) {
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3301      	adds	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbe3      	blt.n	8001860 <display_board+0x74>
	}
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200025a8 	.word	0x200025a8
 80018a4:	0800c1f4 	.word	0x0800c1f4
 80018a8:	0800c1f8 	.word	0x0800c1f8
 80018ac:	0800c1fc 	.word	0x0800c1fc

080018b0 <update_board>:
}

// x -> col
// y -> row

void update_board(Game *g) {
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < g->rows; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e0ca      	b.n	8001a54 <update_board+0x1a4>
		for (int j = 0; j < g->cols; j++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	e0be      	b.n	8001a42 <update_board+0x192>
			// If first or last row
			if (i == 0 || i == g->rows - 1) {
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <update_board+0x26>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10b      	bne.n	80018ee <update_board+0x3e>
				g->board[i][j] = '=';
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	441a      	add	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4413      	add	r3, r2
 80018e6:	3308      	adds	r3, #8
 80018e8:	223d      	movs	r2, #61	; 0x3d
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e0a6      	b.n	8001a3c <update_board+0x18c>
			} else if (j == 0 || j == g->cols - 1) {
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <update_board+0x50>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d10b      	bne.n	8001918 <update_board+0x68>
				g->board[i][j] = '|';
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	441a      	add	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4413      	add	r3, r2
 8001910:	3308      	adds	r3, #8
 8001912:	227c      	movs	r2, #124	; 0x7c
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e091      	b.n	8001a3c <update_board+0x18c>
			} else {
				g->board[i][j] = ' ';
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	441a      	add	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	3308      	adds	r3, #8
 800192a:	2220      	movs	r2, #32
 800192c:	701a      	strb	r2, [r3, #0]
				if ((i == g->b->y[3] + 1) && (j == g->b->x[3] + 1)) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	429a      	cmp	r2, r3
 800193c:	d112      	bne.n	8001964 <update_board+0xb4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	429a      	cmp	r2, r3
 800194c:	d10a      	bne.n	8001964 <update_board+0xb4>
					g->board[i][j] = '.';
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	441a      	add	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4413      	add	r3, r2
 800195e:	3308      	adds	r3, #8
 8001960:	222e      	movs	r2, #46	; 0x2e
 8001962:	701a      	strb	r2, [r3, #0]
				}
				if ((i == g->b->y[2] + 1) && (j == g->b->x[2] + 1)) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	3301      	adds	r3, #1
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d112      	bne.n	800199a <update_board+0xea>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	3301      	adds	r3, #1
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d10a      	bne.n	800199a <update_board+0xea>
					g->board[i][j] = 'o';
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	441a      	add	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4413      	add	r3, r2
 8001994:	3308      	adds	r3, #8
 8001996:	226f      	movs	r2, #111	; 0x6f
 8001998:	701a      	strb	r2, [r3, #0]
				}
				if ((i == g->b->y[1] + 1) && (j == g->b->x[1] + 1)) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d112      	bne.n	80019d0 <update_board+0x120>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d10a      	bne.n	80019d0 <update_board+0x120>
					g->board[i][j] = 'O';
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	441a      	add	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4413      	add	r3, r2
 80019ca:	3308      	adds	r3, #8
 80019cc:	224f      	movs	r2, #79	; 0x4f
 80019ce:	701a      	strb	r2, [r3, #0]
				}
				if ((i == g->b->y[0] + 1) && (j == g->b->x[0] + 1)) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	3301      	adds	r3, #1
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d112      	bne.n	8001a06 <update_board+0x156>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10a      	bne.n	8001a06 <update_board+0x156>
					g->board[i][j] = '*';
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	441a      	add	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4413      	add	r3, r2
 8001a00:	3308      	adds	r3, #8
 8001a02:	222a      	movs	r2, #42	; 0x2a
 8001a04:	701a      	strb	r2, [r3, #0]
				}
				if ((i == g->goal->y + 1) && (j == g->goal->x + 1)) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d112      	bne.n	8001a3c <update_board+0x18c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10a      	bne.n	8001a3c <update_board+0x18c>
					g->board[i][j] = '+';
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	441a      	add	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	4413      	add	r3, r2
 8001a36:	3308      	adds	r3, #8
 8001a38:	222b      	movs	r2, #43	; 0x2b
 8001a3a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < g->cols; j++) {
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f6ff af3b 	blt.w	80018c4 <update_board+0x14>
	for (int i = 0; i < g->rows; i++) {
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	f6ff af2f 	blt.w	80018be <update_board+0xe>
				}

			}
		}
	}
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <move_ball>:

void move_ball(Game *g, int x, int y) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	x += (BOARD_COLS - 2) / 2;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	3315      	adds	r3, #21
 8001a7c:	60bb      	str	r3, [r7, #8]
	y += (BOARD_ROWS - 2) / 2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	330a      	adds	r3, #10
 8001a82:	607b      	str	r3, [r7, #4]

	x = x >= BOARD_COLS ? BOARD_COLS - 1 : x;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b2b      	cmp	r3, #43	; 0x2b
 8001a88:	bfa8      	it	ge
 8001a8a:	232b      	movge	r3, #43	; 0x2b
 8001a8c:	60bb      	str	r3, [r7, #8]
	x = x < 0 ? 0 : x;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a94:	60bb      	str	r3, [r7, #8]
	y = y >= BOARD_ROWS ? BOARD_ROWS - 1 : y;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b15      	cmp	r3, #21
 8001a9a:	bfa8      	it	ge
 8001a9c:	2315      	movge	r3, #21
 8001a9e:	607b      	str	r3, [r7, #4]
	y = y < 0 ? 0 : y;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001aa6:	607b      	str	r3, [r7, #4]
	g->b->x[3] = g->b->x[2];
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001ab4:	6892      	ldr	r2, [r2, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
	g->b->y[3] = g->b->y[2];
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001ac4:	6992      	ldr	r2, [r2, #24]
 8001ac6:	61da      	str	r2, [r3, #28]
	g->b->x[2] = g->b->x[1];
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001ad4:	6852      	ldr	r2, [r2, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
	g->b->y[2] = g->b->y[1];
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001ae4:	6952      	ldr	r2, [r2, #20]
 8001ae6:	619a      	str	r2, [r3, #24]
	g->b->x[1] = g->b->x[0];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	605a      	str	r2, [r3, #4]
	g->b->y[1] = g->b->y[0];
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001b04:	6912      	ldr	r2, [r2, #16]
 8001b06:	615a      	str	r2, [r3, #20]
	g->b->x[0] = x;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
	g->b->y[0] = y;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	611a      	str	r2, [r3, #16]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <init_ball>:

void init_ball(Ball *b) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_OF_BALLS; i++) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e00d      	b.n	8001b52 <init_ball+0x2a>
		b->x[i] = 20;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	2114      	movs	r1, #20
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		b->y[i] = 10;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	3204      	adds	r2, #4
 8001b46:	210a      	movs	r1, #10
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < NUM_OF_BALLS; i++) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	ddee      	ble.n	8001b36 <init_ball+0xe>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <random_goal>:
void init_goal(Goal *g) {
	g->x = 0;
	g->y = 0;
}

void random_goal(Goal *g) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	srand(HAL_GetTick());
 8001b6c:	f001 fb2e 	bl	80031cc <HAL_GetTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f008 ff2c 	bl	800a9d0 <srand>
	uint32_t randvar = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
	HAL_RNG_GenerateRandomNumber(&hrng, &randvar);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <random_goal+0x6c>)
 8001b84:	f003 fb14 	bl	80051b0 <HAL_RNG_GenerateRandomNumber>
	g->x = randvar % (BOARD_COLS -2);
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	0853      	lsrs	r3, r2, #1
 8001b8c:	4911      	ldr	r1, [pc, #68]	; (8001bd4 <random_goal+0x70>)
 8001b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	212a      	movs	r1, #42	; 0x2a
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, &randvar);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <random_goal+0x6c>)
 8001baa:	f003 fb01 	bl	80051b0 <HAL_RNG_GenerateRandomNumber>
	g->y = randvar % (BOARD_ROWS -2);
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <random_goal+0x74>)
 8001bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb6:	091a      	lsrs	r2, r3, #4
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	1aca      	subs	r2, r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20002508 	.word	0x20002508
 8001bd4:	30c30c31 	.word	0x30c30c31
 8001bd8:	cccccccd 	.word	0xcccccccd

08001bdc <game_check>:

int game_check(Game *g) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	if (abs(g->b->x[0] - g->goal->x) < 2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	db50      	blt.n	8001c9e <game_check+0xc2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	dc45      	bgt.n	8001c9e <game_check+0xc2>
		if (abs(g->b->y[0] - g->goal->y) < 2) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	db39      	blt.n	8001c9e <game_check+0xc2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	dc2e      	bgt.n	8001c9e <game_check+0xc2>
			// Reached Goal
			scores[g->lvl - 1] = g->score;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8001c46:	3b01      	subs	r3, #1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8001c4e:	4916      	ldr	r1, [pc, #88]	; (8001ca8 <game_check+0xcc>)
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			g->score = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
			g->lvl++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8001c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6e:	480f      	ldr	r0, [pc, #60]	; (8001cac <game_check+0xd0>)
 8001c70:	f001 fdbe 	bl	80037f0 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001c74:	20c8      	movs	r0, #200	; 0xc8
 8001c76:	f001 fab5 	bl	80031e4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8001c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <game_check+0xd0>)
 8001c80:	f001 fdb6 	bl	80037f0 <HAL_GPIO_TogglePin>
			random_goal(g->goal);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff6a 	bl	8001b64 <random_goal>
			if (g->lvl > 6) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	dd01      	ble.n	8001c9e <game_check+0xc2>
				return 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <game_check+0xc4>
			}
		}
	return 0;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200002b0 	.word	0x200002b0
 8001cac:	48001000 	.word	0x48001000

08001cb0 <set_score>:

void set_score(Game *g, int score) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
	g->score = score;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <print_info>:

void print_info(Game *g) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, "Level: ", strlen("Level: "), HAL_MAX_DELAY);
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	2207      	movs	r2, #7
 8001cde:	491b      	ldr	r1, [pc, #108]	; (8001d4c <print_info+0x7c>)
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <print_info+0x80>)
 8001ce2:	f004 fb6b 	bl	80063bc <HAL_UART_Transmit>
	UART_print(g->lvl);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fd2b 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nScore: ", strlen("\r\nScore: "),
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	2209      	movs	r2, #9
 8001cf8:	4916      	ldr	r1, [pc, #88]	; (8001d54 <print_info+0x84>)
 8001cfa:	4815      	ldr	r0, [pc, #84]	; (8001d50 <print_info+0x80>)
 8001cfc:	f004 fb5e 	bl	80063bc <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	UART_print(g->score);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd1e 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nGoal x: ", strlen("\r\nGoal x: "), HAL_MAX_DELAY);
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	220a      	movs	r2, #10
 8001d12:	4911      	ldr	r1, [pc, #68]	; (8001d58 <print_info+0x88>)
 8001d14:	480e      	ldr	r0, [pc, #56]	; (8001d50 <print_info+0x80>)
 8001d16:	f004 fb51 	bl	80063bc <HAL_UART_Transmit>
	UART_print(g->goal->x);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fd10 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\t\tGoal y: ", strlen("\t\tGoal y: "), HAL_MAX_DELAY);
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	490b      	ldr	r1, [pc, #44]	; (8001d5c <print_info+0x8c>)
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <print_info+0x80>)
 8001d32:	f004 fb43 	bl	80063bc <HAL_UART_Transmit>
	UART_print(g->goal->y);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd02 	bl	8001748 <UART_print>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0800c200 	.word	0x0800c200
 8001d50:	200025a8 	.word	0x200025a8
 8001d54:	0800c208 	.word	0x0800c208
 8001d58:	0800c214 	.word	0x0800c214
 8001d5c:	0800c220 	.word	0x0800c220

08001d60 <init_game>:

void init_game(Game *g, Ball *b, Goal *goal) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	g->rows = BOARD_ROWS;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2216      	movs	r2, #22
 8001d70:	601a      	str	r2, [r3, #0]
	g->cols = BOARD_COLS;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	222c      	movs	r2, #44	; 0x2c
 8001d76:	605a      	str	r2, [r3, #4]
	g->lvl = 1;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
	g->score = 0;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
//	g->board = malloc(rows*sizeof(uint8_t*));
//	for(int i = 0; i < rows; i++)
//		g->board[i] = malloc(cols*sizeof(uint8_t));
	g->goal = goal;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
	g->b = b;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
	update_board(g);
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff fd89 	bl	80018b0 <update_board>
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dae:	f001 f9db 	bl	8003168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db2:	f000 f863 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db6:	f000 fa59 	bl	800226c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dba:	f000 f8ff 	bl	8001fbc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001dbe:	f000 f93d 	bl	800203c <MX_I2C2_Init>
  MX_RNG_Init();
 8001dc2:	f000 f97b 	bl	80020bc <MX_RNG_Init>
  MX_SPI2_Init();
 8001dc6:	f000 f98d 	bl	80020e4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001dca:	f000 fa1f 	bl	800220c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001dce:	f000 f9c7 	bl	8002160 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	491f      	ldr	r1, [pc, #124]	; (8001e54 <main+0xac>)
 8001dd6:	4820      	ldr	r0, [pc, #128]	; (8001e58 <main+0xb0>)
 8001dd8:	f004 fb84 	bl	80064e4 <HAL_UART_Receive_IT>

	/* Init the uart Buffers */
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	e00c      	b.n	8001dfc <main+0x54>
		gbl_uart2_transmitBuffer[i] = '0' + i;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	3230      	adds	r2, #48	; 0x30
 8001de8:	b2d1      	uxtb	r1, r2
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <main+0xb4>)
 8001dec:	54d1      	strb	r1, [r2, r3]
		gbl_uart2_receiveBuffer[i] = 0;
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <main+0xb8>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++) {
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b4f      	cmp	r3, #79	; 0x4f
 8001e00:	d9ef      	bls.n	8001de2 <main+0x3a>
	}
	sprintf((char*) gbl_uart2_transmitBuffer, "Project Game Startup\a\n\r");
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <main+0xb4>)
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <main+0xbc>)
 8001e06:	4615      	mov	r5, r2
 8001e08:	461c      	mov	r4, r3
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	6028      	str	r0, [r5, #0]
 8001e0e:	6069      	str	r1, [r5, #4]
 8001e10:	60aa      	str	r2, [r5, #8]
 8001e12:	60eb      	str	r3, [r5, #12]
 8001e14:	cc03      	ldmia	r4!, {r0, r1}
 8001e16:	6128      	str	r0, [r5, #16]
 8001e18:	6169      	str	r1, [r5, #20]
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer,
			strlen((char*) gbl_uart2_transmitBuffer), 100);
 8001e1a:	4810      	ldr	r0, [pc, #64]	; (8001e5c <main+0xb4>)
 8001e1c:	f7fe f9d8 	bl	80001d0 <strlen>
 8001e20:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer,
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	2364      	movs	r3, #100	; 0x64
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <main+0xb4>)
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <main+0xb0>)
 8001e2a:	f004 fac7 	bl	80063bc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e2e:	f005 fb33 	bl	8007498 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of display_mutex */
  display_mutexHandle = osMutexNew(&display_mutex_attributes);
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <main+0xc0>)
 8001e34:	f005 fc40 	bl	80076b8 <osMutexNew>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <main+0xc4>)
 8001e3c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <main+0xc8>)
 8001e40:	2100      	movs	r1, #0
 8001e42:	480c      	ldr	r0, [pc, #48]	; (8001e74 <main+0xcc>)
 8001e44:	f005 fb92 	bl	800756c <osThreadNew>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <main+0xd0>)
 8001e4c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001e4e:	f005 fb57 	bl	8007500 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e52:	e7fe      	b.n	8001e52 <main+0xaa>
 8001e54:	20002480 	.word	0x20002480
 8001e58:	200025a8 	.word	0x200025a8
 8001e5c:	20002518 	.word	0x20002518
 8001e60:	2000248c 	.word	0x2000248c
 8001e64:	0800c248 	.word	0x0800c248
 8001e68:	0800c3d4 	.word	0x0800c3d4
 8001e6c:	20002504 	.word	0x20002504
 8001e70:	0800c3b0 	.word	0x0800c3b0
 8001e74:	080027d1 	.word	0x080027d1
 8001e78:	20001fa0 	.word	0x20001fa0

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0b8      	sub	sp, #224	; 0xe0
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e86:	2244      	movs	r2, #68	; 0x44
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f008 f93b 	bl	800a106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2288      	movs	r2, #136	; 0x88
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f008 f92d 	bl	800a106 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001eac:	f001 fde0 	bl	8003a70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001eb0:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <SystemClock_Config+0x138>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <SystemClock_Config+0x138>)
 8001eb8:	f023 0318 	bic.w	r3, r3, #24
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ec0:	2314      	movs	r3, #20
 8001ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ed8:	2360      	movs	r3, #96	; 0x60
 8001eda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001ef0:	2328      	movs	r3, #40	; 0x28
 8001ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fe23 	bl	8003b58 <HAL_RCC_OscConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f18:	f000 fd16 	bl	8002948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f22:	2303      	movs	r3, #3
 8001f24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f3a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f3e:	2104      	movs	r1, #4
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 f9ef 	bl	8004324 <HAL_RCC_ClockConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f4c:	f000 fcfc 	bl	8002948 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <SystemClock_Config+0x13c>)
 8001f52:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001f60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f64:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f6e:	2310      	movs	r3, #16
 8001f70:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f72:	2307      	movs	r3, #7
 8001f74:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f82:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fc02 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001f92:	f000 fcd9 	bl	8002948 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f9a:	f001 fd87 	bl	8003aac <HAL_PWREx_ControlVoltageScaling>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001fa4:	f000 fcd0 	bl	8002948 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001fa8:	f002 fed8 	bl	8004d5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001fac:	bf00      	nop
 8001fae:	37e0      	adds	r7, #224	; 0xe0
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	000400c2 	.word	0x000400c2

08001fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <MX_I2C1_Init+0x78>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <MX_I2C1_Init+0x7c>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff8:	f001 fc13 	bl	8003822 <HAL_I2C_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002002:	f000 fca1 	bl	8002948 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_I2C1_Init+0x74>)
 800200a:	f001 fc99 	bl	8003940 <HAL_I2CEx_ConfigAnalogFilter>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002014:	f000 fc98 	bl	8002948 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <MX_I2C1_Init+0x74>)
 800201c:	f001 fcdb 	bl	80039d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002026:	f000 fc8f 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200023e8 	.word	0x200023e8
 8002034:	40005400 	.word	0x40005400
 8002038:	10909cec 	.word	0x10909cec

0800203c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <MX_I2C2_Init+0x78>)
 8002044:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <MX_I2C2_Init+0x7c>)
 800204a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <MX_I2C2_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002054:	2201      	movs	r2, #1
 8002056:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_I2C2_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_I2C2_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002076:	480e      	ldr	r0, [pc, #56]	; (80020b0 <MX_I2C2_Init+0x74>)
 8002078:	f001 fbd3 	bl	8003822 <HAL_I2C_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002082:	f000 fc61 	bl	8002948 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <MX_I2C2_Init+0x74>)
 800208a:	f001 fc59 	bl	8003940 <HAL_I2CEx_ConfigAnalogFilter>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002094:	f000 fc58 	bl	8002948 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_I2C2_Init+0x74>)
 800209c:	f001 fc9b 	bl	80039d6 <HAL_I2CEx_ConfigDigitalFilter>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020a6:	f000 fc4f 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20002434 	.word	0x20002434
 80020b4:	40005800 	.word	0x40005800
 80020b8:	10909cec 	.word	0x10909cec

080020bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_RNG_Init+0x20>)
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <MX_RNG_Init+0x24>)
 80020c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_RNG_Init+0x20>)
 80020c8:	f003 f822 	bl	8005110 <HAL_RNG_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80020d2:	f000 fc39 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20002508 	.word	0x20002508
 80020e0:	50060800 	.word	0x50060800

080020e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_SPI2_Init+0x74>)
 80020ea:	4a1c      	ldr	r2, [pc, #112]	; (800215c <MX_SPI2_Init+0x78>)
 80020ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_SPI2_Init+0x74>)
 80020f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_SPI2_Init+0x74>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <MX_SPI2_Init+0x74>)
 80020fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002102:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_SPI2_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <MX_SPI2_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_SPI2_Init+0x74>)
 8002112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002116:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_SPI2_Init+0x74>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_SPI2_Init+0x74>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_SPI2_Init+0x74>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_SPI2_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_SPI2_Init+0x74>)
 8002132:	2207      	movs	r2, #7
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_SPI2_Init+0x74>)
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_SPI2_Init+0x74>)
 800213e:	2208      	movs	r2, #8
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_SPI2_Init+0x74>)
 8002144:	f003 f883 	bl	800524e <HAL_SPI_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800214e:	f000 fbfb 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20001fa4 	.word	0x20001fa4
 800215c:	40003800 	.word	0x40003800

08002160 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	615a      	str	r2, [r3, #20]
 8002182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <MX_TIM2_Init+0xa8>)
 8002186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_TIM2_Init+0xa8>)
 800218e:	224f      	movs	r2, #79	; 0x4f
 8002190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <MX_TIM2_Init+0xa8>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_TIM2_Init+0xa8>)
 800219a:	f242 7210 	movw	r2, #10000	; 0x2710
 800219e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_TIM2_Init+0xa8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_TIM2_Init+0xa8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80021ac:	4816      	ldr	r0, [pc, #88]	; (8002208 <MX_TIM2_Init+0xa8>)
 80021ae:	f003 f945 	bl	800543c <HAL_TIM_OC_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80021b8:	f000 fbc6 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	480f      	ldr	r0, [pc, #60]	; (8002208 <MX_TIM2_Init+0xa8>)
 80021cc:	f004 f802 	bl	80061d4 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80021d6:	f000 fbb7 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_TIM2_Init+0xa8>)
 80021f2:	f003 fbbd 	bl	8005970 <HAL_TIM_OC_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80021fc:	f000 fba4 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20002568 	.word	0x20002568

0800220c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <MX_USART2_UART_Init+0x5c>)
 8002214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002218:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800221c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USART2_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USART2_UART_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USART2_UART_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USART2_UART_Init+0x58>)
 8002250:	f004 f866 	bl	8006320 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800225a:	f000 fb75 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200025a8 	.word	0x200025a8
 8002268:	40004400 	.word	0x40004400

0800226c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002282:	4bb7      	ldr	r3, [pc, #732]	; (8002560 <MX_GPIO_Init+0x2f4>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	4ab6      	ldr	r2, [pc, #728]	; (8002560 <MX_GPIO_Init+0x2f4>)
 8002288:	f043 0310 	orr.w	r3, r3, #16
 800228c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228e:	4bb4      	ldr	r3, [pc, #720]	; (8002560 <MX_GPIO_Init+0x2f4>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4bb1      	ldr	r3, [pc, #708]	; (8002560 <MX_GPIO_Init+0x2f4>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	4ab0      	ldr	r2, [pc, #704]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a6:	4bae      	ldr	r3, [pc, #696]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b2:	4bab      	ldr	r3, [pc, #684]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	4aaa      	ldr	r2, [pc, #680]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022be:	4ba8      	ldr	r3, [pc, #672]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4ba5      	ldr	r3, [pc, #660]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4aa4      	ldr	r2, [pc, #656]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d6:	4ba2      	ldr	r3, [pc, #648]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	4b9f      	ldr	r3, [pc, #636]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	4a9e      	ldr	r2, [pc, #632]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ee:	4b9c      	ldr	r3, [pc, #624]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	4b99      	ldr	r3, [pc, #612]	; (8002560 <MX_GPIO_Init+0x2f4>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	4a98      	ldr	r2, [pc, #608]	; (8002560 <MX_GPIO_Init+0x2f4>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002306:	4b96      	ldr	r3, [pc, #600]	; (8002560 <MX_GPIO_Init+0x2f4>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f240 1109 	movw	r1, #265	; 0x109
 8002318:	4892      	ldr	r0, [pc, #584]	; (8002564 <MX_GPIO_Init+0x2f8>)
 800231a:	f001 fa51 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	210c      	movs	r1, #12
 8002322:	4891      	ldr	r0, [pc, #580]	; (8002568 <MX_GPIO_Init+0x2fc>)
 8002324:	f001 fa4c 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232e:	488f      	ldr	r0, [pc, #572]	; (800256c <MX_GPIO_Init+0x300>)
 8002330:	f001 fa46 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233a:	488c      	ldr	r0, [pc, #560]	; (800256c <MX_GPIO_Init+0x300>)
 800233c:	f001 fa40 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	488a      	ldr	r0, [pc, #552]	; (8002570 <MX_GPIO_Init+0x304>)
 8002346:	f001 fa3b 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 800234a:	23f4      	movs	r3, #244	; 0xf4
 800234c:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800235a:	230d      	movs	r3, #13
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	487f      	ldr	r0, [pc, #508]	; (8002564 <MX_GPIO_Init+0x2f8>)
 8002366:	f001 f883 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800236a:	2308      	movs	r3, #8
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236e:	2301      	movs	r3, #1
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4619      	mov	r1, r3
 8002380:	4878      	ldr	r0, [pc, #480]	; (8002564 <MX_GPIO_Init+0x2f8>)
 8002382:	f001 f875 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8002386:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800238c:	4b79      	ldr	r3, [pc, #484]	; (8002574 <MX_GPIO_Init+0x308>)
 800238e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4874      	ldr	r0, [pc, #464]	; (800256c <MX_GPIO_Init+0x300>)
 800239c:	f001 f868 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80023a0:	2307      	movs	r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	486e      	ldr	r0, [pc, #440]	; (800256c <MX_GPIO_Init+0x300>)
 80023b4:	f001 f85c 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 80023b8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80023bc:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80023ca:	230b      	movs	r3, #11
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	4619      	mov	r1, r3
 80023d4:	4865      	ldr	r0, [pc, #404]	; (800256c <MX_GPIO_Init+0x300>)
 80023d6:	f001 f84b 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 80023da:	232f      	movs	r3, #47	; 0x2f
 80023dc:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023e2:	2302      	movs	r3, #2
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	f001 f83e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80023f4:	2310      	movs	r3, #16
 80023f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <MX_GPIO_Init+0x308>)
 80023fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f001 f831 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800240e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002412:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002420:	230b      	movs	r3, #11
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f001 f81f 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8002432:	f24f 2333 	movw	r3, #62003	; 0xf233
 8002436:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002444:	230b      	movs	r3, #11
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4619      	mov	r1, r3
 800244e:	4846      	ldr	r0, [pc, #280]	; (8002568 <MX_GPIO_Init+0x2fc>)
 8002450:	f001 f80e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8002454:	2304      	movs	r3, #4
 8002456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245c:	2301      	movs	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	483f      	ldr	r0, [pc, #252]	; (8002568 <MX_GPIO_Init+0x2fc>)
 800246c:	f001 f800 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8002470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002476:	2301      	movs	r3, #1
 8002478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4836      	ldr	r0, [pc, #216]	; (8002564 <MX_GPIO_Init+0x2f8>)
 800248a:	f000 fff1 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 800248e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80024a0:	230d      	movs	r3, #13
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482e      	ldr	r0, [pc, #184]	; (8002564 <MX_GPIO_Init+0x2f8>)
 80024ac:	f000 ffe0 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 80024b0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80024b4:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024c2:	230a      	movs	r3, #10
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	4825      	ldr	r0, [pc, #148]	; (8002564 <MX_GPIO_Init+0x2f8>)
 80024ce:	f000 ffcf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 80024d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80024d6:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80024e4:	230b      	movs	r3, #11
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	4820      	ldr	r0, [pc, #128]	; (8002570 <MX_GPIO_Init+0x304>)
 80024f0:	f000 ffbe 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 80024f4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	4817      	ldr	r0, [pc, #92]	; (800256c <MX_GPIO_Init+0x300>)
 800250e:	f000 ffaf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002512:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002524:	230a      	movs	r3, #10
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002532:	f000 ff9d 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8002536:	2305      	movs	r3, #5
 8002538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_GPIO_Init+0x308>)
 800253c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	4809      	ldr	r0, [pc, #36]	; (8002570 <MX_GPIO_Init+0x304>)
 800254a:	f000 ff91 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2301      	movs	r3, #1
 8002554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	e00c      	b.n	8002578 <MX_GPIO_Init+0x30c>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	48001000 	.word	0x48001000
 8002568:	48000400 	.word	0x48000400
 800256c:	48000800 	.word	0x48000800
 8002570:	48000c00 	.word	0x48000c00
 8002574:	10120000 	.word	0x10120000
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	4619      	mov	r1, r3
 8002580:	481d      	ldr	r0, [pc, #116]	; (80025f8 <MX_GPIO_Init+0x38c>)
 8002582:	f000 ff75 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8002586:	2308      	movs	r3, #8
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258a:	2301      	movs	r3, #1
 800258c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4817      	ldr	r0, [pc, #92]	; (80025fc <MX_GPIO_Init+0x390>)
 800259e:	f000 ff67 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80025a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_GPIO_Init+0x394>)
 80025aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_GPIO_Init+0x390>)
 80025b8:	f000 ff5a 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80025bc:	2301      	movs	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_GPIO_Init+0x398>)
 80025d4:	f000 ff4c 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80025d8:	2302      	movs	r3, #2
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <MX_GPIO_Init+0x394>)
 80025de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <MX_GPIO_Init+0x398>)
 80025ec:	f000 ff40 	bl	8003470 <HAL_GPIO_Init>

}
 80025f0:	bf00      	nop
 80025f2:	3730      	adds	r7, #48	; 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	48000c00 	.word	0x48000c00
 80025fc:	48000400 	.word	0x48000400
 8002600:	10120000 	.word	0x10120000
 8002604:	48001000 	.word	0x48001000

08002608 <HAL_UART_RxCpltCallback>:
int32_t yth = 0;

int32_t xth_offset = 0;
int32_t yth_offset = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8002610:	2201      	movs	r2, #1
 8002612:	4904      	ldr	r1, [pc, #16]	; (8002624 <HAL_UART_RxCpltCallback+0x1c>)
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <HAL_UART_RxCpltCallback+0x20>)
 8002616:	f003 ff65 	bl	80064e4 <HAL_UART_Receive_IT>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20002480 	.word	0x20002480
 8002628:	200025a8 	.word	0x200025a8

0800262c <print_scores>:

void print_scores() {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0

	int max_lvl = game.lvl;
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <print_scores+0x13c>)
 8002634:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8002638:	607b      	str	r3, [r7, #4]
	uint8_t esc[1] = { 27 };
 800263a:	231b      	movs	r3, #27
 800263c:	703b      	strb	r3, [r7, #0]
	HAL_UART_Transmit(&huart2, esc, strlen(esc), HAL_MAX_DELAY);
 800263e:	463b      	mov	r3, r7
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fdc5 	bl	80001d0 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	4639      	mov	r1, r7
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	4846      	ldr	r0, [pc, #280]	; (800276c <print_scores+0x140>)
 8002652:	f003 feb3 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "[2J", strlen("[2J"), HAL_MAX_DELAY);
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	2203      	movs	r2, #3
 800265c:	4944      	ldr	r1, [pc, #272]	; (8002770 <print_scores+0x144>)
 800265e:	4843      	ldr	r0, [pc, #268]	; (800276c <print_scores+0x140>)
 8002660:	f003 feac 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, esc, strlen(esc), HAL_MAX_DELAY);
 8002664:	463b      	mov	r3, r7
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fdb2 	bl	80001d0 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	4639      	mov	r1, r7
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	483d      	ldr	r0, [pc, #244]	; (800276c <print_scores+0x140>)
 8002678:	f003 fea0 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "[H", strlen("[H"), HAL_MAX_DELAY);
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	2202      	movs	r2, #2
 8002682:	493c      	ldr	r1, [pc, #240]	; (8002774 <print_scores+0x148>)
 8002684:	4839      	ldr	r0, [pc, #228]	; (800276c <print_scores+0x140>)
 8002686:	f003 fe99 	bl	80063bc <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, "GAME OVER\r\n\nHere are the scores:\r\n\r\n",
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	4939      	ldr	r1, [pc, #228]	; (8002778 <print_scores+0x14c>)
 8002692:	4836      	ldr	r0, [pc, #216]	; (800276c <print_scores+0x140>)
 8002694:	f003 fe92 	bl	80063bc <HAL_UART_Transmit>
			strlen("GAME OVER\r\n\nHere are the scores:\r\n\r\n"),
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, "MAX LVL ACHIEVED: ",
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	2212      	movs	r2, #18
 800269e:	4937      	ldr	r1, [pc, #220]	; (800277c <print_scores+0x150>)
 80026a0:	4832      	ldr	r0, [pc, #200]	; (800276c <print_scores+0x140>)
 80026a2:	f003 fe8b 	bl	80063bc <HAL_UART_Transmit>
			strlen("MAX LVL ACHIEVED: "), HAL_MAX_DELAY);
	UART_print(max_lvl);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff f84e 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\n\n", strlen("\r\n\n"), HAL_MAX_DELAY);
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	2203      	movs	r2, #3
 80026b2:	4933      	ldr	r1, [pc, #204]	; (8002780 <print_scores+0x154>)
 80026b4:	482d      	ldr	r0, [pc, #180]	; (800276c <print_scores+0x140>)
 80026b6:	f003 fe81 	bl	80063bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\r\nLvL 1: ", strlen("\r\nLvL 1: "),
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	2209      	movs	r2, #9
 80026c0:	4930      	ldr	r1, [pc, #192]	; (8002784 <print_scores+0x158>)
 80026c2:	482a      	ldr	r0, [pc, #168]	; (800276c <print_scores+0x140>)
 80026c4:	f003 fe7a 	bl	80063bc <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(scores[0]);
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <print_scores+0x15c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff f83b 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nLvL 2: ", strlen("\r\nLvL 2: "),
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	2209      	movs	r2, #9
 80026d8:	492c      	ldr	r1, [pc, #176]	; (800278c <print_scores+0x160>)
 80026da:	4824      	ldr	r0, [pc, #144]	; (800276c <print_scores+0x140>)
 80026dc:	f003 fe6e 	bl	80063bc <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(scores[1]);
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <print_scores+0x15c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f82f 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nLvL 3: ", strlen("\r\nLvL 3: "),
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	2209      	movs	r2, #9
 80026f0:	4927      	ldr	r1, [pc, #156]	; (8002790 <print_scores+0x164>)
 80026f2:	481e      	ldr	r0, [pc, #120]	; (800276c <print_scores+0x140>)
 80026f4:	f003 fe62 	bl	80063bc <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(scores[2]);
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <print_scores+0x15c>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f823 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nLvL 4: ", strlen("\r\nLvL 4: "),
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	2209      	movs	r2, #9
 8002708:	4922      	ldr	r1, [pc, #136]	; (8002794 <print_scores+0x168>)
 800270a:	4818      	ldr	r0, [pc, #96]	; (800276c <print_scores+0x140>)
 800270c:	f003 fe56 	bl	80063bc <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(scores[3]);
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <print_scores+0x15c>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f817 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nLvL 5: ", strlen("\r\nLvL 5: "),
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	2209      	movs	r2, #9
 8002720:	491d      	ldr	r1, [pc, #116]	; (8002798 <print_scores+0x16c>)
 8002722:	4812      	ldr	r0, [pc, #72]	; (800276c <print_scores+0x140>)
 8002724:	f003 fe4a 	bl	80063bc <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(scores[4]);
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <print_scores+0x15c>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f80b 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\nLvL 6: ", strlen("\r\nLvL 6: "),
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	2209      	movs	r2, #9
 8002738:	4918      	ldr	r1, [pc, #96]	; (800279c <print_scores+0x170>)
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <print_scores+0x140>)
 800273c:	f003 fe3e 	bl	80063bc <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	UART_print(scores[5]);
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <print_scores+0x15c>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe ffff 	bl	8001748 <UART_print>
	HAL_UART_Transmit(&huart2, "\r\n\nPress enter to quit...",
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	2219      	movs	r2, #25
 8002750:	4913      	ldr	r1, [pc, #76]	; (80027a0 <print_scores+0x174>)
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <print_scores+0x140>)
 8002754:	f003 fe32 	bl	80063bc <HAL_UART_Transmit>
			strlen("\r\n\nPress enter to quit..."), HAL_MAX_DELAY);
	wait_for_key(13);
 8002758:	200d      	movs	r0, #13
 800275a:	f7ff f813 	bl	8001784 <wait_for_key>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20002008 	.word	0x20002008
 800276c:	200025a8 	.word	0x200025a8
 8002770:	0800c260 	.word	0x0800c260
 8002774:	0800c264 	.word	0x0800c264
 8002778:	0800c268 	.word	0x0800c268
 800277c:	0800c290 	.word	0x0800c290
 8002780:	0800c2a4 	.word	0x0800c2a4
 8002784:	0800c2a8 	.word	0x0800c2a8
 8002788:	200002b0 	.word	0x200002b0
 800278c:	0800c2b4 	.word	0x0800c2b4
 8002790:	0800c2c0 	.word	0x0800c2c0
 8002794:	0800c2cc 	.word	0x0800c2cc
 8002798:	0800c2d8 	.word	0x0800c2d8
 800279c:	0800c2e4 	.word	0x0800c2e4
 80027a0:	0800c2f0 	.word	0x0800c2f0

080027a4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d104      	bne.n	80027c0 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
		display_timer++;
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 80027be:	6013      	str	r3, [r2, #0]
	}
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	200002c8 	.word	0x200002c8

080027d0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if (BSP_GYRO_Init() != HAL_OK) {
 80027d8:	f7fe ff38 	bl	800164c <BSP_GYRO_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <StartDefaultTask+0x16>
		/* Initialization Error */
		Error_Handler();
 80027e2:	f000 f8b1 	bl	8002948 <Error_Handler>
	}
	srand(HAL_GetTick());
 80027e6:	f000 fcf1 	bl	80031cc <HAL_GetTick>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f008 f8ef 	bl	800a9d0 <srand>
	init_gyro(&gyro);
 80027f2:	4844      	ldr	r0, [pc, #272]	; (8002904 <StartDefaultTask+0x134>)
 80027f4:	f000 f8af 	bl	8002956 <init_gyro>
	init_ball(&b);
 80027f8:	4843      	ldr	r0, [pc, #268]	; (8002908 <StartDefaultTask+0x138>)
 80027fa:	f7ff f995 	bl	8001b28 <init_ball>
	random_goal(&goal);
 80027fe:	4843      	ldr	r0, [pc, #268]	; (800290c <StartDefaultTask+0x13c>)
 8002800:	f7ff f9b0 	bl	8001b64 <random_goal>
	init_game(&game, &b, &goal);
 8002804:	4a41      	ldr	r2, [pc, #260]	; (800290c <StartDefaultTask+0x13c>)
 8002806:	4940      	ldr	r1, [pc, #256]	; (8002908 <StartDefaultTask+0x138>)
 8002808:	4841      	ldr	r0, [pc, #260]	; (8002910 <StartDefaultTask+0x140>)
 800280a:	f7ff faa9 	bl	8001d60 <init_game>
	while (calibrate_gyro(&gyro))
 800280e:	bf00      	nop
 8002810:	483c      	ldr	r0, [pc, #240]	; (8002904 <StartDefaultTask+0x134>)
 8002812:	f000 f94b 	bl	8002aac <calibrate_gyro>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <StartDefaultTask+0x40>
		;

	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1); // Start display timer
 800281c:	2100      	movs	r1, #0
 800281e:	483d      	ldr	r0, [pc, #244]	; (8002914 <StartDefaultTask+0x144>)
 8002820:	f002 fe38 	bl	8005494 <HAL_TIM_OC_Start_IT>
	while (1) {
//		osDelay(1);

//		print_dmeasurement(&gyro);
		if (display_timer > 5) { // 15 hz
 8002824:	4b3c      	ldr	r3, [pc, #240]	; (8002918 <StartDefaultTask+0x148>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b05      	cmp	r3, #5
 800282a:	ddfb      	ble.n	8002824 <StartDefaultTask+0x54>
			if ((time_per_level[game.lvl - 1] -= 50) < 0) {
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <StartDefaultTask+0x140>)
 800282e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8002832:	3b01      	subs	r3, #1
 8002834:	4a39      	ldr	r2, [pc, #228]	; (800291c <StartDefaultTask+0x14c>)
 8002836:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800283a:	4b35      	ldr	r3, [pc, #212]	; (8002910 <StartDefaultTask+0x140>)
 800283c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8002840:	3b01      	subs	r3, #1
 8002842:	3a32      	subs	r2, #50	; 0x32
 8002844:	4935      	ldr	r1, [pc, #212]	; (800291c <StartDefaultTask+0x14c>)
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <StartDefaultTask+0x14c>)
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da11      	bge.n	8002878 <StartDefaultTask+0xa8>
				//Time is up
				HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8002854:	2100      	movs	r1, #0
 8002856:	482f      	ldr	r0, [pc, #188]	; (8002914 <StartDefaultTask+0x144>)
 8002858:	f002 feba 	bl	80055d0 <HAL_TIM_OC_Stop_IT>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800285c:	2104      	movs	r1, #4
 800285e:	4830      	ldr	r0, [pc, #192]	; (8002920 <StartDefaultTask+0x150>)
 8002860:	f000 ffc6 	bl	80037f0 <HAL_GPIO_TogglePin>
				HAL_Delay(200);
 8002864:	20c8      	movs	r0, #200	; 0xc8
 8002866:	f000 fcbd 	bl	80031e4 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800286a:	2104      	movs	r1, #4
 800286c:	482c      	ldr	r0, [pc, #176]	; (8002920 <StartDefaultTask+0x150>)
 800286e:	f000 ffbf 	bl	80037f0 <HAL_GPIO_TogglePin>
				print_scores();
 8002872:	f7ff fedb 	bl	800262c <print_scores>
				return 0;
 8002876:	e042      	b.n	80028fe <StartDefaultTask+0x12e>
			}
			set_score(&game, time_per_level[game.lvl - 1]);
 8002878:	4b25      	ldr	r3, [pc, #148]	; (8002910 <StartDefaultTask+0x140>)
 800287a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 800287e:	3b01      	subs	r3, #1
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <StartDefaultTask+0x14c>)
 8002882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002886:	4619      	mov	r1, r3
 8002888:	4821      	ldr	r0, [pc, #132]	; (8002910 <StartDefaultTask+0x140>)
 800288a:	f7ff fa11 	bl	8001cb0 <set_score>
			get_measurement(&gyro);
 800288e:	481d      	ldr	r0, [pc, #116]	; (8002904 <StartDefaultTask+0x134>)
 8002890:	f000 f8d2 	bl	8002a38 <get_measurement>
			move_ball(&game, -gyro.x, gyro.y);
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <StartDefaultTask+0x134>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4259      	negs	r1, r3
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <StartDefaultTask+0x134>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	481b      	ldr	r0, [pc, #108]	; (8002910 <StartDefaultTask+0x140>)
 80028a2:	f7ff f8e3 	bl	8001a6c <move_ball>
			if (game_check(&game)) {
 80028a6:	481a      	ldr	r0, [pc, #104]	; (8002910 <StartDefaultTask+0x140>)
 80028a8:	f7ff f998 	bl	8001bdc <game_check>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d018      	beq.n	80028e4 <StartDefaultTask+0x114>
				// Game is done
				HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80028b2:	2100      	movs	r1, #0
 80028b4:	4817      	ldr	r0, [pc, #92]	; (8002914 <StartDefaultTask+0x144>)
 80028b6:	f002 fe8b 	bl	80055d0 <HAL_TIM_OC_Stop_IT>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80028ba:	2104      	movs	r1, #4
 80028bc:	4818      	ldr	r0, [pc, #96]	; (8002920 <StartDefaultTask+0x150>)
 80028be:	f000 ff97 	bl	80037f0 <HAL_GPIO_TogglePin>
				HAL_Delay(200);
 80028c2:	20c8      	movs	r0, #200	; 0xc8
 80028c4:	f000 fc8e 	bl	80031e4 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80028c8:	2104      	movs	r1, #4
 80028ca:	4815      	ldr	r0, [pc, #84]	; (8002920 <StartDefaultTask+0x150>)
 80028cc:	f000 ff90 	bl	80037f0 <HAL_GPIO_TogglePin>
				game.lvl--;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <StartDefaultTask+0x140>)
 80028d2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 80028d6:	3b01      	subs	r3, #1
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <StartDefaultTask+0x140>)
 80028da:	f8c2 33d8 	str.w	r3, [r2, #984]	; 0x3d8
				print_scores();
 80028de:	f7ff fea5 	bl	800262c <print_scores>
				return 0;
 80028e2:	e00c      	b.n	80028fe <StartDefaultTask+0x12e>
			}
			display_timer = 0;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <StartDefaultTask+0x148>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
			update_board(&game);
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <StartDefaultTask+0x140>)
 80028ec:	f7fe ffe0 	bl	80018b0 <update_board>
			display_board(&game);
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <StartDefaultTask+0x140>)
 80028f2:	f7fe ff7b 	bl	80017ec <display_board>
			print_info(&game);
 80028f6:	4806      	ldr	r0, [pc, #24]	; (8002910 <StartDefaultTask+0x140>)
 80028f8:	f7ff f9ea 	bl	8001cd0 <print_info>
		if (display_timer > 5) { // 15 hz
 80028fc:	e792      	b.n	8002824 <StartDefaultTask+0x54>
//	}
//	osMutexAcquire(display_mutexHandle, 1);
//	display_board(&game);
//	osMutexRelease(display_mutexHandle);
  /* USER CODE END 5 */ 
}
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200024dc 	.word	0x200024dc
 8002908:	20001f80 	.word	0x20001f80
 800290c:	20002484 	.word	0x20002484
 8002910:	20002008 	.word	0x20002008
 8002914:	20002568 	.word	0x20002568
 8002918:	200002c8 	.word	0x200002c8
 800291c:	20000034 	.word	0x20000034
 8002920:	48000400 	.word	0x48000400

08002924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002936:	f000 fc37 	bl	80031a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40001000 	.word	0x40001000

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <init_gyro>:
#include "UART_Helpers.h"
#include "stm32l476g_discovery.h"
#include "stm32l476g_discovery_gyroscope.h"


void init_gyro(Gyro *g){
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	g->x = 0;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
	g->y = 0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
	g->z = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
	g->dx = 0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
	g->dy = 0;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
	g->dz = 0;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
	g->x_offset = 0;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
	g->y_offset = 0;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
	g->z_offset = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
	g->cnt = 0;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <update_gyro>:

void update_gyro(Gyro *g){
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	float buffer[3] = {0};
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
	BSP_GYRO_GetXYZ(buffer);
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe feae 	bl	8001720 <BSP_GYRO_GetXYZ>
	int32_t xscale = 5000;
 80029c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80029c8:	61fb      	str	r3, [r7, #28]
	int32_t yscale = 2500;
 80029ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80029ce:	61bb      	str	r3, [r7, #24]
	int32_t zscale = 5000;
 80029d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80029d4:	617b      	str	r3, [r7, #20]
	g->dx = buffer[0]/xscale;
 80029d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ec:	ee17 2a90 	vmov	r2, s15
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
	g->dy = buffer[1]/yscale;
 80029f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0a:	ee17 2a90 	vmov	r2, s15
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	611a      	str	r2, [r3, #16]
	g->dz = buffer[2]/zscale;
 8002a12:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a28:	ee17 2a90 	vmov	r2, s15
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	615a      	str	r2, [r3, #20]
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <get_measurement>:

void get_measurement(Gyro *g){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	update_gyro(g);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffb0 	bl	80029a6 <update_gyro>
	g->dx = g->dx - g->x_offset;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]
	g->dy = g->dy - g->y_offset;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]
	g->dz = g->dz - g->z_offset;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	615a      	str	r2, [r3, #20]

	g->x += g->dx;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
	g->y += g->dy;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	441a      	add	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	605a      	str	r2, [r3, #4]
	g->z += g->dz;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	441a      	add	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
	g->cnt++;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <calibrate_gyro>:
	uint8_t buffer[80];
	sprintf((char*) buffer, "$%d %d %d;\r\n", g->dx, g->dy, g->dz);
	HAL_UART_Transmit(&huart2, buffer, strlen((char *)buffer),100);
}

int calibrate_gyro(Gyro *g){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08c      	sub	sp, #48	; 0x30
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	UART_prints("\r\n\nPress Enter to Calibrate Gyro...\r\n");
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	2225      	movs	r2, #37	; 0x25
 8002aba:	4960      	ldr	r1, [pc, #384]	; (8002c3c <calibrate_gyro+0x190>)
 8002abc:	4860      	ldr	r0, [pc, #384]	; (8002c40 <calibrate_gyro+0x194>)
 8002abe:	f003 fc7d 	bl	80063bc <HAL_UART_Transmit>
	wait_for_key(13);
 8002ac2:	200d      	movs	r0, #13
 8002ac4:	f7fe fe5e 	bl	8001784 <wait_for_key>

	g->x_offset = 0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
	int32_t xmin = 10000000;
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <calibrate_gyro+0x198>)
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t xmax = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t xsum = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
	g->y_offset = 0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	61da      	str	r2, [r3, #28]
	int32_t ymin = 10000000;
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <calibrate_gyro+0x198>)
 8002ae2:	623b      	str	r3, [r7, #32]
	int32_t ymax = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
	int32_t ysum = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
	g->z_offset = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	621a      	str	r2, [r3, #32]
	int32_t zmin = 10000000;
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <calibrate_gyro+0x198>)
 8002af4:	617b      	str	r3, [r7, #20]
	int32_t zmax = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
	int32_t zsum = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<GYRO_CAL_SIZE; i++){
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	e044      	b.n	8002b8e <calibrate_gyro+0xe2>
		get_measurement(g);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff97 	bl	8002a38 <get_measurement>
		xsum += g->dx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	4413      	add	r3, r2
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
		ysum += g->dy;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
		zsum += g->dz;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
		if (g->dx < xmin) xmin = g->dx;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	dd02      	ble.n	8002b38 <calibrate_gyro+0x8c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (g->dx > xmax) xmax = g->dx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	da02      	bge.n	8002b48 <calibrate_gyro+0x9c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
		if (g->dy < ymin) ymin = g->dy;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dd02      	ble.n	8002b58 <calibrate_gyro+0xac>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	623b      	str	r3, [r7, #32]
		if (g->dy > ymax) ymax = g->dy;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	da02      	bge.n	8002b68 <calibrate_gyro+0xbc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	61fb      	str	r3, [r7, #28]
		if (g->dz < zmin) zmin = g->dz;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dd02      	ble.n	8002b78 <calibrate_gyro+0xcc>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
		if (g->dz > zmax) zmax = g->dz;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	da02      	bge.n	8002b88 <calibrate_gyro+0xdc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	613b      	str	r3, [r7, #16]
	for (int i=0; i<GYRO_CAL_SIZE; i++){
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b31      	cmp	r3, #49	; 0x31
 8002b92:	ddb7      	ble.n	8002b04 <calibrate_gyro+0x58>
	}

	g->x_offset = xsum/GYRO_CAL_SIZE;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	4a2c      	ldr	r2, [pc, #176]	; (8002c48 <calibrate_gyro+0x19c>)
 8002b98:	fb82 1203 	smull	r1, r2, r2, r3
 8002b9c:	1112      	asrs	r2, r2, #4
 8002b9e:	17db      	asrs	r3, r3, #31
 8002ba0:	1ad2      	subs	r2, r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
	g->y_offset = ysum/GYRO_CAL_SIZE;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <calibrate_gyro+0x19c>)
 8002baa:	fb82 1203 	smull	r1, r2, r2, r3
 8002bae:	1112      	asrs	r2, r2, #4
 8002bb0:	17db      	asrs	r3, r3, #31
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	61da      	str	r2, [r3, #28]
	g->z_offset = zsum/GYRO_CAL_SIZE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <calibrate_gyro+0x19c>)
 8002bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc0:	1112      	asrs	r2, r2, #4
 8002bc2:	17db      	asrs	r3, r3, #31
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	621a      	str	r2, [r3, #32]
#ifdef DEBUG
	UART_println(xmax-xmin);
 8002bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fded 	bl	80017b0 <UART_println>
	UART_println(ymax-ymin);
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fde7 	bl	80017b0 <UART_println>
	UART_println(zmax-zmin);
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fde1 	bl	80017b0 <UART_println>
#endif
	if (xmax-xmin>1000 || ymax-ymin>1000 || zmax-zmin>1000){
 8002bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf8:	dc0b      	bgt.n	8002c12 <calibrate_gyro+0x166>
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c04:	dc05      	bgt.n	8002c12 <calibrate_gyro+0x166>
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c10:	dd08      	ble.n	8002c24 <calibrate_gyro+0x178>
		UART_prints("Calibration Failed. Please keep the gyro still ...\r\n");
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	2234      	movs	r2, #52	; 0x34
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <calibrate_gyro+0x1a0>)
 8002c1a:	4809      	ldr	r0, [pc, #36]	; (8002c40 <calibrate_gyro+0x194>)
 8002c1c:	f003 fbce 	bl	80063bc <HAL_UART_Transmit>
		return 1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <calibrate_gyro+0x188>
	}
	UART_prints("Calibration Success...\r\n");
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
 8002c28:	2218      	movs	r2, #24
 8002c2a:	4909      	ldr	r1, [pc, #36]	; (8002c50 <calibrate_gyro+0x1a4>)
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <calibrate_gyro+0x194>)
 8002c2e:	f003 fbc5 	bl	80063bc <HAL_UART_Transmit>
	return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3730      	adds	r7, #48	; 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	0800c31c 	.word	0x0800c31c
 8002c40:	200025a8 	.word	0x200025a8
 8002c44:	00989680 	.word	0x00989680
 8002c48:	51eb851f 	.word	0x51eb851f
 8002c4c:	0800c344 	.word	0x0800c344
 8002c50:	0800c37c 	.word	0x0800c37c

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6613      	str	r3, [r2, #96]	; 0x60
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	f06f 0001 	mvn.w	r0, #1
 8002c92:	f000 fb81 	bl	8003398 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <HAL_I2C_MspInit+0xd8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d128      	bne.n	8002d18 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4a2d      	ldr	r2, [pc, #180]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002cde:	23c0      	movs	r3, #192	; 0xc0
 8002ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce2:	2312      	movs	r3, #18
 8002ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4822      	ldr	r0, [pc, #136]	; (8002d84 <HAL_I2C_MspInit+0xe0>)
 8002cfa:	f000 fbb9 	bl	8003470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d16:	e02d      	b.n	8002d74 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_I2C_MspInit+0xe4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d128      	bne.n	8002d74 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8002d3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d40:	2312      	movs	r3, #18
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	480b      	ldr	r0, [pc, #44]	; (8002d84 <HAL_I2C_MspInit+0xe0>)
 8002d58:	f000 fb8a 	bl	8003470 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_I2C_MspInit+0xdc>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3730      	adds	r7, #48	; 0x30
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	40021000 	.word	0x40021000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	40005800 	.word	0x40005800

08002d8c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_RNG_MspInit+0x38>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RNG_MspInit+0x3c>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RNG_MspInit+0x3c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RNG_MspInit+0x3c>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	50060800 	.word	0x50060800
 8002dc8:	40021000 	.word	0x40021000

08002dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <HAL_SPI_MspInit+0x7c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d127      	bne.n	8002e3e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_SPI_MspInit+0x80>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <HAL_SPI_MspInit+0x80>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfa:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_SPI_MspInit+0x80>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_SPI_MspInit+0x80>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_SPI_MspInit+0x80>)
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_SPI_MspInit+0x80>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8002e1e:	231a      	movs	r3, #26
 8002e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e2e:	2305      	movs	r3, #5
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4805      	ldr	r0, [pc, #20]	; (8002e50 <HAL_SPI_MspInit+0x84>)
 8002e3a:	f000 fb19 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40003800 	.word	0x40003800
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	48000c00 	.word	0x48000c00

08002e54 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d113      	bne.n	8002e8e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_TIM_OC_MspInit+0x44>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <HAL_TIM_OC_MspInit+0x44>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6593      	str	r3, [r2, #88]	; 0x58
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_TIM_OC_MspInit+0x44>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2105      	movs	r1, #5
 8002e82:	201c      	movs	r0, #28
 8002e84:	f000 fa88 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e88:	201c      	movs	r0, #28
 8002e8a:	f000 faa1 	bl	80033d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_UART_MspInit+0x8c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12f      	bne.n	8002f1e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_UART_MspInit+0x90>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_UART_MspInit+0x90>)
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_UART_MspInit+0x90>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_UART_MspInit+0x90>)
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_UART_MspInit+0x90>)
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_UART_MspInit+0x90>)
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002eee:	2360      	movs	r3, #96	; 0x60
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002efe:	2307      	movs	r3, #7
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	4809      	ldr	r0, [pc, #36]	; (8002f30 <HAL_UART_MspInit+0x94>)
 8002f0a:	f000 fab1 	bl	8003470 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2105      	movs	r1, #5
 8002f12:	2026      	movs	r0, #38	; 0x26
 8002f14:	f000 fa40 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f18:	2026      	movs	r0, #38	; 0x26
 8002f1a:	f000 fa59 	bl	80033d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40004400 	.word	0x40004400
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	48000c00 	.word	0x48000c00

08002f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	; 0x30
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002f44:	2200      	movs	r2, #0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	2036      	movs	r0, #54	; 0x36
 8002f4a:	f000 fa25 	bl	8003398 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002f4e:	2036      	movs	r0, #54	; 0x36
 8002f50:	f000 fa3e 	bl	80033d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_InitTick+0x9c>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_InitTick+0x9c>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_InitTick+0x9c>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f6c:	f107 0210 	add.w	r2, r7, #16
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fb78 	bl	800466c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f001 fb4a 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8002f80:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_InitTick+0xa0>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0c9b      	lsrs	r3, r3, #18
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_InitTick+0xa8>)
 8002f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f9e:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fb2:	f002 f9e4 	bl	800537e <HAL_TIM_Base_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002fbc:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <HAL_InitTick+0xa4>)
 8002fbe:	f002 fa13 	bl	80053e8 <HAL_TIM_Base_Start_IT>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	20002628 	.word	0x20002628
 8002fdc:	40001000 	.word	0x40001000

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff2:	e7fe      	b.n	8002ff2 <HardFault_Handler+0x4>

08002ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <MemManage_Handler+0x4>

08002ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffe:	e7fe      	b.n	8002ffe <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	e7fe      	b.n	8003004 <UsageFault_Handler+0x4>

08003006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <TIM2_IRQHandler+0x10>)
 800301a:	f002 fb89 	bl	8005730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20002568 	.word	0x20002568

08003028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <USART2_IRQHandler+0x10>)
 800302e:	f003 fafb 	bl	8006628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200025a8 	.word	0x200025a8

0800303c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM6_DAC_IRQHandler+0x10>)
 8003042:	f002 fb75 	bl	8005730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20002628 	.word	0x20002628

08003050 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <_sbrk+0x50>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <_sbrk+0x16>
		heap_end = &end;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <_sbrk+0x50>)
 8003062:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <_sbrk+0x54>)
 8003064:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <_sbrk+0x50>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <_sbrk+0x50>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	466a      	mov	r2, sp
 8003076:	4293      	cmp	r3, r2
 8003078:	d907      	bls.n	800308a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800307a:	f007 f80f 	bl	800a09c <__errno>
 800307e:	4602      	mov	r2, r0
 8003080:	230c      	movs	r3, #12
 8003082:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	e006      	b.n	8003098 <_sbrk+0x48>
	}

	heap_end += incr;
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <_sbrk+0x50>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <_sbrk+0x50>)
 8003094:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200002cc 	.word	0x200002cc
 80030a4:	200026b0 	.word	0x200026b0

080030a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030ac:	4b17      	ldr	r3, [pc, #92]	; (800310c <SystemInit+0x64>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <SystemInit+0x64>)
 80030b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <SystemInit+0x68>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <SystemInit+0x68>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <SystemInit+0x68>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <SystemInit+0x68>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <SystemInit+0x68>)
 80030d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80030d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80030dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <SystemInit+0x68>)
 80030e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <SystemInit+0x68>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <SystemInit+0x68>)
 80030ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <SystemInit+0x68>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <SystemInit+0x64>)
 80030fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030fe:	609a      	str	r2, [r3, #8]
#endif
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00
 8003110:	40021000 	.word	0x40021000

08003114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800314c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003118:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800311a:	e003      	b.n	8003124 <LoopCopyDataInit>

0800311c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800311e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003120:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003122:	3104      	adds	r1, #4

08003124 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003128:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800312a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800312c:	d3f6      	bcc.n	800311c <CopyDataInit>
	ldr	r2, =_sbss
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003130:	e002      	b.n	8003138 <LoopFillZerobss>

08003132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003132:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003134:	f842 3b04 	str.w	r3, [r2], #4

08003138 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <LoopForever+0x16>)
	cmp	r2, r3
 800313a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800313c:	d3f9      	bcc.n	8003132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800313e:	f7ff ffb3 	bl	80030a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003142:	f006 ffb1 	bl	800a0a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003146:	f7fe fe2f 	bl	8001da8 <main>

0800314a <LoopForever>:

LoopForever:
    b LoopForever
 800314a:	e7fe      	b.n	800314a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800314c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003150:	0800c698 	.word	0x0800c698
	ldr	r0, =_sdata
 8003154:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003158:	2000022c 	.word	0x2000022c
	ldr	r2, =_sbss
 800315c:	2000022c 	.word	0x2000022c
	ldr	r3, = _ebss
 8003160:	200026b0 	.word	0x200026b0

08003164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC1_2_IRQHandler>
	...

08003168 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_Init+0x3c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <HAL_Init+0x3c>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800317e:	2003      	movs	r0, #3
 8003180:	f000 f8ff 	bl	8003382 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff fed5 	bl	8002f34 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	e001      	b.n	800319a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003196:	f7ff fd5d 	bl	8002c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800319a:	79fb      	ldrb	r3, [r7, #7]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40022000 	.word	0x40022000

080031a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_IncTick+0x1c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_IncTick+0x20>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <HAL_IncTick+0x1c>)
 80031b8:	6013      	str	r3, [r2, #0]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	20002668 	.word	0x20002668
 80031c8:	20000054 	.word	0x20000054

080031cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return uwTick;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_GetTick+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20002668 	.word	0x20002668

080031e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff ffee 	bl	80031cc <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d004      	beq.n	8003208 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_Delay+0x40>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003208:	bf00      	nop
 800320a:	f7ff ffdf 	bl	80031cc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	429a      	cmp	r2, r3
 8003218:	d8f7      	bhi.n	800320a <HAL_Delay+0x26>
  {
  }
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000054 	.word	0x20000054

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff4c 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033aa:	f7ff ff61 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	6978      	ldr	r0, [r7, #20]
 80033b6:	f7ff ffb1 	bl	800331c <NVIC_EncodePriority>
 80033ba:	4602      	mov	r2, r0
 80033bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff80 	bl	80032c8 <__NVIC_SetPriority>
}
 80033c8:	bf00      	nop
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff54 	bl	800328c <__NVIC_EnableIRQ>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d005      	beq.n	8003410 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2204      	movs	r2, #4
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	e029      	b.n	8003464 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 020e 	bic.w	r2, r2, #14
 800341e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f003 021c 	and.w	r2, r3, #28
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
    }
  }
  return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347e:	e17f      	b.n	8003780 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8171 	beq.w	800377a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d00b      	beq.n	80034b8 <HAL_GPIO_Init+0x48>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d007      	beq.n	80034b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ac:	2b11      	cmp	r3, #17
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b12      	cmp	r3, #18
 80034b6:	d130      	bne.n	800351a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ee:	2201      	movs	r2, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0201 	and.w	r2, r3, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d118      	bne.n	8003558 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800352c:	2201      	movs	r2, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	08db      	lsrs	r3, r3, #3
 8003542:	f003 0201 	and.w	r2, r3, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x128>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d123      	bne.n	80035e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	6939      	ldr	r1, [r7, #16]
 80035dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80ac 	beq.w	800377a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	4a5d      	ldr	r2, [pc, #372]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6613      	str	r3, [r2, #96]	; 0x60
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800363a:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <HAL_GPIO_Init+0x330>)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	3302      	adds	r3, #2
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	220f      	movs	r2, #15
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003664:	d025      	beq.n	80036b2 <HAL_GPIO_Init+0x242>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_GPIO_Init+0x334>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01f      	beq.n	80036ae <HAL_GPIO_Init+0x23e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_GPIO_Init+0x338>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d019      	beq.n	80036aa <HAL_GPIO_Init+0x23a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_GPIO_Init+0x33c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_GPIO_Init+0x236>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4b      	ldr	r2, [pc, #300]	; (80037b0 <HAL_GPIO_Init+0x340>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00d      	beq.n	80036a2 <HAL_GPIO_Init+0x232>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <HAL_GPIO_Init+0x344>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <HAL_GPIO_Init+0x348>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_GPIO_Init+0x22a>
 8003696:	2306      	movs	r3, #6
 8003698:	e00c      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 800369a:	2307      	movs	r3, #7
 800369c:	e00a      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 800369e:	2305      	movs	r3, #5
 80036a0:	e008      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036a2:	2304      	movs	r3, #4
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036a6:	2303      	movs	r3, #3
 80036a8:	e004      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_GPIO_Init+0x244>
 80036b2:	2300      	movs	r3, #0
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	f002 0203 	and.w	r2, r2, #3
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	4093      	lsls	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036c4:	4936      	ldr	r1, [pc, #216]	; (80037a0 <HAL_GPIO_Init+0x330>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_GPIO_Init+0x34c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f6:	4a31      	ldr	r2, [pc, #196]	; (80037bc <HAL_GPIO_Init+0x34c>)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_GPIO_Init+0x34c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_GPIO_Init+0x34c>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3301      	adds	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f47f ae78 	bne.w	8003480 <HAL_GPIO_Init+0x10>
  }
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010000 	.word	0x40010000
 80037a4:	48000400 	.word	0x48000400
 80037a8:	48000800 	.word	0x48000800
 80037ac:	48000c00 	.word	0x48000c00
 80037b0:	48001000 	.word	0x48001000
 80037b4:	48001400 	.word	0x48001400
 80037b8:	48001800 	.word	0x48001800
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
 80037cc:	4613      	mov	r3, r2
 80037ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d0:	787b      	ldrb	r3, [r7, #1]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037dc:	e002      	b.n	80037e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003808:	887a      	ldrh	r2, [r7, #2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800380e:	e002      	b.n	8003816 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003810:	887a      	ldrh	r2, [r7, #2]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	619a      	str	r2, [r3, #24]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e081      	b.n	8003938 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fa2b 	bl	8002ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2224      	movs	r2, #36	; 0x24
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003872:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003882:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	e006      	b.n	80038aa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d104      	bne.n	80038bc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	ea42 0103 	orr.w	r1, r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	021a      	lsls	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69d9      	ldr	r1, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b20      	cmp	r3, #32
 8003954:	d138      	bne.n	80039c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003960:	2302      	movs	r3, #2
 8003962:	e032      	b.n	80039ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d139      	bne.n	8003a60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e033      	b.n	8003a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2224      	movs	r2, #36	; 0x24
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40007000 	.word	0x40007000

08003a90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40007000 	.word	0x40007000

08003aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aba:	d130      	bne.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac8:	d038      	beq.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2232      	movs	r2, #50	; 0x32
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af0:	e002      	b.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d102      	bne.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f2      	bne.n	8003af2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b18:	d110      	bne.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d007      	beq.n	8003b3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	2000004c 	.word	0x2000004c
 8003b54:	431bde83 	.word	0x431bde83

08003b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e3d4      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6a:	4ba1      	ldr	r3, [pc, #644]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b74:	4b9e      	ldr	r3, [pc, #632]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80e4 	beq.w	8003d54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x4a>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	f040 808b 	bne.w	8003cb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 8087 	bne.w	8003cb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba2:	4b93      	ldr	r3, [pc, #588]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e3ac      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1a      	ldr	r2, [r3, #32]
 8003bbe:	4b8c      	ldr	r3, [pc, #560]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d004      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x7c>
 8003bca:	4b89      	ldr	r3, [pc, #548]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd2:	e005      	b.n	8003be0 <HAL_RCC_OscConfig+0x88>
 8003bd4:	4b86      	ldr	r3, [pc, #536]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d223      	bcs.n	8003c2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fd71 	bl	80046d0 <RCC_SetFlashLatencyFromMSIRange>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e38d      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf8:	4b7d      	ldr	r3, [pc, #500]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7c      	ldr	r2, [pc, #496]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003bfe:	f043 0308 	orr.w	r3, r3, #8
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4977      	ldr	r1, [pc, #476]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c16:	4b76      	ldr	r3, [pc, #472]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	4972      	ldr	r1, [pc, #456]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
 8003c2a:	e025      	b.n	8003c78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2c:	4b70      	ldr	r3, [pc, #448]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6f      	ldr	r2, [pc, #444]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c32:	f043 0308 	orr.w	r3, r3, #8
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	496a      	ldr	r1, [pc, #424]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c4a:	4b69      	ldr	r3, [pc, #420]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	4965      	ldr	r1, [pc, #404]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fd31 	bl	80046d0 <RCC_SetFlashLatencyFromMSIRange>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e34d      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c78:	f000 fc36 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	4a5a      	ldr	r2, [pc, #360]	; (8003df4 <HAL_RCC_OscConfig+0x29c>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa21 f303 	lsr.w	r3, r1, r3
 8003c94:	4a58      	ldr	r2, [pc, #352]	; (8003df8 <HAL_RCC_OscConfig+0x2a0>)
 8003c96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c98:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <HAL_RCC_OscConfig+0x2a4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff f949 	bl	8002f34 <HAL_InitTick>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d052      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	e331      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d032      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4c      	ldr	r2, [pc, #304]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc4:	f7ff fa82 	bl	80031cc <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ccc:	f7ff fa7e 	bl	80031cc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e31a      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	493b      	ldr	r1, [pc, #236]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	4936      	ldr	r1, [pc, #216]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e01a      	b.n	8003d54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d1e:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a33      	ldr	r2, [pc, #204]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d2a:	f7ff fa4f 	bl	80031cc <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d32:	f7ff fa4b 	bl	80031cc <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2e7      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d44:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x1da>
 8003d50:	e000      	b.n	8003d54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d074      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d005      	beq.n	8003d72 <HAL_RCC_OscConfig+0x21a>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d10e      	bne.n	8003d8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d064      	beq.n	8003e48 <HAL_RCC_OscConfig+0x2f0>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d160      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e2c4      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x24a>
 8003d94:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e01d      	b.n	8003dde <HAL_RCC_OscConfig+0x286>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x26e>
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e00b      	b.n	8003dde <HAL_RCC_OscConfig+0x286>
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7ff f9f1 	bl	80031cc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dec:	e011      	b.n	8003e12 <HAL_RCC_OscConfig+0x2ba>
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	0800c3e4 	.word	0x0800c3e4
 8003df8:	2000004c 	.word	0x2000004c
 8003dfc:	20000050 	.word	0x20000050
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7ff f9e4 	bl	80031cc <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e280      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e12:	4baf      	ldr	r3, [pc, #700]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x2a8>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7ff f9d4 	bl	80031cc <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e28:	f7ff f9d0 	bl	80031cc <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	; 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e26c      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e3a:	4ba5      	ldr	r3, [pc, #660]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x2d0>
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d060      	beq.n	8003f18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_OscConfig+0x310>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d116      	bne.n	8003e96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e68:	4b99      	ldr	r3, [pc, #612]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_OscConfig+0x328>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e249      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b93      	ldr	r3, [pc, #588]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	4990      	ldr	r1, [pc, #576]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e94:	e040      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d023      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9e:	4b8c      	ldr	r3, [pc, #560]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a8b      	ldr	r2, [pc, #556]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eaa:	f7ff f98f 	bl	80031cc <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb2:	f7ff f98b 	bl	80031cc <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e227      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec4:	4b82      	ldr	r3, [pc, #520]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4b7f      	ldr	r3, [pc, #508]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	497c      	ldr	r1, [pc, #496]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	e018      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee6:	4b7a      	ldr	r3, [pc, #488]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a79      	ldr	r2, [pc, #484]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7ff f96b 	bl	80031cc <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efa:	f7ff f967 	bl	80031cc <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e203      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f0c:	4b70      	ldr	r3, [pc, #448]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d03c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2c:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7ff f946 	bl	80031cc <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f44:	f7ff f942 	bl	80031cc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1de      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f56:	4b5e      	ldr	r3, [pc, #376]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <HAL_RCC_OscConfig+0x3ec>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f66:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6c:	4a58      	ldr	r2, [pc, #352]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7ff f929 	bl	80031cc <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7ff f925 	bl	80031cc <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1c1      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ef      	bne.n	8003f7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80a6 	beq.w	80040f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fac:	2300      	movs	r3, #0
 8003fae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fb0:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	4a43      	ldr	r2, [pc, #268]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc8:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_OscConfig+0x57c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d118      	bne.n	8004016 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_OscConfig+0x57c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3a      	ldr	r2, [pc, #232]	; (80040d4 <HAL_RCC_OscConfig+0x57c>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff0:	f7ff f8ec 	bl	80031cc <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7ff f8e8 	bl	80031cc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e184      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400a:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_RCC_OscConfig+0x57c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d108      	bne.n	8004030 <HAL_RCC_OscConfig+0x4d8>
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800402e:	e024      	b.n	800407a <HAL_RCC_OscConfig+0x522>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d110      	bne.n	800405a <HAL_RCC_OscConfig+0x502>
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004048:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004058:	e00f      	b.n	800407a <HAL_RCC_OscConfig+0x522>
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 8004072:	f023 0304 	bic.w	r3, r3, #4
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7ff f8a3 	bl	80031cc <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7ff f89f 	bl	80031cc <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e139      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_OscConfig+0x578>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ed      	beq.n	800408a <HAL_RCC_OscConfig+0x532>
 80040ae:	e01a      	b.n	80040e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7ff f88c 	bl	80031cc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7ff f888 	bl	80031cc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d906      	bls.n	80040d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e122      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d8:	4b90      	ldr	r3, [pc, #576]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e8      	bne.n	80040b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e6:	7ffb      	ldrb	r3, [r7, #31]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b8b      	ldr	r3, [pc, #556]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4a8a      	ldr	r2, [pc, #552]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8108 	beq.w	8004312 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	2b02      	cmp	r3, #2
 8004108:	f040 80d0 	bne.w	80042ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800410c:	4b83      	ldr	r3, [pc, #524]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 0203 	and.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d130      	bne.n	8004182 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	3b01      	subs	r3, #1
 800412c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d127      	bne.n	8004182 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800413e:	429a      	cmp	r2, r3
 8004140:	d11f      	bne.n	8004182 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800414c:	2a07      	cmp	r2, #7
 800414e:	bf14      	ite	ne
 8004150:	2201      	movne	r2, #1
 8004152:	2200      	moveq	r2, #0
 8004154:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004156:	4293      	cmp	r3, r2
 8004158:	d113      	bne.n	8004182 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d109      	bne.n	8004182 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	3b01      	subs	r3, #1
 800417c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d06e      	beq.n	8004260 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d069      	beq.n	800425c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004188:	4b64      	ldr	r3, [pc, #400]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004194:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0b7      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041a4:	4b5d      	ldr	r3, [pc, #372]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5c      	ldr	r2, [pc, #368]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80041aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b0:	f7ff f80c 	bl	80031cc <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b8:	f7ff f808 	bl	80031cc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0a4      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d6:	4b51      	ldr	r3, [pc, #324]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	4b51      	ldr	r3, [pc, #324]	; (8004320 <HAL_RCC_OscConfig+0x7c8>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041e6:	3a01      	subs	r2, #1
 80041e8:	0112      	lsls	r2, r2, #4
 80041ea:	4311      	orrs	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f0:	0212      	lsls	r2, r2, #8
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041f8:	0852      	lsrs	r2, r2, #1
 80041fa:	3a01      	subs	r2, #1
 80041fc:	0552      	lsls	r2, r2, #21
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004204:	0852      	lsrs	r2, r2, #1
 8004206:	3a01      	subs	r2, #1
 8004208:	0652      	lsls	r2, r2, #25
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004210:	0912      	lsrs	r2, r2, #4
 8004212:	0452      	lsls	r2, r2, #17
 8004214:	430a      	orrs	r2, r1
 8004216:	4941      	ldr	r1, [pc, #260]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a3e      	ldr	r2, [pc, #248]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004226:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004228:	4b3c      	ldr	r3, [pc, #240]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a3b      	ldr	r2, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800422e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004232:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004234:	f7fe ffca 	bl	80031cc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423c:	f7fe ffc6 	bl	80031cc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e062      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424e:	4b33      	ldr	r3, [pc, #204]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800425a:	e05a      	b.n	8004312 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e059      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004260:	4b2e      	ldr	r3, [pc, #184]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d152      	bne.n	8004312 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800426c:	4b2b      	ldr	r3, [pc, #172]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2a      	ldr	r2, [pc, #168]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004278:	4b28      	ldr	r3, [pc, #160]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a27      	ldr	r2, [pc, #156]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004282:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004284:	f7fe ffa2 	bl	80031cc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fe ff9e 	bl	80031cc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e03a      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429e:	4b1f      	ldr	r3, [pc, #124]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x734>
 80042aa:	e032      	b.n	8004312 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d02d      	beq.n	800430e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 80042dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fe ff71 	bl	80031cc <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe ff6d 	bl	80031cc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e009      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x7c4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x796>
 800430c:	e001      	b.n	8004312 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	f99d808c 	.word	0xf99d808c

08004324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0c8      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b66      	ldr	r3, [pc, #408]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d910      	bls.n	8004368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b63      	ldr	r3, [pc, #396]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 0207 	bic.w	r2, r3, #7
 800434e:	4961      	ldr	r1, [pc, #388]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b5f      	ldr	r3, [pc, #380]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0b0      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04c      	beq.n	800440e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d107      	bne.n	800438c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437c:	4b56      	ldr	r3, [pc, #344]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e09e      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d115      	bne.n	80043cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e092      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ac:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e086      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043bc:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e07e      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043cc:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f023 0203 	bic.w	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	493f      	ldr	r1, [pc, #252]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fe fef5 	bl	80031cc <HAL_GetTick>
 80043e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e6:	f7fe fef1 	bl	80031cc <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e066      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fc:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 020c 	and.w	r2, r3, #12
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	429a      	cmp	r2, r3
 800440c:	d1eb      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800441a:	4b2f      	ldr	r3, [pc, #188]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	492c      	ldr	r1, [pc, #176]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d210      	bcs.n	800445c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0207 	bic.w	r2, r3, #7
 8004442:	4924      	ldr	r1, [pc, #144]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_ClockConfig+0x1b0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e036      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4918      	ldr	r1, [pc, #96]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4910      	ldr	r1, [pc, #64]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800449a:	f000 f825 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 800449e:	4601      	mov	r1, r0
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCC_ClockConfig+0x1b4>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	5cd3      	ldrb	r3, [r2, r3]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	fa21 f303 	lsr.w	r3, r1, r3
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fd38 	bl	8002f34 <HAL_InitTick>
 80044c4:	4603      	mov	r3, r0
 80044c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80044c8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40022000 	.word	0x40022000
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800c3e4 	.word	0x0800c3e4
 80044e0:	2000004c 	.word	0x2000004c
 80044e4:	20000050 	.word	0x20000050

080044e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004500:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x34>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d121      	bne.n	800455a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d11e      	bne.n	800455a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800451c:	4b33      	ldr	r3, [pc, #204]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d107      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004528:	4b30      	ldr	r3, [pc, #192]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e005      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004538:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d102      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e004      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d101      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800456c:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800456e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0c      	cmp	r3, #12
 8004574:	d133      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d002      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0xa4>
 8004586:	2b03      	cmp	r3, #3
 8004588:	d003      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0xaa>
 800458a:	e005      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800458c:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800458e:	617b      	str	r3, [r7, #20]
      break;
 8004590:	e005      	b.n	800459e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004594:	617b      	str	r3, [r7, #20]
      break;
 8004596:	e002      	b.n	800459e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	617b      	str	r3, [r7, #20]
      break;
 800459c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	3301      	adds	r3, #1
 80045aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	fb02 f203 	mul.w	r2, r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_GetSysClockFreq+0x104>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0e5b      	lsrs	r3, r3, #25
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045de:	69bb      	ldr	r3, [r7, #24]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3724      	adds	r7, #36	; 0x24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40021000 	.word	0x40021000
 80045f0:	0800c3fc 	.word	0x0800c3fc
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	007a1200 	.word	0x007a1200

080045fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_GetHCLKFreq+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000004c 	.word	0x2000004c

08004614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004618:	f7ff fff0 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 800461c:	4601      	mov	r1, r0
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_RCC_GetPCLK1Freq+0x28>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	0800c3f4 	.word	0x0800c3f4

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004644:	f7ff ffda 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 8004648:	4601      	mov	r1, r0
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0adb      	lsrs	r3, r3, #11
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000
 8004668:	0800c3f4 	.word	0x0800c3f4

0800466c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	220f      	movs	r2, #15
 800467a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCC_GetClockConfig+0x60>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0207 	and.w	r2, r3, #7
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40022000 	.word	0x40022000

080046d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046e8:	f7ff f9d2 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 80046ec:	6178      	str	r0, [r7, #20]
 80046ee:	e014      	b.n	800471a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f0:	4b25      	ldr	r3, [pc, #148]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	4a24      	ldr	r2, [pc, #144]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fa:	6593      	str	r3, [r2, #88]	; 0x58
 80046fc:	4b22      	ldr	r3, [pc, #136]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004708:	f7ff f9c2 	bl	8003a90 <HAL_PWREx_GetVoltageRange>
 800470c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800470e:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d10b      	bne.n	800473a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d919      	bls.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2ba0      	cmp	r3, #160	; 0xa0
 800472c:	d902      	bls.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800472e:	2302      	movs	r3, #2
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	e013      	b.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004734:	2301      	movs	r3, #1
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	e010      	b.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b80      	cmp	r3, #128	; 0x80
 800473e:	d902      	bls.n	8004746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004740:	2303      	movs	r3, #3
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	e00a      	b.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d102      	bne.n	8004752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800474c:	2302      	movs	r3, #2
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e004      	b.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b70      	cmp	r3, #112	; 0x70
 8004756:	d101      	bne.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004758:	2301      	movs	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 0207 	bic.w	r2, r3, #7
 8004764:	4909      	ldr	r1, [pc, #36]	; (800478c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	429a      	cmp	r2, r3
 8004778:	d001      	beq.n	800477e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	40022000 	.word	0x40022000

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004798:	2300      	movs	r3, #0
 800479a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800479c:	2300      	movs	r3, #0
 800479e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d03f      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b4:	d01c      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d802      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80047c0:	e01f      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80047c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80047c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047cc:	d01c      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80047ce:	e018      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047d0:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a84      	ldr	r2, [pc, #528]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047dc:	e015      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3304      	adds	r3, #4
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fac9 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ee:	e00c      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3320      	adds	r3, #32
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fbb0 	bl	8004f5c <RCCEx_PLLSAI2_Config>
 80047fc:	4603      	mov	r3, r0
 80047fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004800:	e003      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	74fb      	strb	r3, [r7, #19]
      break;
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004810:	4b75      	ldr	r3, [pc, #468]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481e:	4972      	ldr	r1, [pc, #456]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004826:	e001      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d03f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800483c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004840:	d01c      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004842:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004846:	d802      	bhi.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00e      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800484c:	e01f      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800484e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004852:	d003      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004858:	d01c      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800485a:	e018      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800485c:	4b62      	ldr	r3, [pc, #392]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004866:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004868:	e015      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fa83 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800487a:	e00c      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3320      	adds	r3, #32
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fb6a 	bl	8004f5c <RCCEx_PLLSAI2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	74fb      	strb	r3, [r7, #19]
      break;
 8004892:	e000      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800489c:	4b52      	ldr	r3, [pc, #328]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048aa:	494f      	ldr	r1, [pc, #316]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048b2:	e001      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a0 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
 80048ec:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3a      	ldr	r2, [pc, #232]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004908:	f7fe fc60 	bl	80031cc <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800490e:	e009      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004910:	f7fe fc5c 	bl	80031cc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	74fb      	strb	r3, [r7, #19]
        break;
 8004922:	e005      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ef      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d15c      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004940:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01f      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	429a      	cmp	r2, r3
 8004952:	d019      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004960:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe fc1b 	bl	80031cc <HAL_GetTick>
 8004996:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004998:	e00b      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fe fc17 	bl	80031cc <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d902      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	74fb      	strb	r3, [r7, #19]
            break;
 80049b0:	e006      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ec      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c6:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d6:	4904      	ldr	r1, [pc, #16]	; (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049de:	e009      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	74bb      	strb	r3, [r7, #18]
 80049e4:	e006      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f4:	7c7b      	ldrb	r3, [r7, #17]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d105      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fa:	4b9e      	ldr	r3, [pc, #632]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	4a9d      	ldr	r2, [pc, #628]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a12:	4b98      	ldr	r3, [pc, #608]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f023 0203 	bic.w	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	4994      	ldr	r1, [pc, #592]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a34:	4b8f      	ldr	r3, [pc, #572]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 020c 	bic.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	498c      	ldr	r1, [pc, #560]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a56:	4b87      	ldr	r3, [pc, #540]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	4983      	ldr	r1, [pc, #524]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a78:	4b7e      	ldr	r3, [pc, #504]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	497b      	ldr	r1, [pc, #492]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9a:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa8:	4972      	ldr	r1, [pc, #456]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004abc:	4b6d      	ldr	r3, [pc, #436]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	496a      	ldr	r1, [pc, #424]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ade:	4b65      	ldr	r3, [pc, #404]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	4961      	ldr	r1, [pc, #388]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b00:	4b5c      	ldr	r3, [pc, #368]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	4959      	ldr	r1, [pc, #356]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	4950      	ldr	r1, [pc, #320]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b44:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	4948      	ldr	r1, [pc, #288]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b66:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	493f      	ldr	r1, [pc, #252]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d028      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b88:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b96:	4937      	ldr	r1, [pc, #220]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba8:	4b32      	ldr	r3, [pc, #200]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a31      	ldr	r2, [pc, #196]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb2:	60d3      	str	r3, [r2, #12]
 8004bb4:	e011      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bbe:	d10c      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f8d8 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d028      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004be6:	4b23      	ldr	r3, [pc, #140]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	491f      	ldr	r1, [pc, #124]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c10:	60d3      	str	r3, [r2, #12]
 8004c12:	e011      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2101      	movs	r1, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f8a9 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d02b      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c52:	4908      	ldr	r1, [pc, #32]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c62:	d109      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c64:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a02      	ldr	r2, [pc, #8]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c6e:	60d3      	str	r3, [r2, #12]
 8004c70:	e014      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004c72:	bf00      	nop
 8004c74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f877 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004c98:	7cfb      	ldrb	r3, [r7, #19]
 8004c9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb6:	4928      	ldr	r1, [pc, #160]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	2102      	movs	r1, #2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f854 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	74bb      	strb	r3, [r7, #18]
 8004ce2:	e011      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3320      	adds	r3, #32
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f931 	bl	8004f5c <RCCEx_PLLSAI2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d22:	490d      	ldr	r1, [pc, #52]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d46:	4904      	ldr	r1, [pc, #16]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000

08004d5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d66:	f043 0304 	orr.w	r3, r3, #4
 8004d6a:	6013      	str	r3, [r2, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000

08004d7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d8a:	4b73      	ldr	r3, [pc, #460]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d96:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0203 	and.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
       ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dae:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d044      	beq.n	8004e4c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e041      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d00c      	beq.n	8004dea <RCCEx_PLLSAI1_Config+0x6e>
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d013      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x80>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d120      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dd8:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11d      	bne.n	8004e20 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de8:	e01a      	b.n	8004e20 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dea:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfa:	e013      	b.n	8004e24 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dfc:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e08:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e18:	e006      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1e:	e004      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e20:	bf00      	nop
 8004e22:	e002      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e28:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e30:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	430b      	orrs	r3, r1
 8004e46:	4944      	ldr	r1, [pc, #272]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d17d      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e52:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a40      	ldr	r2, [pc, #256]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fe f9b5 	bl	80031cc <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e64:	e009      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e66:	f7fe f9b1 	bl	80031cc <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d902      	bls.n	8004e7a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	73fb      	strb	r3, [r7, #15]
        break;
 8004e78:	e005      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1ef      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d160      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d111      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6892      	ldr	r2, [r2, #8]
 8004ea2:	0211      	lsls	r1, r2, #8
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68d2      	ldr	r2, [r2, #12]
 8004ea8:	0912      	lsrs	r2, r2, #4
 8004eaa:	0452      	lsls	r2, r2, #17
 8004eac:	430a      	orrs	r2, r1
 8004eae:	492a      	ldr	r1, [pc, #168]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]
 8004eb4:	e027      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d112      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ebc:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6892      	ldr	r2, [r2, #8]
 8004ecc:	0211      	lsls	r1, r2, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6912      	ldr	r2, [r2, #16]
 8004ed2:	0852      	lsrs	r2, r2, #1
 8004ed4:	3a01      	subs	r2, #1
 8004ed6:	0552      	lsls	r2, r2, #21
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	491f      	ldr	r1, [pc, #124]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	610b      	str	r3, [r1, #16]
 8004ee0:	e011      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6892      	ldr	r2, [r2, #8]
 8004ef2:	0211      	lsls	r1, r2, #8
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6952      	ldr	r2, [r2, #20]
 8004ef8:	0852      	lsrs	r2, r2, #1
 8004efa:	3a01      	subs	r2, #1
 8004efc:	0652      	lsls	r2, r2, #25
 8004efe:	430a      	orrs	r2, r1
 8004f00:	4915      	ldr	r1, [pc, #84]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fe f95b 	bl	80031cc <HAL_GetTick>
 8004f16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f18:	e009      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f1a:	f7fe f957 	bl	80031cc <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d902      	bls.n	8004f2e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f2c:	e005      	b.n	8004f3a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ef      	beq.n	8004f1a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	4903      	ldr	r1, [pc, #12]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000

08004f5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6a:	4b68      	ldr	r3, [pc, #416]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d018      	beq.n	8004fa8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f76:	4b65      	ldr	r3, [pc, #404]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f003 0203 	and.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d10d      	bne.n	8004fa2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d044      	beq.n	800502c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e041      	b.n	800502c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d00c      	beq.n	8004fca <RCCEx_PLLSAI2_Config+0x6e>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d013      	beq.n	8004fdc <RCCEx_PLLSAI2_Config+0x80>
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d120      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fb8:	4b54      	ldr	r3, [pc, #336]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e01a      	b.n	8005000 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fca:	4b50      	ldr	r3, [pc, #320]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fda:	e013      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ff8:	e006      	b.n	8005008 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffe:	e004      	b.n	800500a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005000:	bf00      	nop
 8005002:	e002      	b.n	800500a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005004:	bf00      	nop
 8005006:	e000      	b.n	800500a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005008:	bf00      	nop
    }

    if(status == HAL_OK)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	3b01      	subs	r3, #1
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	430b      	orrs	r3, r1
 8005026:	4939      	ldr	r1, [pc, #228]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d167      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a35      	ldr	r2, [pc, #212]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fe f8c5 	bl	80031cc <HAL_GetTick>
 8005042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005044:	e009      	b.n	800505a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005046:	f7fe f8c1 	bl	80031cc <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d902      	bls.n	800505a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	73fb      	strb	r3, [r7, #15]
        break;
 8005058:	e005      	b.n	8005066 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1ef      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d14a      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d111      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800507a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6892      	ldr	r2, [r2, #8]
 8005082:	0211      	lsls	r1, r2, #8
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68d2      	ldr	r2, [r2, #12]
 8005088:	0912      	lsrs	r2, r2, #4
 800508a:	0452      	lsls	r2, r2, #17
 800508c:	430a      	orrs	r2, r1
 800508e:	491f      	ldr	r1, [pc, #124]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	614b      	str	r3, [r1, #20]
 8005094:	e011      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005096:	4b1d      	ldr	r3, [pc, #116]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800509e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6892      	ldr	r2, [r2, #8]
 80050a6:	0211      	lsls	r1, r2, #8
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6912      	ldr	r2, [r2, #16]
 80050ac:	0852      	lsrs	r2, r2, #1
 80050ae:	3a01      	subs	r2, #1
 80050b0:	0652      	lsls	r2, r2, #25
 80050b2:	430a      	orrs	r2, r1
 80050b4:	4915      	ldr	r1, [pc, #84]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050ba:	4b14      	ldr	r3, [pc, #80]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c6:	f7fe f881 	bl	80031cc <HAL_GetTick>
 80050ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050cc:	e009      	b.n	80050e2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050ce:	f7fe f87d 	bl	80031cc <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d902      	bls.n	80050e2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	73fb      	strb	r3, [r7, #15]
          break;
 80050e0:	e005      	b.n	80050ee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ef      	beq.n	80050ce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <RCCEx_PLLSAI2_Config+0x1b0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40021000 	.word	0x40021000

08005110 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e042      	b.n	80051a8 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	795b      	ldrb	r3, [r3, #5]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fd fe2a 	bl	8002d8c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0204 	orr.w	r2, r2, #4
 800514c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d104      	bne.n	8005166 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2204      	movs	r2, #4
 8005160:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e020      	b.n	80051a8 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005166:	f7fe f831 	bl	80031cc <HAL_GetTick>
 800516a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800516c:	e00e      	b.n	800518c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800516e:	f7fe f82d 	bl	80031cc <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d907      	bls.n	800518c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2204      	movs	r2, #4
 8005180:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e00d      	b.n	80051a8 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d0e9      	beq.n	800516e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	791b      	ldrb	r3, [r3, #4]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_RNG_GenerateRandomNumber+0x1a>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e03d      	b.n	8005246 <HAL_RNG_GenerateRandomNumber+0x96>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	795b      	ldrb	r3, [r3, #5]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d12c      	bne.n	8005234 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051e0:	f7fd fff4 	bl	80031cc <HAL_GetTick>
 80051e4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80051e6:	e011      	b.n	800520c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80051e8:	f7fd fff0 	bl	80031cc <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d90a      	bls.n	800520c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e01c      	b.n	8005246 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b01      	cmp	r3, #1
 8005218:	d1e6      	bne.n	80051e8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	715a      	strb	r2, [r3, #5]
 8005232:	e004      	b.n	800523e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2204      	movs	r2, #4
 8005238:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	711a      	strb	r2, [r3, #4]

  return status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e07c      	b.n	800535a <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fd fda6 	bl	8002dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a0:	d902      	bls.n	80052a8 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e002      	b.n	80052ae <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052b6:	d007      	beq.n	80052c8 <HAL_SPI_Init+0x7a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d8:	d903      	bls.n	80052e2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
 80052e0:	e002      	b.n	80052e8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	ea42 0103 	orr.w	r1, r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 0204 	and.w	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	ea42 0103 	orr.w	r1, r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005370:	b2db      	uxtb	r3, r3
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e01d      	b.n	80053cc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f815 	bl	80053d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f000 fb73 	bl	8005aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <HAL_TIM_Base_Start_IT+0x50>)
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b06      	cmp	r3, #6
 8005410:	d00b      	beq.n	800542a <HAL_TIM_Base_Start_IT+0x42>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d007      	beq.n	800542a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	00010007 	.word	0x00010007

0800543c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e01d      	b.n	800548a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fd fcf6 	bl	8002e54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 fb14 	bl	8005aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d841      	bhi.n	8005528 <HAL_TIM_OC_Start_IT+0x94>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <HAL_TIM_OC_Start_IT+0x18>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054e1 	.word	0x080054e1
 80054b0:	08005529 	.word	0x08005529
 80054b4:	08005529 	.word	0x08005529
 80054b8:	08005529 	.word	0x08005529
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	08005529 	.word	0x08005529
 80054c4:	08005529 	.word	0x08005529
 80054c8:	08005529 	.word	0x08005529
 80054cc:	08005505 	.word	0x08005505
 80054d0:	08005529 	.word	0x08005529
 80054d4:	08005529 	.word	0x08005529
 80054d8:	08005529 	.word	0x08005529
 80054dc:	08005517 	.word	0x08005517
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0202 	orr.w	r2, r2, #2
 80054ee:	60da      	str	r2, [r3, #12]
      break;
 80054f0:	e01b      	b.n	800552a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0204 	orr.w	r2, r2, #4
 8005500:	60da      	str	r2, [r3, #12]
      break;
 8005502:	e012      	b.n	800552a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	60da      	str	r2, [r3, #12]
      break;
 8005514:	e009      	b.n	800552a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0210 	orr.w	r2, r2, #16
 8005524:	60da      	str	r2, [r3, #12]
      break;
 8005526:	e000      	b.n	800552a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005528:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fe28 	bl	8006188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_TIM_OC_Start_IT+0x124>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIM_OC_Start_IT+0xd6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1d      	ldr	r2, [pc, #116]	; (80055bc <HAL_TIM_OC_Start_IT+0x128>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIM_OC_Start_IT+0xd6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_TIM_OC_Start_IT+0x12c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_OC_Start_IT+0xd6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1a      	ldr	r2, [pc, #104]	; (80055c4 <HAL_TIM_OC_Start_IT+0x130>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_OC_Start_IT+0xd6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_TIM_OC_Start_IT+0x134>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d101      	bne.n	800556e <HAL_TIM_OC_Start_IT+0xda>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_TIM_OC_Start_IT+0xdc>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005582:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <HAL_TIM_OC_Start_IT+0x138>)
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b06      	cmp	r3, #6
 8005594:	d00b      	beq.n	80055ae <HAL_TIM_OC_Start_IT+0x11a>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d007      	beq.n	80055ae <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40013400 	.word	0x40013400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800
 80055cc:	00010007 	.word	0x00010007

080055d0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d841      	bhi.n	8005664 <HAL_TIM_OC_Stop_IT+0x94>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_TIM_OC_Stop_IT+0x18>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	08005665 	.word	0x08005665
 80055f0:	08005665 	.word	0x08005665
 80055f4:	08005665 	.word	0x08005665
 80055f8:	0800562f 	.word	0x0800562f
 80055fc:	08005665 	.word	0x08005665
 8005600:	08005665 	.word	0x08005665
 8005604:	08005665 	.word	0x08005665
 8005608:	08005641 	.word	0x08005641
 800560c:	08005665 	.word	0x08005665
 8005610:	08005665 	.word	0x08005665
 8005614:	08005665 	.word	0x08005665
 8005618:	08005653 	.word	0x08005653
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0202 	bic.w	r2, r2, #2
 800562a:	60da      	str	r2, [r3, #12]
      break;
 800562c:	e01b      	b.n	8005666 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0204 	bic.w	r2, r2, #4
 800563c:	60da      	str	r2, [r3, #12]
      break;
 800563e:	e012      	b.n	8005666 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0208 	bic.w	r2, r2, #8
 800564e:	60da      	str	r2, [r3, #12]
      break;
 8005650:	e009      	b.n	8005666 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0210 	bic.w	r2, r2, #16
 8005660:	60da      	str	r2, [r3, #12]
      break;
 8005662:	e000      	b.n	8005666 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8005664:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fd8a 	bl	8006188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_TIM_OC_Stop_IT+0x14c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_TIM_OC_Stop_IT+0xd6>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a27      	ldr	r2, [pc, #156]	; (8005720 <HAL_TIM_OC_Stop_IT+0x150>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_TIM_OC_Stop_IT+0xd6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_TIM_OC_Stop_IT+0x154>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_TIM_OC_Stop_IT+0xd6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a24      	ldr	r2, [pc, #144]	; (8005728 <HAL_TIM_OC_Stop_IT+0x158>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_TIM_OC_Stop_IT+0xd6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <HAL_TIM_OC_Stop_IT+0x15c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_OC_Stop_IT+0xda>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_TIM_OC_Stop_IT+0xdc>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d017      	beq.n	80056e0 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10f      	bne.n	80056e0 <HAL_TIM_OC_Stop_IT+0x110>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	f240 4344 	movw	r3, #1092	; 0x444
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <HAL_TIM_OC_Stop_IT+0x110>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a1a      	ldr	r2, [r3, #32]
 80056e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10f      	bne.n	8005710 <HAL_TIM_OC_Stop_IT+0x140>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a1a      	ldr	r2, [r3, #32]
 80056f6:	f240 4344 	movw	r3, #1092	; 0x444
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_OC_Stop_IT+0x140>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40013400 	.word	0x40013400
 8005724:	40014000 	.word	0x40014000
 8005728:	40014400 	.word	0x40014400
 800572c:	40014800 	.word	0x40014800

08005730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d122      	bne.n	800578c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b02      	cmp	r3, #2
 8005752:	d11b      	bne.n	800578c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0202 	mvn.w	r2, #2
 800575c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f97a 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 8005778:	e005      	b.n	8005786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fd f812 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f97d 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d122      	bne.n	80057e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d11b      	bne.n	80057e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0204 	mvn.w	r2, #4
 80057b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f950 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 80057cc:	e005      	b.n	80057da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fc ffe8 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f953 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d122      	bne.n	8005834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d11b      	bne.n	8005834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0208 	mvn.w	r2, #8
 8005804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2204      	movs	r2, #4
 800580a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f926 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 8005820:	e005      	b.n	800582e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fc ffbe 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f929 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b10      	cmp	r3, #16
 8005840:	d122      	bne.n	8005888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b10      	cmp	r3, #16
 800584e:	d11b      	bne.n	8005888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0210 	mvn.w	r2, #16
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2208      	movs	r2, #8
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8fc 	bl	8005a6c <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc ff94 	bl	80027a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8ff 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b01      	cmp	r3, #1
 8005894:	d10e      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d107      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f06f 0201 	mvn.w	r2, #1
 80058ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fd f838 	bl	8002924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b80      	cmp	r3, #128	; 0x80
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fd0c 	bl	80062f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ee:	d10e      	bne.n	800590e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b80      	cmp	r3, #128	; 0x80
 80058fc:	d107      	bne.n	800590e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fcff 	bl	800630c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d10e      	bne.n	800593a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d107      	bne.n	800593a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8ad 	bl	8005a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b20      	cmp	r3, #32
 8005946:	d10e      	bne.n	8005966 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b20      	cmp	r3, #32
 8005954:	d107      	bne.n	8005966 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f06f 0220 	mvn.w	r2, #32
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fcbf 	bl	80062e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e06c      	b.n	8005a64 <HAL_TIM_OC_ConfigChannel+0xf4>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b14      	cmp	r3, #20
 800599e:	d857      	bhi.n	8005a50 <HAL_TIM_OC_ConfigChannel+0xe0>
 80059a0:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	080059fd 	.word	0x080059fd
 80059ac:	08005a51 	.word	0x08005a51
 80059b0:	08005a51 	.word	0x08005a51
 80059b4:	08005a51 	.word	0x08005a51
 80059b8:	08005a0b 	.word	0x08005a0b
 80059bc:	08005a51 	.word	0x08005a51
 80059c0:	08005a51 	.word	0x08005a51
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a51 	.word	0x08005a51
 80059d0:	08005a51 	.word	0x08005a51
 80059d4:	08005a51 	.word	0x08005a51
 80059d8:	08005a27 	.word	0x08005a27
 80059dc:	08005a51 	.word	0x08005a51
 80059e0:	08005a51 	.word	0x08005a51
 80059e4:	08005a51 	.word	0x08005a51
 80059e8:	08005a35 	.word	0x08005a35
 80059ec:	08005a51 	.word	0x08005a51
 80059f0:	08005a51 	.word	0x08005a51
 80059f4:	08005a51 	.word	0x08005a51
 80059f8:	08005a43 	.word	0x08005a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f8ea 	bl	8005bdc <TIM_OC1_SetConfig>
      break;
 8005a08:	e023      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 f973 	bl	8005cfc <TIM_OC2_SetConfig>
      break;
 8005a16:	e01c      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f9f6 	bl	8005e10 <TIM_OC3_SetConfig>
      break;
 8005a24:	e015      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fa77 	bl	8005f20 <TIM_OC4_SetConfig>
      break;
 8005a32:	e00e      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fada 	bl	8005ff4 <TIM_OC5_SetConfig>
      break;
 8005a40:	e007      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fb37 	bl	80060bc <TIM_OC6_SetConfig>
      break;
 8005a4e:	e000      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8005a50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a40      	ldr	r2, [pc, #256]	; (8005bbc <TIM_Base_SetConfig+0x114>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a3d      	ldr	r2, [pc, #244]	; (8005bc0 <TIM_Base_SetConfig+0x118>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3c      	ldr	r2, [pc, #240]	; (8005bc4 <TIM_Base_SetConfig+0x11c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3b      	ldr	r2, [pc, #236]	; (8005bc8 <TIM_Base_SetConfig+0x120>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3a      	ldr	r2, [pc, #232]	; (8005bcc <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d108      	bne.n	8005afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2f      	ldr	r2, [pc, #188]	; (8005bbc <TIM_Base_SetConfig+0x114>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01f      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d01b      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2c      	ldr	r2, [pc, #176]	; (8005bc0 <TIM_Base_SetConfig+0x118>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d017      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2b      	ldr	r2, [pc, #172]	; (8005bc4 <TIM_Base_SetConfig+0x11c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <TIM_Base_SetConfig+0x120>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00f      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <TIM_Base_SetConfig+0x124>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a28      	ldr	r2, [pc, #160]	; (8005bd0 <TIM_Base_SetConfig+0x128>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <TIM_Base_SetConfig+0x12c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <TIM_Base_SetConfig+0x130>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d108      	bne.n	8005b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <TIM_Base_SetConfig+0x114>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_Base_SetConfig+0xf8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_Base_SetConfig+0x124>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_Base_SetConfig+0xf8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_Base_SetConfig+0x128>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <TIM_Base_SetConfig+0x12c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_Base_SetConfig+0xf8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <TIM_Base_SetConfig+0x130>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d103      	bne.n	8005ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	615a      	str	r2, [r3, #20]
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0302 	bic.w	r3, r3, #2
 8005c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <TIM_OC1_SetConfig+0x10c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00f      	beq.n	8005c5c <TIM_OC1_SetConfig+0x80>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <TIM_OC1_SetConfig+0x110>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <TIM_OC1_SetConfig+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <TIM_OC1_SetConfig+0x114>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <TIM_OC1_SetConfig+0x80>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <TIM_OC1_SetConfig+0x118>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC1_SetConfig+0x80>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <TIM_OC1_SetConfig+0x11c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10c      	bne.n	8005c76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0308 	bic.w	r3, r3, #8
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <TIM_OC1_SetConfig+0x10c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00f      	beq.n	8005c9e <TIM_OC1_SetConfig+0xc2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <TIM_OC1_SetConfig+0x110>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <TIM_OC1_SetConfig+0xc2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <TIM_OC1_SetConfig+0x114>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <TIM_OC1_SetConfig+0xc2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <TIM_OC1_SetConfig+0x118>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC1_SetConfig+0xc2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <TIM_OC1_SetConfig+0x11c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d111      	bne.n	8005cc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	621a      	str	r2, [r3, #32]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40013400 	.word	0x40013400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40014400 	.word	0x40014400
 8005cf8:	40014800 	.word	0x40014800

08005cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <TIM_OC2_SetConfig+0x100>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC2_SetConfig+0x6c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <TIM_OC2_SetConfig+0x104>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10d      	bne.n	8005d84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <TIM_OC2_SetConfig+0x100>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00f      	beq.n	8005dac <TIM_OC2_SetConfig+0xb0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <TIM_OC2_SetConfig+0x104>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_OC2_SetConfig+0xb0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1b      	ldr	r2, [pc, #108]	; (8005e04 <TIM_OC2_SetConfig+0x108>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_OC2_SetConfig+0xb0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <TIM_OC2_SetConfig+0x10c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC2_SetConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a19      	ldr	r2, [pc, #100]	; (8005e0c <TIM_OC2_SetConfig+0x110>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d113      	bne.n	8005dd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800

08005e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <TIM_OC3_SetConfig+0xfc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC3_SetConfig+0x6a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <TIM_OC3_SetConfig+0x100>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10d      	bne.n	8005e96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <TIM_OC3_SetConfig+0xfc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00f      	beq.n	8005ebe <TIM_OC3_SetConfig+0xae>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <TIM_OC3_SetConfig+0x100>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_OC3_SetConfig+0xae>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <TIM_OC3_SetConfig+0x104>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <TIM_OC3_SetConfig+0xae>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <TIM_OC3_SetConfig+0x108>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_OC3_SetConfig+0xae>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <TIM_OC3_SetConfig+0x10c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d113      	bne.n	8005ee6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	621a      	str	r2, [r3, #32]
}
 8005f00:	bf00      	nop
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40013400 	.word	0x40013400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40014400 	.word	0x40014400
 8005f1c:	40014800 	.word	0x40014800

08005f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	031b      	lsls	r3, r3, #12
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <TIM_OC4_SetConfig+0xc0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00f      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x84>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <TIM_OC4_SetConfig+0xc4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00b      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x84>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <TIM_OC4_SetConfig+0xc8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d007      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x84>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <TIM_OC4_SetConfig+0xcc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x84>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <TIM_OC4_SetConfig+0xd0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d109      	bne.n	8005fb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	019b      	lsls	r3, r3, #6
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800

08005ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <TIM_OC5_SetConfig+0xb4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00f      	beq.n	800606e <TIM_OC5_SetConfig+0x7a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <TIM_OC5_SetConfig+0xb8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_OC5_SetConfig+0x7a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <TIM_OC5_SetConfig+0xbc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d007      	beq.n	800606e <TIM_OC5_SetConfig+0x7a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <TIM_OC5_SetConfig+0xc0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC5_SetConfig+0x7a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <TIM_OC5_SetConfig+0xc4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d109      	bne.n	8006082 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <TIM_OC6_SetConfig+0xb8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00f      	beq.n	8006138 <TIM_OC6_SetConfig+0x7c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <TIM_OC6_SetConfig+0xbc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <TIM_OC6_SetConfig+0x7c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a16      	ldr	r2, [pc, #88]	; (800617c <TIM_OC6_SetConfig+0xc0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_OC6_SetConfig+0x7c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <TIM_OC6_SetConfig+0xc4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC6_SetConfig+0x7c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a14      	ldr	r2, [pc, #80]	; (8006184 <TIM_OC6_SetConfig+0xc8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d109      	bne.n	800614c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800613e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	029b      	lsls	r3, r3, #10
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40012c00 	.word	0x40012c00
 8006178:	40013400 	.word	0x40013400
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2201      	movs	r2, #1
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	43db      	mvns	r3, r3
 80061aa:	401a      	ands	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	fa01 f303 	lsl.w	r3, r1, r3
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e068      	b.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2e      	ldr	r2, [pc, #184]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2d      	ldr	r2, [pc, #180]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d108      	bne.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1e      	ldr	r2, [pc, #120]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01d      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625e:	d018      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a18      	ldr	r2, [pc, #96]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10c      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40014000 	.word	0x40014000

080062e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e040      	b.n	80063b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fc fdaa 	bl	8002e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fabc 	bl	80068dc <UART_SetConfig>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e022      	b.n	80063b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fe22 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800638a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800639a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fea9 	bl	8007104 <UART_CheckIdleState>
 80063b2:	4603      	mov	r3, r0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	f040 8081 	bne.w	80064d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_Transmit+0x26>
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e079      	b.n	80064da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Transmit+0x38>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e072      	b.n	80064da <HAL_UART_Transmit+0x11e>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006408:	f7fc fee0 	bl	80031cc <HAL_GetTick>
 800640c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006426:	d108      	bne.n	800643a <HAL_UART_Transmit+0x7e>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e003      	b.n	8006442 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800644a:	e02d      	b.n	80064a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2200      	movs	r2, #0
 8006454:	2180      	movs	r1, #128	; 0x80
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fe99 	bl	800718e <UART_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e039      	b.n	80064da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006478:	b292      	uxth	r2, r2
 800647a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	3302      	adds	r3, #2
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e008      	b.n	8006496 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	b292      	uxth	r2, r2
 800648e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3301      	adds	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1cb      	bne.n	800644c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fe65 	bl	800718e <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e005      	b.n	80064da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80064d8:	2302      	movs	r3, #2
  }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	f040 808a 	bne.w	8006610 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_UART_Receive_IT+0x24>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e082      	b.n	8006612 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UART_Receive_IT+0x36>
 8006516:	2302      	movs	r3, #2
 8006518:	e07b      	b.n	8006612 <HAL_UART_Receive_IT+0x12e>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	88fa      	ldrh	r2, [r7, #6]
 800652c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006546:	d10e      	bne.n	8006566 <HAL_UART_Receive_IT+0x82>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d105      	bne.n	800655c <HAL_UART_Receive_IT+0x78>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800655a:	e02d      	b.n	80065b8 <HAL_UART_Receive_IT+0xd4>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	22ff      	movs	r2, #255	; 0xff
 8006560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006564:	e028      	b.n	80065b8 <HAL_UART_Receive_IT+0xd4>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <HAL_UART_Receive_IT+0xa6>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_UART_Receive_IT+0x9c>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	22ff      	movs	r2, #255	; 0xff
 800657a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800657e:	e01b      	b.n	80065b8 <HAL_UART_Receive_IT+0xd4>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	227f      	movs	r2, #127	; 0x7f
 8006584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006588:	e016      	b.n	80065b8 <HAL_UART_Receive_IT+0xd4>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006592:	d10d      	bne.n	80065b0 <HAL_UART_Receive_IT+0xcc>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <HAL_UART_Receive_IT+0xc2>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	227f      	movs	r2, #127	; 0x7f
 80065a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065a4:	e008      	b.n	80065b8 <HAL_UART_Receive_IT+0xd4>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	223f      	movs	r2, #63	; 0x3f
 80065aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ae:	e003      	b.n	80065b8 <HAL_UART_Receive_IT+0xd4>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2222      	movs	r2, #34	; 0x22
 80065c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d107      	bne.n	80065ee <HAL_UART_Receive_IT+0x10a>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a0d      	ldr	r2, [pc, #52]	; (8006620 <HAL_UART_Receive_IT+0x13c>)
 80065ea:	661a      	str	r2, [r3, #96]	; 0x60
 80065ec:	e002      	b.n	80065f4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a0c      	ldr	r2, [pc, #48]	; (8006624 <HAL_UART_Receive_IT+0x140>)
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800660a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	e000      	b.n	8006612 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006610:	2302      	movs	r3, #2
  }
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	080073cd 	.word	0x080073cd
 8006624:	08007323 	.word	0x08007323

08006628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	f640 030f 	movw	r3, #2063	; 0x80f
 800664e:	4013      	ands	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d113      	bne.n	8006680 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8114 	beq.w	800689e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
      }
      return;
 800667e:	e10e      	b.n	800689e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80d6 	beq.w	8006834 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d105      	bne.n	800669e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80cb 	beq.w	8006834 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00e      	beq.n	80066c6 <HAL_UART_IRQHandler+0x9e>
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066be:	f043 0201 	orr.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00e      	beq.n	80066ee <HAL_UART_IRQHandler+0xc6>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2202      	movs	r2, #2
 80066e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e6:	f043 0204 	orr.w	r2, r3, #4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <HAL_UART_IRQHandler+0xee>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2204      	movs	r2, #4
 8006708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800670e:	f043 0202 	orr.w	r2, r3, #2
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2208      	movs	r2, #8
 800673a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006740:	f043 0208 	orr.w	r2, r3, #8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00f      	beq.n	8006772 <HAL_UART_IRQHandler+0x14a>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800676a:	f043 0220 	orr.w	r2, r3, #32
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8093 	beq.w	80068a2 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00c      	beq.n	80067a0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d004      	beq.n	80067be <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d031      	beq.n	8006822 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fd60 	bl	8007284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d123      	bne.n	800681a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d013      	beq.n	8006812 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ee:	4a30      	ldr	r2, [pc, #192]	; (80068b0 <HAL_UART_IRQHandler+0x288>)
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fc fdf8 	bl	80033ec <HAL_DMA_Abort_IT>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d016      	beq.n	8006830 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800680c:	4610      	mov	r0, r2
 800680e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	e00e      	b.n	8006830 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f858 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e00a      	b.n	8006830 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f854 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	e006      	b.n	8006830 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f850 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800682e:	e038      	b.n	80068a2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	bf00      	nop
    return;
 8006832:	e036      	b.n	80068a2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <HAL_UART_IRQHandler+0x232>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fe0f 	bl	8007476 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006858:	e026      	b.n	80068a8 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d008      	beq.n	8006880 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006872:	2b00      	cmp	r3, #0
 8006874:	d017      	beq.n	80068a6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
    }
    return;
 800687e:	e012      	b.n	80068a6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <HAL_UART_IRQHandler+0x280>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fd2b 	bl	80072f0 <UART_EndTransmit_IT>
    return;
 800689a:	bf00      	nop
 800689c:	e004      	b.n	80068a8 <HAL_UART_IRQHandler+0x280>
      return;
 800689e:	bf00      	nop
 80068a0:	e002      	b.n	80068a8 <HAL_UART_IRQHandler+0x280>
    return;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <HAL_UART_IRQHandler+0x280>
    return;
 80068a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	080072c5 	.word	0x080072c5

080068b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80068e0:	b08a      	sub	sp, #40	; 0x28
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4313      	orrs	r3, r2
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4bb8      	ldr	r3, [pc, #736]	; (8006bf4 <UART_SetConfig+0x318>)
 8006912:	4013      	ands	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800691a:	430b      	orrs	r3, r1
 800691c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4aae      	ldr	r2, [pc, #696]	; (8006bf8 <UART_SetConfig+0x31c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	4313      	orrs	r3, r2
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4aa5      	ldr	r2, [pc, #660]	; (8006bfc <UART_SetConfig+0x320>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d126      	bne.n	80069ba <UART_SetConfig+0xde>
 800696c:	4ba4      	ldr	r3, [pc, #656]	; (8006c00 <UART_SetConfig+0x324>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d81a      	bhi.n	80069b0 <UART_SetConfig+0xd4>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0xa4>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	080069a1 	.word	0x080069a1
 8006988:	08006999 	.word	0x08006999
 800698c:	080069a9 	.word	0x080069a9
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006996:	e105      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006998:	2302      	movs	r3, #2
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e101      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e0fd      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ae:	e0f9      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	bf00      	nop
 80069b8:	e0f4      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a91      	ldr	r2, [pc, #580]	; (8006c04 <UART_SetConfig+0x328>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d138      	bne.n	8006a36 <UART_SetConfig+0x15a>
 80069c4:	4b8e      	ldr	r3, [pc, #568]	; (8006c00 <UART_SetConfig+0x324>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f003 030c 	and.w	r3, r3, #12
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d82c      	bhi.n	8006a2c <UART_SetConfig+0x150>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0xfc>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006a2d 	.word	0x08006a2d
 80069e0:	08006a2d 	.word	0x08006a2d
 80069e4:	08006a2d 	.word	0x08006a2d
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a2d 	.word	0x08006a2d
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a12:	e0c7      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a14:	2302      	movs	r3, #2
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1a:	e0c3      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a22:	e0bf      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a24:	2308      	movs	r3, #8
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2a:	e0bb      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a32:	bf00      	nop
 8006a34:	e0b6      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a73      	ldr	r2, [pc, #460]	; (8006c08 <UART_SetConfig+0x32c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d125      	bne.n	8006a8c <UART_SetConfig+0x1b0>
 8006a40:	4b6f      	ldr	r3, [pc, #444]	; (8006c00 <UART_SetConfig+0x324>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d011      	beq.n	8006a72 <UART_SetConfig+0x196>
 8006a4e:	2b10      	cmp	r3, #16
 8006a50:	d802      	bhi.n	8006a58 <UART_SetConfig+0x17c>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <UART_SetConfig+0x186>
 8006a56:	e014      	b.n	8006a82 <UART_SetConfig+0x1a6>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d006      	beq.n	8006a6a <UART_SetConfig+0x18e>
 8006a5c:	2b30      	cmp	r3, #48	; 0x30
 8006a5e:	d00c      	beq.n	8006a7a <UART_SetConfig+0x19e>
 8006a60:	e00f      	b.n	8006a82 <UART_SetConfig+0x1a6>
 8006a62:	2300      	movs	r3, #0
 8006a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a68:	e09c      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a70:	e098      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a72:	2304      	movs	r3, #4
 8006a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a78:	e094      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a80:	e090      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a82:	2310      	movs	r3, #16
 8006a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a88:	bf00      	nop
 8006a8a:	e08b      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5e      	ldr	r2, [pc, #376]	; (8006c0c <UART_SetConfig+0x330>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d125      	bne.n	8006ae2 <UART_SetConfig+0x206>
 8006a96:	4b5a      	ldr	r3, [pc, #360]	; (8006c00 <UART_SetConfig+0x324>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	d011      	beq.n	8006ac8 <UART_SetConfig+0x1ec>
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d802      	bhi.n	8006aae <UART_SetConfig+0x1d2>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <UART_SetConfig+0x1dc>
 8006aac:	e014      	b.n	8006ad8 <UART_SetConfig+0x1fc>
 8006aae:	2b80      	cmp	r3, #128	; 0x80
 8006ab0:	d006      	beq.n	8006ac0 <UART_SetConfig+0x1e4>
 8006ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab4:	d00c      	beq.n	8006ad0 <UART_SetConfig+0x1f4>
 8006ab6:	e00f      	b.n	8006ad8 <UART_SetConfig+0x1fc>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abe:	e071      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e06d      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ace:	e069      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e065      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	bf00      	nop
 8006ae0:	e060      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a4a      	ldr	r2, [pc, #296]	; (8006c10 <UART_SetConfig+0x334>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d129      	bne.n	8006b40 <UART_SetConfig+0x264>
 8006aec:	4b44      	ldr	r3, [pc, #272]	; (8006c00 <UART_SetConfig+0x324>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afa:	d014      	beq.n	8006b26 <UART_SetConfig+0x24a>
 8006afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b00:	d802      	bhi.n	8006b08 <UART_SetConfig+0x22c>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <UART_SetConfig+0x23a>
 8006b06:	e016      	b.n	8006b36 <UART_SetConfig+0x25a>
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0c:	d007      	beq.n	8006b1e <UART_SetConfig+0x242>
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b12:	d00c      	beq.n	8006b2e <UART_SetConfig+0x252>
 8006b14:	e00f      	b.n	8006b36 <UART_SetConfig+0x25a>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1c:	e042      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b24:	e03e      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b26:	2304      	movs	r3, #4
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2c:	e03a      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b2e:	2308      	movs	r3, #8
 8006b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b34:	e036      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b36:	2310      	movs	r3, #16
 8006b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3c:	bf00      	nop
 8006b3e:	e031      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <UART_SetConfig+0x31c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d129      	bne.n	8006b9e <UART_SetConfig+0x2c2>
 8006b4a:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <UART_SetConfig+0x324>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d014      	beq.n	8006b84 <UART_SetConfig+0x2a8>
 8006b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5e:	d802      	bhi.n	8006b66 <UART_SetConfig+0x28a>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <UART_SetConfig+0x298>
 8006b64:	e016      	b.n	8006b94 <UART_SetConfig+0x2b8>
 8006b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6a:	d007      	beq.n	8006b7c <UART_SetConfig+0x2a0>
 8006b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b70:	d00c      	beq.n	8006b8c <UART_SetConfig+0x2b0>
 8006b72:	e00f      	b.n	8006b94 <UART_SetConfig+0x2b8>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e013      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e00f      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e00b      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e007      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <UART_SetConfig+0x2c8>
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <UART_SetConfig+0x31c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	f040 80fe 	bne.w	8006dac <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d837      	bhi.n	8006c28 <UART_SetConfig+0x34c>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <UART_SetConfig+0x2e4>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006c29 	.word	0x08006c29
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006c29 	.word	0x08006c29
 8006bd0:	08006c19 	.word	0x08006c19
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006c29 	.word	0x08006c29
 8006bdc:	08006c29 	.word	0x08006c29
 8006be0:	08006c21 	.word	0x08006c21
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006be4:	f7fd fd16 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8006be8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bea:	e020      	b.n	8006c2e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <UART_SetConfig+0x338>)
 8006bee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bf0:	e01d      	b.n	8006c2e <UART_SetConfig+0x352>
 8006bf2:	bf00      	nop
 8006bf4:	efff69f3 	.word	0xefff69f3
 8006bf8:	40008000 	.word	0x40008000
 8006bfc:	40013800 	.word	0x40013800
 8006c00:	40021000 	.word	0x40021000
 8006c04:	40004400 	.word	0x40004400
 8006c08:	40004800 	.word	0x40004800
 8006c0c:	40004c00 	.word	0x40004c00
 8006c10:	40005000 	.word	0x40005000
 8006c14:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006c18:	f7fd fc66 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8006c1c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c1e:	e006      	b.n	8006c2e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c26:	e002      	b.n	8006c2e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	76fb      	strb	r3, [r7, #27]
        break;
 8006c2c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 81b9 	beq.w	8006fa8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	4413      	add	r3, r2
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d305      	bcc.n	8006c52 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d902      	bls.n	8006c58 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	76fb      	strb	r3, [r7, #27]
 8006c56:	e1a7      	b.n	8006fa8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8006c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	f200 8092 	bhi.w	8006d86 <UART_SetConfig+0x4aa>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0x38c>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006d87 	.word	0x08006d87
 8006c70:	08006cdb 	.word	0x08006cdb
 8006c74:	08006d87 	.word	0x08006d87
 8006c78:	08006d0f 	.word	0x08006d0f
 8006c7c:	08006d87 	.word	0x08006d87
 8006c80:	08006d87 	.word	0x08006d87
 8006c84:	08006d87 	.word	0x08006d87
 8006c88:	08006d5d 	.word	0x08006d5d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fd fcc2 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8006c90:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4619      	mov	r1, r3
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	f04f 0400 	mov.w	r4, #0
 8006ca2:	0214      	lsls	r4, r2, #8
 8006ca4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006ca8:	020b      	lsls	r3, r1, #8
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6852      	ldr	r2, [r2, #4]
 8006cae:	0852      	lsrs	r2, r2, #1
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	eb13 0b01 	adds.w	fp, r3, r1
 8006cba:	eb44 0c02 	adc.w	ip, r4, r2
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	4661      	mov	r1, ip
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f04f 0400 	mov.w	r4, #0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4623      	mov	r3, r4
 8006cce:	f7f9 ff6b 	bl	8000ba8 <__aeabi_uldivmod>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006cd8:	e058      	b.n	8006d8c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	085b      	lsrs	r3, r3, #1
 8006ce0:	f04f 0400 	mov.w	r4, #0
 8006ce4:	49ae      	ldr	r1, [pc, #696]	; (8006fa0 <UART_SetConfig+0x6c4>)
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	eb13 0b01 	adds.w	fp, r3, r1
 8006cee:	eb44 0c02 	adc.w	ip, r4, r2
 8006cf2:	4658      	mov	r0, fp
 8006cf4:	4661      	mov	r1, ip
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f04f 0400 	mov.w	r4, #0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4623      	mov	r3, r4
 8006d02:	f7f9 ff51 	bl	8000ba8 <__aeabi_uldivmod>
 8006d06:	4603      	mov	r3, r0
 8006d08:	460c      	mov	r4, r1
 8006d0a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d0c:	e03e      	b.n	8006d8c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006d0e:	f7fd fbeb 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8006d12:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4619      	mov	r1, r3
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	f04f 0400 	mov.w	r4, #0
 8006d24:	0214      	lsls	r4, r2, #8
 8006d26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006d2a:	020b      	lsls	r3, r1, #8
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6852      	ldr	r2, [r2, #4]
 8006d30:	0852      	lsrs	r2, r2, #1
 8006d32:	4611      	mov	r1, r2
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	eb13 0b01 	adds.w	fp, r3, r1
 8006d3c:	eb44 0c02 	adc.w	ip, r4, r2
 8006d40:	4658      	mov	r0, fp
 8006d42:	4661      	mov	r1, ip
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f04f 0400 	mov.w	r4, #0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4623      	mov	r3, r4
 8006d50:	f7f9 ff2a 	bl	8000ba8 <__aeabi_uldivmod>
 8006d54:	4603      	mov	r3, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d5a:	e017      	b.n	8006d8c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	f04f 0400 	mov.w	r4, #0
 8006d66:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006d6a:	f144 0100 	adc.w	r1, r4, #0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f04f 0400 	mov.w	r4, #0
 8006d76:	461a      	mov	r2, r3
 8006d78:	4623      	mov	r3, r4
 8006d7a:	f7f9 ff15 	bl	8000ba8 <__aeabi_uldivmod>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006d84:	e002      	b.n	8006d8c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	76fb      	strb	r3, [r7, #27]
            break;
 8006d8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d92:	d308      	bcc.n	8006da6 <UART_SetConfig+0x4ca>
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9a:	d204      	bcs.n	8006da6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	60da      	str	r2, [r3, #12]
 8006da4:	e100      	b.n	8006fa8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	76fb      	strb	r3, [r7, #27]
 8006daa:	e0fd      	b.n	8006fa8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db4:	f040 8084 	bne.w	8006ec0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d85f      	bhi.n	8006e80 <UART_SetConfig+0x5a4>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0x4ec>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006e0d 	.word	0x08006e0d
 8006dd0:	08006e2d 	.word	0x08006e2d
 8006dd4:	08006e81 	.word	0x08006e81
 8006dd8:	08006e49 	.word	0x08006e49
 8006ddc:	08006e81 	.word	0x08006e81
 8006de0:	08006e81 	.word	0x08006e81
 8006de4:	08006e81 	.word	0x08006e81
 8006de8:	08006e69 	.word	0x08006e69
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fd fc12 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8006df0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	005a      	lsls	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e0a:	e03c      	b.n	8006e86 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0c:	f7fd fc18 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006e10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	005a      	lsls	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	441a      	add	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e2a:	e02c      	b.n	8006e86 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	085b      	lsrs	r3, r3, #1
 8006e32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006e36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6852      	ldr	r2, [r2, #4]
 8006e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e46:	e01e      	b.n	8006e86 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e48:	f7fd fb4e 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8006e4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	005a      	lsls	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	441a      	add	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e66:	e00e      	b.n	8006e86 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006e7e:	e002      	b.n	8006e86 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	76fb      	strb	r3, [r7, #27]
        break;
 8006e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	2b0f      	cmp	r3, #15
 8006e8a:	d916      	bls.n	8006eba <UART_SetConfig+0x5de>
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e92:	d212      	bcs.n	8006eba <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f023 030f 	bic.w	r3, r3, #15
 8006e9c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	89fb      	ldrh	r3, [r7, #14]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	89fa      	ldrh	r2, [r7, #14]
 8006eb6:	60da      	str	r2, [r3, #12]
 8006eb8:	e076      	b.n	8006fa8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	76fb      	strb	r3, [r7, #27]
 8006ebe:	e073      	b.n	8006fa8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d85c      	bhi.n	8006f82 <UART_SetConfig+0x6a6>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x5f4>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006f31 	.word	0x08006f31
 8006edc:	08006f83 	.word	0x08006f83
 8006ee0:	08006f4d 	.word	0x08006f4d
 8006ee4:	08006f83 	.word	0x08006f83
 8006ee8:	08006f83 	.word	0x08006f83
 8006eec:	08006f83 	.word	0x08006f83
 8006ef0:	08006f6b 	.word	0x08006f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef4:	f7fd fb8e 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8006ef8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	085a      	lsrs	r2, r3, #1
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f10:	e03a      	b.n	8006f88 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f12:	f7fd fb95 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006f16:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	085a      	lsrs	r2, r3, #1
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	441a      	add	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f2e:	e02b      	b.n	8006f88 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006f3a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6852      	ldr	r2, [r2, #4]
 8006f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f4a:	e01d      	b.n	8006f88 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4c:	f7fd facc 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8006f50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	085a      	lsrs	r2, r3, #1
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	441a      	add	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f68:	e00e      	b.n	8006f88 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f80:	e002      	b.n	8006f88 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	76fb      	strb	r3, [r7, #27]
        break;
 8006f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2b0f      	cmp	r3, #15
 8006f8c:	d90a      	bls.n	8006fa4 <UART_SetConfig+0x6c8>
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d206      	bcs.n	8006fa4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	e003      	b.n	8006fa8 <UART_SetConfig+0x6cc>
 8006fa0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006fb4:	7efb      	ldrb	r3, [r7, #27]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3728      	adds	r7, #40	; 0x28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070be:	d10a      	bne.n	80070d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007112:	f7fc f85b 	bl	80031cc <HAL_GetTick>
 8007116:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b08      	cmp	r3, #8
 8007124:	d10e      	bne.n	8007144 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007126:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f82a 	bl	800718e <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e020      	b.n	8007186 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b04      	cmp	r3, #4
 8007150:	d10e      	bne.n	8007170 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f814 	bl	800718e <UART_WaitOnFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e00a      	b.n	8007186 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	4613      	mov	r3, r2
 800719c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719e:	e05d      	b.n	800725c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a6:	d059      	beq.n	800725c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a8:	f7fc f810 	bl	80031cc <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d302      	bcc.n	80071be <UART_WaitOnFlagUntilTimeout+0x30>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11b      	bne.n	80071f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e042      	b.n	800727c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02b      	beq.n	800725c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800720e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007212:	d123      	bne.n	800725c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800721c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800722c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e00f      	b.n	800727c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69da      	ldr	r2, [r3, #28]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4013      	ands	r3, r2
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	429a      	cmp	r2, r3
 800726a:	bf0c      	ite	eq
 800726c:	2301      	moveq	r3, #1
 800726e:	2300      	movne	r3, #0
 8007270:	b2db      	uxtb	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	429a      	cmp	r2, r3
 8007278:	d092      	beq.n	80071a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800729a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff faf0 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007306:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff facd 	bl	80068b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007330:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007336:	2b22      	cmp	r3, #34	; 0x22
 8007338:	d13a      	bne.n	80073b0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007340:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007342:	89bb      	ldrh	r3, [r7, #12]
 8007344:	b2d9      	uxtb	r1, r3
 8007346:	89fb      	ldrh	r3, [r7, #14]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	400a      	ands	r2, r1
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d123      	bne.n	80073c4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800738a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7fb f92d 	bl	8002608 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ae:	e009      	b.n	80073c4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	8b1b      	ldrh	r3, [r3, #24]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0208 	orr.w	r2, r2, #8
 80073c0:	b292      	uxth	r2, r2
 80073c2:	831a      	strh	r2, [r3, #24]
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e0:	2b22      	cmp	r3, #34	; 0x22
 80073e2:	d13a      	bne.n	800745a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073ea:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80073f2:	89ba      	ldrh	r2, [r7, #12]
 80073f4:	89fb      	ldrh	r3, [r7, #14]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d123      	bne.n	800746e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007434:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0201 	bic.w	r2, r2, #1
 8007444:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fb f8d8 	bl	8002608 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007458:	e009      	b.n	800746e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	8b1b      	ldrh	r3, [r3, #24]
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	b292      	uxth	r2, r2
 800746c:	831a      	strh	r2, [r3, #24]
}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800748a:	b480      	push	{r7}
 800748c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800749e:	f3ef 8305 	mrs	r3, IPSR
 80074a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80074a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10f      	bne.n	80074ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	607b      	str	r3, [r7, #4]
  return(result);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074b6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ba:	603b      	str	r3, [r7, #0]
  return(result);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d007      	beq.n	80074d2 <osKernelInitialize+0x3a>
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <osKernelInitialize+0x64>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d103      	bne.n	80074d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80074ca:	f06f 0305 	mvn.w	r3, #5
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e00c      	b.n	80074ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074d2:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <osKernelInitialize+0x64>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d105      	bne.n	80074e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <osKernelInitialize+0x64>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e002      	b.n	80074ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	200002d0 	.word	0x200002d0

08007500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007506:	f3ef 8305 	mrs	r3, IPSR
 800750a:	60bb      	str	r3, [r7, #8]
  return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10f      	bne.n	8007532 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007512:	f3ef 8310 	mrs	r3, PRIMASK
 8007516:	607b      	str	r3, [r7, #4]
  return(result);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800751e:	f3ef 8311 	mrs	r3, BASEPRI
 8007522:	603b      	str	r3, [r7, #0]
  return(result);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <osKernelStart+0x3a>
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <osKernelStart+0x68>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d103      	bne.n	800753a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007532:	f06f 0305 	mvn.w	r3, #5
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e010      	b.n	800755c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800753a:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <osKernelStart+0x68>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d109      	bne.n	8007556 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007542:	f7ff ffa2 	bl	800748a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007546:	4b08      	ldr	r3, [pc, #32]	; (8007568 <osKernelStart+0x68>)
 8007548:	2202      	movs	r2, #2
 800754a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800754c:	f001 f934 	bl	80087b8 <vTaskStartScheduler>
      stat = osOK;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e002      	b.n	800755c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007556:	f04f 33ff 	mov.w	r3, #4294967295
 800755a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800755c:	68fb      	ldr	r3, [r7, #12]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200002d0 	.word	0x200002d0

0800756c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b090      	sub	sp, #64	; 0x40
 8007570:	af04      	add	r7, sp, #16
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007578:	2300      	movs	r3, #0
 800757a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800757c:	f3ef 8305 	mrs	r3, IPSR
 8007580:	61fb      	str	r3, [r7, #28]
  return(result);
 8007582:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007584:	2b00      	cmp	r3, #0
 8007586:	f040 808f 	bne.w	80076a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758a:	f3ef 8310 	mrs	r3, PRIMASK
 800758e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d105      	bne.n	80075a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007596:	f3ef 8311 	mrs	r3, BASEPRI
 800759a:	617b      	str	r3, [r7, #20]
  return(result);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <osThreadNew+0x3e>
 80075a2:	4b44      	ldr	r3, [pc, #272]	; (80076b4 <osThreadNew+0x148>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d07e      	beq.n	80076a8 <osThreadNew+0x13c>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d07b      	beq.n	80076a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80075b4:	2318      	movs	r3, #24
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d045      	beq.n	8007654 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <osThreadNew+0x6a>
        name = attr->name;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <osThreadNew+0x90>
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2b38      	cmp	r3, #56	; 0x38
 80075ee:	d805      	bhi.n	80075fc <osThreadNew+0x90>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <osThreadNew+0x94>
        return (NULL);
 80075fc:	2300      	movs	r3, #0
 80075fe:	e054      	b.n	80076aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	089b      	lsrs	r3, r3, #2
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <osThreadNew+0xca>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b5b      	cmp	r3, #91	; 0x5b
 800761e:	d90a      	bls.n	8007636 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007624:	2b00      	cmp	r3, #0
 8007626:	d006      	beq.n	8007636 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <osThreadNew+0xca>
        mem = 1;
 8007630:	2301      	movs	r3, #1
 8007632:	623b      	str	r3, [r7, #32]
 8007634:	e010      	b.n	8007658 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10c      	bne.n	8007658 <osThreadNew+0xec>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d108      	bne.n	8007658 <osThreadNew+0xec>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <osThreadNew+0xec>
          mem = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	e001      	b.n	8007658 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d110      	bne.n	8007680 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 ff01 	bl	800847c <xTaskCreateStatic>
 800767a:	4603      	mov	r3, r0
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	e013      	b.n	80076a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d110      	bne.n	80076a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	b29a      	uxth	r2, r3
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 ff49 	bl	8008530 <xTaskCreate>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d001      	beq.n	80076a8 <osThreadNew+0x13c>
          hTask = NULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076a8:	693b      	ldr	r3, [r7, #16]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3730      	adds	r7, #48	; 0x30
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	200002d0 	.word	0x200002d0

080076b8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c4:	f3ef 8305 	mrs	r3, IPSR
 80076c8:	613b      	str	r3, [r7, #16]
  return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8085 	bne.w	80077dc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d2:	f3ef 8310 	mrs	r3, PRIMASK
 80076d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d105      	bne.n	80076ea <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076de:	f3ef 8311 	mrs	r3, BASEPRI
 80076e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <osMutexNew+0x3a>
 80076ea:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <osMutexNew+0x130>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d074      	beq.n	80077dc <osMutexNew+0x124>
    if (attr != NULL) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <osMutexNew+0x48>
      type = attr->attr_bits;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	e001      	b.n	8007704 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osMutexNew+0x5c>
      rmtx = 1U;
 800770e:	2301      	movs	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e001      	b.n	8007718 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d15c      	bne.n	80077dc <osMutexNew+0x124>
      mem = -1;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d015      	beq.n	800775a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <osMutexNew+0x8c>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b4f      	cmp	r3, #79	; 0x4f
 800773c:	d902      	bls.n	8007744 <osMutexNew+0x8c>
          mem = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e00c      	b.n	800775e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d108      	bne.n	800775e <osMutexNew+0xa6>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <osMutexNew+0xa6>
            mem = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	e001      	b.n	800775e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d112      	bne.n	800778a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	4619      	mov	r1, r3
 8007770:	2004      	movs	r0, #4
 8007772:	f000 fa92 	bl	8007c9a <xQueueCreateMutexStatic>
 8007776:	6278      	str	r0, [r7, #36]	; 0x24
 8007778:	e016      	b.n	80077a8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4619      	mov	r1, r3
 8007780:	2001      	movs	r0, #1
 8007782:	f000 fa8a 	bl	8007c9a <xQueueCreateMutexStatic>
 8007786:	6278      	str	r0, [r7, #36]	; 0x24
 8007788:	e00e      	b.n	80077a8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007796:	2004      	movs	r0, #4
 8007798:	f000 fa67 	bl	8007c6a <xQueueCreateMutex>
 800779c:	6278      	str	r0, [r7, #36]	; 0x24
 800779e:	e003      	b.n	80077a8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80077a0:	2001      	movs	r0, #1
 80077a2:	f000 fa62 	bl	8007c6a <xQueueCreateMutex>
 80077a6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <osMutexNew+0x110>
        if (attr != NULL) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <osMutexNew+0x104>
          name = attr->name;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e001      	b.n	80077c0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077c4:	f000 fdfe 	bl	80083c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <osMutexNew+0x124>
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3728      	adds	r7, #40	; 0x28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200002d0 	.word	0x200002d0

080077ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a07      	ldr	r2, [pc, #28]	; (8007818 <vApplicationGetIdleTaskMemory+0x2c>)
 80077fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4a06      	ldr	r2, [pc, #24]	; (800781c <vApplicationGetIdleTaskMemory+0x30>)
 8007802:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2280      	movs	r2, #128	; 0x80
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	200002d4 	.word	0x200002d4
 800781c:	20000330 	.word	0x20000330

08007820 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4a07      	ldr	r2, [pc, #28]	; (800784c <vApplicationGetTimerTaskMemory+0x2c>)
 8007830:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	4a06      	ldr	r2, [pc, #24]	; (8007850 <vApplicationGetTimerTaskMemory+0x30>)
 8007836:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000530 	.word	0x20000530
 8007850:	2000058c 	.word	0x2000058c

08007854 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f103 0208 	add.w	r2, r3, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f04f 32ff 	mov.w	r2, #4294967295
 800786c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f103 0208 	add.w	r2, r3, #8
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0208 	add.w	r2, r3, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d103      	bne.n	8007916 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e00c      	b.n	8007930 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3308      	adds	r3, #8
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e002      	b.n	8007924 <vListInsert+0x2e>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	d2f6      	bcs.n	800791e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
}
 800795c:	bf00      	nop
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6892      	ldr	r2, [r2, #8]
 800797e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6852      	ldr	r2, [r2, #4]
 8007988:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d103      	bne.n	800799c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	1e5a      	subs	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60bb      	str	r3, [r7, #8]
 80079e2:	e7fe      	b.n	80079e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80079e4:	f002 f86a 	bl	8009abc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079f4:	fb01 f303 	mul.w	r3, r1, r3
 80079f8:	441a      	add	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	3b01      	subs	r3, #1
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	441a      	add	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	22ff      	movs	r2, #255	; 0xff
 8007a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	22ff      	movs	r2, #255	; 0xff
 8007a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d114      	bne.n	8007a64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01a      	beq.n	8007a78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3310      	adds	r3, #16
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 f936 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d012      	beq.n	8007a78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <xQueueGenericReset+0xcc>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	e009      	b.n	8007a78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3310      	adds	r3, #16
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fef3 	bl	8007854 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3324      	adds	r3, #36	; 0x24
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff feee 	bl	8007854 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a78:	f002 f84e 	bl	8009b18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a7c:	2301      	movs	r3, #1
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08e      	sub	sp, #56	; 0x38
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <xQueueGenericCreateStatic+0x28>
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab2:	e7fe      	b.n	8007ab2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <xQueueGenericCreateStatic+0x42>
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
 8007acc:	e7fe      	b.n	8007acc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <xQueueGenericCreateStatic+0x4e>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <xQueueGenericCreateStatic+0x52>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <xQueueGenericCreateStatic+0x54>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d109      	bne.n	8007af8 <xQueueGenericCreateStatic+0x6c>
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	623b      	str	r3, [r7, #32]
 8007af6:	e7fe      	b.n	8007af6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <xQueueGenericCreateStatic+0x78>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <xQueueGenericCreateStatic+0x7c>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <xQueueGenericCreateStatic+0x7e>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <xQueueGenericCreateStatic+0x96>
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	e7fe      	b.n	8007b20 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b22:	2350      	movs	r3, #80	; 0x50
 8007b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b50      	cmp	r3, #80	; 0x50
 8007b2a:	d009      	beq.n	8007b40 <xQueueGenericCreateStatic+0xb4>
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e7fe      	b.n	8007b3e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f844 	bl	8007bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3730      	adds	r7, #48	; 0x30
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b08a      	sub	sp, #40	; 0x28
 8007b76:	af02      	add	r7, sp, #8
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <xQueueGenericCreate+0x28>
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	e7fe      	b.n	8007b98 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d102      	bne.n	8007ba6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	e004      	b.n	8007bb0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	3350      	adds	r3, #80	; 0x50
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 f89b 	bl	8009cf0 <pvPortMalloc>
 8007bba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d011      	beq.n	8007be6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	3350      	adds	r3, #80	; 0x50
 8007bca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bd4:	79fa      	ldrb	r2, [r7, #7]
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f805 	bl	8007bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007be6:	69bb      	ldr	r3, [r7, #24]
	}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c1e:	2101      	movs	r1, #1
 8007c20:	69b8      	ldr	r0, [r7, #24]
 8007c22:	f7ff fecb 	bl	80079bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c56:	2300      	movs	r3, #0
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f837 	bl	8007cd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	4603      	mov	r3, r0
 8007c72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6939      	ldr	r1, [r7, #16]
 8007c82:	6978      	ldr	r0, [r7, #20]
 8007c84:	f7ff ff75 	bl	8007b72 <xQueueGenericCreate>
 8007c88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff ffd3 	bl	8007c36 <prvInitialiseMutex>

		return xNewQueue;
 8007c90:	68fb      	ldr	r3, [r7, #12]
	}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af02      	add	r7, sp, #8
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	6039      	str	r1, [r7, #0]
 8007ca4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6939      	ldr	r1, [r7, #16]
 8007cb8:	6978      	ldr	r0, [r7, #20]
 8007cba:	f7ff fee7 	bl	8007a8c <xQueueGenericCreateStatic>
 8007cbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff ffb8 	bl	8007c36 <prvInitialiseMutex>

		return xNewQueue;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
	}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08e      	sub	sp, #56	; 0x38
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <xQueueGenericSend+0x30>
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cfe:	e7fe      	b.n	8007cfe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d103      	bne.n	8007d0e <xQueueGenericSend+0x3e>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <xQueueGenericSend+0x42>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <xQueueGenericSend+0x44>
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d109      	bne.n	8007d2c <xQueueGenericSend+0x5c>
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
 8007d2a:	e7fe      	b.n	8007d2a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSend+0x6a>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSend+0x6e>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSend+0x70>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <xQueueGenericSend+0x88>
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	623b      	str	r3, [r7, #32]
 8007d56:	e7fe      	b.n	8007d56 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d58:	f001 f964 	bl	8009024 <xTaskGetSchedulerState>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <xQueueGenericSend+0x98>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <xQueueGenericSend+0x9c>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <xQueueGenericSend+0x9e>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <xQueueGenericSend+0xb6>
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	e7fe      	b.n	8007d84 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d86:	f001 fe99 	bl	8009abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d302      	bcc.n	8007d9c <xQueueGenericSend+0xcc>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d129      	bne.n	8007df0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da2:	f000 f9ff 	bl	80081a4 <prvCopyDataToQueue>
 8007da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d010      	beq.n	8007dd2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	3324      	adds	r3, #36	; 0x24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 ff7f 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d013      	beq.n	8007de8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dc0:	4b3f      	ldr	r3, [pc, #252]	; (8007ec0 <xQueueGenericSend+0x1f0>)
 8007dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	e00a      	b.n	8007de8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d007      	beq.n	8007de8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007dd8:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <xQueueGenericSend+0x1f0>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007de8:	f001 fe96 	bl	8009b18 <vPortExitCritical>
				return pdPASS;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e063      	b.n	8007eb8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007df6:	f001 fe8f 	bl	8009b18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e05c      	b.n	8007eb8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e04:	f107 0314 	add.w	r3, r7, #20
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 ffb7 	bl	8008d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e12:	f001 fe81 	bl	8009b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e16:	f000 fd33 	bl	8008880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e1a:	f001 fe4f 	bl	8009abc <vPortEnterCritical>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e24:	b25b      	sxtb	r3, r3
 8007e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2a:	d103      	bne.n	8007e34 <xQueueGenericSend+0x164>
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3a:	b25b      	sxtb	r3, r3
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d103      	bne.n	8007e4a <xQueueGenericSend+0x17a>
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4a:	f001 fe65 	bl	8009b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e4e:	1d3a      	adds	r2, r7, #4
 8007e50:	f107 0314 	add.w	r3, r7, #20
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 ffa6 	bl	8008da8 <xTaskCheckForTimeOut>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d124      	bne.n	8007eac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e64:	f000 fa96 	bl	8008394 <prvIsQueueFull>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d018      	beq.n	8007ea0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	3310      	adds	r3, #16
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fed0 	bl	8008c1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fa21 	bl	80082c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e82:	f000 fd0b 	bl	800889c <xTaskResumeAll>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f47f af7c 	bne.w	8007d86 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007e8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <xQueueGenericSend+0x1f0>)
 8007e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	e772      	b.n	8007d86 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea2:	f000 fa0f 	bl	80082c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ea6:	f000 fcf9 	bl	800889c <xTaskResumeAll>
 8007eaa:	e76c      	b.n	8007d86 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eae:	f000 fa09 	bl	80082c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eb2:	f000 fcf3 	bl	800889c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3738      	adds	r7, #56	; 0x38
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	; 0x38
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x2c>
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSendFromISR+0x3a>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSendFromISR+0x3e>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSendFromISR+0x40>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <xQueueGenericSendFromISR+0x58>
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	623b      	str	r3, [r7, #32]
 8007f1a:	e7fe      	b.n	8007f1a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d103      	bne.n	8007f2a <xQueueGenericSendFromISR+0x66>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <xQueueGenericSendFromISR+0x6a>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xQueueGenericSendFromISR+0x6c>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <xQueueGenericSendFromISR+0x84>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e7fe      	b.n	8007f46 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f48:	f001 fe94 	bl	8009c74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f4c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	61ba      	str	r2, [r7, #24]
 8007f62:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f64:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d302      	bcc.n	8007f7a <xQueueGenericSendFromISR+0xb6>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d12c      	bne.n	8007fd4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8a:	f000 f90b 	bl	80081a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f8e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d112      	bne.n	8007fbe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d016      	beq.n	8007fce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	3324      	adds	r3, #36	; 0x24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fe87 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00e      	beq.n	8007fce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e007      	b.n	8007fce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	b25a      	sxtb	r2, r3
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007fd2:	e001      	b.n	8007fd8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3738      	adds	r7, #56	; 0x38
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08c      	sub	sp, #48	; 0x30
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <xQueueReceive+0x2e>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	623b      	str	r3, [r7, #32]
 8008018:	e7fe      	b.n	8008018 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <xQueueReceive+0x3c>
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <xQueueReceive+0x40>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <xQueueReceive+0x42>
 800802c:	2300      	movs	r3, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d109      	bne.n	8008046 <xQueueReceive+0x5a>
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	61fb      	str	r3, [r7, #28]
 8008044:	e7fe      	b.n	8008044 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008046:	f000 ffed 	bl	8009024 <xTaskGetSchedulerState>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <xQueueReceive+0x6a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <xQueueReceive+0x6e>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <xQueueReceive+0x70>
 800805a:	2300      	movs	r3, #0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d109      	bne.n	8008074 <xQueueReceive+0x88>
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	e7fe      	b.n	8008072 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008074:	f001 fd22 	bl	8009abc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01f      	beq.n	80080c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008084:	68b9      	ldr	r1, [r7, #8]
 8008086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008088:	f000 f8f6 	bl	8008278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	1e5a      	subs	r2, r3, #1
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00f      	beq.n	80080bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	3310      	adds	r3, #16
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fe09 	bl	8008cb8 <xTaskRemoveFromEventList>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d007      	beq.n	80080bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080ac:	4b3c      	ldr	r3, [pc, #240]	; (80081a0 <xQueueReceive+0x1b4>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080bc:	f001 fd2c 	bl	8009b18 <vPortExitCritical>
				return pdPASS;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e069      	b.n	8008198 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080ca:	f001 fd25 	bl	8009b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e062      	b.n	8008198 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080d8:	f107 0310 	add.w	r3, r7, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fe4d 	bl	8008d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080e2:	2301      	movs	r3, #1
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080e6:	f001 fd17 	bl	8009b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ea:	f000 fbc9 	bl	8008880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ee:	f001 fce5 	bl	8009abc <vPortEnterCritical>
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080f8:	b25b      	sxtb	r3, r3
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d103      	bne.n	8008108 <xQueueReceive+0x11c>
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800810e:	b25b      	sxtb	r3, r3
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d103      	bne.n	800811e <xQueueReceive+0x132>
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800811e:	f001 fcfb 	bl	8009b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008122:	1d3a      	adds	r2, r7, #4
 8008124:	f107 0310 	add.w	r3, r7, #16
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fe3c 	bl	8008da8 <xTaskCheckForTimeOut>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d123      	bne.n	800817e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008138:	f000 f916 	bl	8008368 <prvIsQueueEmpty>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	3324      	adds	r3, #36	; 0x24
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fd66 	bl	8008c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008152:	f000 f8b7 	bl	80082c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008156:	f000 fba1 	bl	800889c <xTaskResumeAll>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d189      	bne.n	8008074 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008160:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <xQueueReceive+0x1b4>)
 8008162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	e780      	b.n	8008074 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008174:	f000 f8a6 	bl	80082c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008178:	f000 fb90 	bl	800889c <xTaskResumeAll>
 800817c:	e77a      	b.n	8008074 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800817e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008180:	f000 f8a0 	bl	80082c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008184:	f000 fb8a 	bl	800889c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800818a:	f000 f8ed 	bl	8008368 <prvIsQueueEmpty>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	f43f af6f 	beq.w	8008074 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008196:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008198:	4618      	mov	r0, r3
 800819a:	3730      	adds	r7, #48	; 0x30
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10d      	bne.n	80081de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d14d      	bne.n	8008266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 ff46 	bl	8009060 <xTaskPriorityDisinherit>
 80081d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	e043      	b.n	8008266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d119      	bne.n	8008218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6858      	ldr	r0, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	461a      	mov	r2, r3
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	f001 ff7e 	bl	800a0f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	441a      	add	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	429a      	cmp	r2, r3
 800820c:	d32b      	bcc.n	8008266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	e026      	b.n	8008266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	68d8      	ldr	r0, [r3, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	461a      	mov	r2, r3
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	f001 ff64 	bl	800a0f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	425b      	negs	r3, r3
 8008232:	441a      	add	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d207      	bcs.n	8008254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	425b      	negs	r3, r3
 800824e:	441a      	add	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d105      	bne.n	8008266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	3b01      	subs	r3, #1
 8008264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800826e:	697b      	ldr	r3, [r7, #20]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d018      	beq.n	80082bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	441a      	add	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d303      	bcc.n	80082ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68d9      	ldr	r1, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	461a      	mov	r2, r3
 80082b6:	6838      	ldr	r0, [r7, #0]
 80082b8:	f001 ff1a 	bl	800a0f0 <memcpy>
	}
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082cc:	f001 fbf6 	bl	8009abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082d8:	e011      	b.n	80082fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d012      	beq.n	8008308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3324      	adds	r3, #36	; 0x24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fce6 	bl	8008cb8 <xTaskRemoveFromEventList>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082f2:	f000 fdb9 	bl	8008e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	dce9      	bgt.n	80082da <prvUnlockQueue+0x16>
 8008306:	e000      	b.n	800830a <prvUnlockQueue+0x46>
					break;
 8008308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008312:	f001 fc01 	bl	8009b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008316:	f001 fbd1 	bl	8009abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008322:	e011      	b.n	8008348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d012      	beq.n	8008352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3310      	adds	r3, #16
 8008330:	4618      	mov	r0, r3
 8008332:	f000 fcc1 	bl	8008cb8 <xTaskRemoveFromEventList>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800833c:	f000 fd94 	bl	8008e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	3b01      	subs	r3, #1
 8008344:	b2db      	uxtb	r3, r3
 8008346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800834c:	2b00      	cmp	r3, #0
 800834e:	dce9      	bgt.n	8008324 <prvUnlockQueue+0x60>
 8008350:	e000      	b.n	8008354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	22ff      	movs	r2, #255	; 0xff
 8008358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800835c:	f001 fbdc 	bl	8009b18 <vPortExitCritical>
}
 8008360:	bf00      	nop
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008370:	f001 fba4 	bl	8009abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e001      	b.n	8008386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008386:	f001 fbc7 	bl	8009b18 <vPortExitCritical>

	return xReturn;
 800838a:	68fb      	ldr	r3, [r7, #12]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800839c:	f001 fb8e 	bl	8009abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d102      	bne.n	80083b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083ac:	2301      	movs	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e001      	b.n	80083b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083b6:	f001 fbaf 	bl	8009b18 <vPortExitCritical>

	return xReturn;
 80083ba:	68fb      	ldr	r3, [r7, #12]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	e014      	b.n	80083fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083d4:	4a0e      	ldr	r2, [pc, #56]	; (8008410 <vQueueAddToRegistry+0x4c>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10b      	bne.n	80083f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083e0:	490b      	ldr	r1, [pc, #44]	; (8008410 <vQueueAddToRegistry+0x4c>)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <vQueueAddToRegistry+0x4c>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083f6:	e005      	b.n	8008404 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b07      	cmp	r3, #7
 8008402:	d9e7      	bls.n	80083d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	2000266c 	.word	0x2000266c

08008414 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008424:	f001 fb4a 	bl	8009abc <vPortEnterCritical>
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800842e:	b25b      	sxtb	r3, r3
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d103      	bne.n	800843e <vQueueWaitForMessageRestricted+0x2a>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008444:	b25b      	sxtb	r3, r3
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844a:	d103      	bne.n	8008454 <vQueueWaitForMessageRestricted+0x40>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008454:	f001 fb60 	bl	8009b18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	d106      	bne.n	800846e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	3324      	adds	r3, #36	; 0x24
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fbfb 	bl	8008c64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800846e:	6978      	ldr	r0, [r7, #20]
 8008470:	f7ff ff28 	bl	80082c4 <prvUnlockQueue>
	}
 8008474:	bf00      	nop
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08e      	sub	sp, #56	; 0x38
 8008480:	af04      	add	r7, sp, #16
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800848a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848c:	2b00      	cmp	r3, #0
 800848e:	d109      	bne.n	80084a4 <xTaskCreateStatic+0x28>
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	623b      	str	r3, [r7, #32]
 80084a2:	e7fe      	b.n	80084a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <xTaskCreateStatic+0x42>
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	61fb      	str	r3, [r7, #28]
 80084bc:	e7fe      	b.n	80084bc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084be:	235c      	movs	r3, #92	; 0x5c
 80084c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b5c      	cmp	r3, #92	; 0x5c
 80084c6:	d009      	beq.n	80084dc <xTaskCreateStatic+0x60>
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	e7fe      	b.n	80084da <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01e      	beq.n	8008522 <xTaskCreateStatic+0xa6>
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01b      	beq.n	8008522 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084fc:	2300      	movs	r3, #0
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	9302      	str	r3, [sp, #8]
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f850 	bl	80085ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800851a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800851c:	f000 f8dc 	bl	80086d8 <prvAddNewTaskToReadyList>
 8008520:	e001      	b.n	8008526 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008526:	697b      	ldr	r3, [r7, #20]
	}
 8008528:	4618      	mov	r0, r3
 800852a:	3728      	adds	r7, #40	; 0x28
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08c      	sub	sp, #48	; 0x30
 8008534:	af04      	add	r7, sp, #16
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	4613      	mov	r3, r2
 800853e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4618      	mov	r0, r3
 8008546:	f001 fbd3 	bl	8009cf0 <pvPortMalloc>
 800854a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00e      	beq.n	8008570 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008552:	205c      	movs	r0, #92	; 0x5c
 8008554:	f001 fbcc 	bl	8009cf0 <pvPortMalloc>
 8008558:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
 8008566:	e005      	b.n	8008574 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008568:	6978      	ldr	r0, [r7, #20]
 800856a:	f001 fc83 	bl	8009e74 <vPortFree>
 800856e:	e001      	b.n	8008574 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d017      	beq.n	80085aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	2300      	movs	r3, #0
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	9302      	str	r3, [sp, #8]
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f80e 	bl	80085ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800859e:	69f8      	ldr	r0, [r7, #28]
 80085a0:	f000 f89a 	bl	80086d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085a4:	2301      	movs	r3, #1
 80085a6:	61bb      	str	r3, [r7, #24]
 80085a8:	e002      	b.n	80085b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085b0:	69bb      	ldr	r3, [r7, #24]
	}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b088      	sub	sp, #32
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	461a      	mov	r2, r3
 80085d2:	21a5      	movs	r1, #165	; 0xa5
 80085d4:	f001 fd97 	bl	800a106 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085e2:	3b01      	subs	r3, #1
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f023 0307 	bic.w	r3, r3, #7
 80085f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <prvInitialiseNewTask+0x56>
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	617b      	str	r3, [r7, #20]
 800860e:	e7fe      	b.n	800860e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d01f      	beq.n	8008656 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008616:	2300      	movs	r3, #0
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	e012      	b.n	8008642 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	4413      	add	r3, r2
 8008622:	7819      	ldrb	r1, [r3, #0]
 8008624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	3334      	adds	r3, #52	; 0x34
 800862c:	460a      	mov	r2, r1
 800862e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d006      	beq.n	800864a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	3301      	adds	r3, #1
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	2b0f      	cmp	r3, #15
 8008646:	d9e9      	bls.n	800861c <prvInitialiseNewTask+0x62>
 8008648:	e000      	b.n	800864c <prvInitialiseNewTask+0x92>
			{
				break;
 800864a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008654:	e003      	b.n	800865e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	2b37      	cmp	r3, #55	; 0x37
 8008662:	d901      	bls.n	8008668 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008664:	2337      	movs	r3, #55	; 0x37
 8008666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	3304      	adds	r3, #4
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff f908 	bl	8007894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	3318      	adds	r3, #24
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff f903 	bl	8007894 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2200      	movs	r2, #0
 80086a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	68f9      	ldr	r1, [r7, #12]
 80086b6:	69b8      	ldr	r0, [r7, #24]
 80086b8:	f001 f8d8 	bl	800986c <pxPortInitialiseStack>
 80086bc:	4602      	mov	r2, r0
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ce:	bf00      	nop
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086e0:	f001 f9ec 	bl	8009abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086e4:	4b2d      	ldr	r3, [pc, #180]	; (800879c <prvAddNewTaskToReadyList+0xc4>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3301      	adds	r3, #1
 80086ea:	4a2c      	ldr	r2, [pc, #176]	; (800879c <prvAddNewTaskToReadyList+0xc4>)
 80086ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086ee:	4b2c      	ldr	r3, [pc, #176]	; (80087a0 <prvAddNewTaskToReadyList+0xc8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086f6:	4a2a      	ldr	r2, [pc, #168]	; (80087a0 <prvAddNewTaskToReadyList+0xc8>)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086fc:	4b27      	ldr	r3, [pc, #156]	; (800879c <prvAddNewTaskToReadyList+0xc4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d110      	bne.n	8008726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008704:	f000 fbd4 	bl	8008eb0 <prvInitialiseTaskLists>
 8008708:	e00d      	b.n	8008726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800870a:	4b26      	ldr	r3, [pc, #152]	; (80087a4 <prvAddNewTaskToReadyList+0xcc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008712:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <prvAddNewTaskToReadyList+0xc8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	429a      	cmp	r2, r3
 800871e:	d802      	bhi.n	8008726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008720:	4a1f      	ldr	r2, [pc, #124]	; (80087a0 <prvAddNewTaskToReadyList+0xc8>)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008726:	4b20      	ldr	r3, [pc, #128]	; (80087a8 <prvAddNewTaskToReadyList+0xd0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3301      	adds	r3, #1
 800872c:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <prvAddNewTaskToReadyList+0xd0>)
 800872e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008730:	4b1d      	ldr	r3, [pc, #116]	; (80087a8 <prvAddNewTaskToReadyList+0xd0>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	4b1b      	ldr	r3, [pc, #108]	; (80087ac <prvAddNewTaskToReadyList+0xd4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d903      	bls.n	800874c <prvAddNewTaskToReadyList+0x74>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a18      	ldr	r2, [pc, #96]	; (80087ac <prvAddNewTaskToReadyList+0xd4>)
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4a15      	ldr	r2, [pc, #84]	; (80087b0 <prvAddNewTaskToReadyList+0xd8>)
 800875a:	441a      	add	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7ff f8a3 	bl	80078ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008768:	f001 f9d6 	bl	8009b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <prvAddNewTaskToReadyList+0xcc>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00e      	beq.n	8008792 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008774:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <prvAddNewTaskToReadyList+0xc8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	429a      	cmp	r2, r3
 8008780:	d207      	bcs.n	8008792 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008782:	4b0c      	ldr	r3, [pc, #48]	; (80087b4 <prvAddNewTaskToReadyList+0xdc>)
 8008784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000e60 	.word	0x20000e60
 80087a0:	2000098c 	.word	0x2000098c
 80087a4:	20000e6c 	.word	0x20000e6c
 80087a8:	20000e7c 	.word	0x20000e7c
 80087ac:	20000e68 	.word	0x20000e68
 80087b0:	20000990 	.word	0x20000990
 80087b4:	e000ed04 	.word	0xe000ed04

080087b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08a      	sub	sp, #40	; 0x28
 80087bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087c6:	463a      	mov	r2, r7
 80087c8:	1d39      	adds	r1, r7, #4
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff f80c 	bl	80077ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	9202      	str	r2, [sp, #8]
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	2300      	movs	r3, #0
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	460a      	mov	r2, r1
 80087e6:	4920      	ldr	r1, [pc, #128]	; (8008868 <vTaskStartScheduler+0xb0>)
 80087e8:	4820      	ldr	r0, [pc, #128]	; (800886c <vTaskStartScheduler+0xb4>)
 80087ea:	f7ff fe47 	bl	800847c <xTaskCreateStatic>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b1f      	ldr	r3, [pc, #124]	; (8008870 <vTaskStartScheduler+0xb8>)
 80087f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087f4:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <vTaskStartScheduler+0xb8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087fc:	2301      	movs	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	e001      	b.n	8008806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d102      	bne.n	8008812 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800880c:	f000 fce8 	bl	80091e0 <xTimerCreateTimerTask>
 8008810:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d115      	bne.n	8008844 <vTaskStartScheduler+0x8c>
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <vTaskStartScheduler+0xbc>)
 800882c:	f04f 32ff 	mov.w	r2, #4294967295
 8008830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008832:	4b11      	ldr	r3, [pc, #68]	; (8008878 <vTaskStartScheduler+0xc0>)
 8008834:	2201      	movs	r2, #1
 8008836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008838:	4b10      	ldr	r3, [pc, #64]	; (800887c <vTaskStartScheduler+0xc4>)
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800883e:	f001 f89f 	bl	8009980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008842:	e00d      	b.n	8008860 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d109      	bne.n	8008860 <vTaskStartScheduler+0xa8>
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	e7fe      	b.n	800885e <vTaskStartScheduler+0xa6>
}
 8008860:	bf00      	nop
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	0800c398 	.word	0x0800c398
 800886c:	08008e81 	.word	0x08008e81
 8008870:	20000e84 	.word	0x20000e84
 8008874:	20000e80 	.word	0x20000e80
 8008878:	20000e6c 	.word	0x20000e6c
 800887c:	20000e64 	.word	0x20000e64

08008880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <vTaskSuspendAll+0x18>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	4a03      	ldr	r2, [pc, #12]	; (8008898 <vTaskSuspendAll+0x18>)
 800888c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	20000e88 	.word	0x20000e88

0800889c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088aa:	4b41      	ldr	r3, [pc, #260]	; (80089b0 <xTaskResumeAll+0x114>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <xTaskResumeAll+0x2a>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	e7fe      	b.n	80088c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088c6:	f001 f8f9 	bl	8009abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088ca:	4b39      	ldr	r3, [pc, #228]	; (80089b0 <xTaskResumeAll+0x114>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	4a37      	ldr	r2, [pc, #220]	; (80089b0 <xTaskResumeAll+0x114>)
 80088d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d4:	4b36      	ldr	r3, [pc, #216]	; (80089b0 <xTaskResumeAll+0x114>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d162      	bne.n	80089a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088dc:	4b35      	ldr	r3, [pc, #212]	; (80089b4 <xTaskResumeAll+0x118>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d05e      	beq.n	80089a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e4:	e02f      	b.n	8008946 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e6:	4b34      	ldr	r3, [pc, #208]	; (80089b8 <xTaskResumeAll+0x11c>)
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3318      	adds	r3, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff f838 	bl	8007968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff f833 	bl	8007968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	4b2d      	ldr	r3, [pc, #180]	; (80089bc <xTaskResumeAll+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d903      	bls.n	8008916 <xTaskResumeAll+0x7a>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <xTaskResumeAll+0x120>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a27      	ldr	r2, [pc, #156]	; (80089c0 <xTaskResumeAll+0x124>)
 8008924:	441a      	add	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3304      	adds	r3, #4
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f7fe ffbe 	bl	80078ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008936:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <xTaskResumeAll+0x128>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	429a      	cmp	r2, r3
 800893e:	d302      	bcc.n	8008946 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008940:	4b21      	ldr	r3, [pc, #132]	; (80089c8 <xTaskResumeAll+0x12c>)
 8008942:	2201      	movs	r2, #1
 8008944:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008946:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <xTaskResumeAll+0x11c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1cb      	bne.n	80088e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008954:	f000 fb46 	bl	8008fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008958:	4b1c      	ldr	r3, [pc, #112]	; (80089cc <xTaskResumeAll+0x130>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d010      	beq.n	8008986 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008964:	f000 f846 	bl	80089f4 <xTaskIncrementTick>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800896e:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <xTaskResumeAll+0x12c>)
 8008970:	2201      	movs	r2, #1
 8008972:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3b01      	subs	r3, #1
 8008978:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f1      	bne.n	8008964 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008980:	4b12      	ldr	r3, [pc, #72]	; (80089cc <xTaskResumeAll+0x130>)
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008986:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <xTaskResumeAll+0x12c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800898e:	2301      	movs	r3, #1
 8008990:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008992:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <xTaskResumeAll+0x134>)
 8008994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a2:	f001 f8b9 	bl	8009b18 <vPortExitCritical>

	return xAlreadyYielded;
 80089a6:	68bb      	ldr	r3, [r7, #8]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20000e88 	.word	0x20000e88
 80089b4:	20000e60 	.word	0x20000e60
 80089b8:	20000e20 	.word	0x20000e20
 80089bc:	20000e68 	.word	0x20000e68
 80089c0:	20000990 	.word	0x20000990
 80089c4:	2000098c 	.word	0x2000098c
 80089c8:	20000e74 	.word	0x20000e74
 80089cc:	20000e70 	.word	0x20000e70
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <xTaskGetTickCount+0x1c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089e0:	687b      	ldr	r3, [r7, #4]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000e64 	.word	0x20000e64

080089f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fe:	4b4e      	ldr	r3, [pc, #312]	; (8008b38 <xTaskIncrementTick+0x144>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f040 8088 	bne.w	8008b18 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a08:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <xTaskIncrementTick+0x148>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a10:	4a4a      	ldr	r2, [pc, #296]	; (8008b3c <xTaskIncrementTick+0x148>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11f      	bne.n	8008a5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a1c:	4b48      	ldr	r3, [pc, #288]	; (8008b40 <xTaskIncrementTick+0x14c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <xTaskIncrementTick+0x46>
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	e7fe      	b.n	8008a38 <xTaskIncrementTick+0x44>
 8008a3a:	4b41      	ldr	r3, [pc, #260]	; (8008b40 <xTaskIncrementTick+0x14c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	4b40      	ldr	r3, [pc, #256]	; (8008b44 <xTaskIncrementTick+0x150>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a3e      	ldr	r2, [pc, #248]	; (8008b40 <xTaskIncrementTick+0x14c>)
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	4a3e      	ldr	r2, [pc, #248]	; (8008b44 <xTaskIncrementTick+0x150>)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	4b3e      	ldr	r3, [pc, #248]	; (8008b48 <xTaskIncrementTick+0x154>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	4a3c      	ldr	r2, [pc, #240]	; (8008b48 <xTaskIncrementTick+0x154>)
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	f000 fac4 	bl	8008fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a5c:	4b3b      	ldr	r3, [pc, #236]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d349      	bcc.n	8008afa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a66:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <xTaskIncrementTick+0x14c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a70:	4b36      	ldr	r3, [pc, #216]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	601a      	str	r2, [r3, #0]
					break;
 8008a78:	e03f      	b.n	8008afa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7a:	4b31      	ldr	r3, [pc, #196]	; (8008b40 <xTaskIncrementTick+0x14c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d203      	bcs.n	8008a9a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a92:	4a2e      	ldr	r2, [pc, #184]	; (8008b4c <xTaskIncrementTick+0x158>)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a98:	e02f      	b.n	8008afa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe ff62 	bl	8007968 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3318      	adds	r3, #24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe ff59 	bl	8007968 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aba:	4b25      	ldr	r3, [pc, #148]	; (8008b50 <xTaskIncrementTick+0x15c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d903      	bls.n	8008aca <xTaskIncrementTick+0xd6>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	4a22      	ldr	r2, [pc, #136]	; (8008b50 <xTaskIncrementTick+0x15c>)
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a1f      	ldr	r2, [pc, #124]	; (8008b54 <xTaskIncrementTick+0x160>)
 8008ad8:	441a      	add	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3304      	adds	r3, #4
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	f7fe fee4 	bl	80078ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	4b1b      	ldr	r3, [pc, #108]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d3b8      	bcc.n	8008a66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008af8:	e7b5      	b.n	8008a66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008afa:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <xTaskIncrementTick+0x164>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b00:	4914      	ldr	r1, [pc, #80]	; (8008b54 <xTaskIncrementTick+0x160>)
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d907      	bls.n	8008b22 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008b12:	2301      	movs	r3, #1
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	e004      	b.n	8008b22 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b18:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <xTaskIncrementTick+0x168>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	4a0f      	ldr	r2, [pc, #60]	; (8008b5c <xTaskIncrementTick+0x168>)
 8008b20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b22:	4b0f      	ldr	r3, [pc, #60]	; (8008b60 <xTaskIncrementTick+0x16c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b2e:	697b      	ldr	r3, [r7, #20]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20000e88 	.word	0x20000e88
 8008b3c:	20000e64 	.word	0x20000e64
 8008b40:	20000e18 	.word	0x20000e18
 8008b44:	20000e1c 	.word	0x20000e1c
 8008b48:	20000e78 	.word	0x20000e78
 8008b4c:	20000e80 	.word	0x20000e80
 8008b50:	20000e68 	.word	0x20000e68
 8008b54:	20000990 	.word	0x20000990
 8008b58:	2000098c 	.word	0x2000098c
 8008b5c:	20000e70 	.word	0x20000e70
 8008b60:	20000e74 	.word	0x20000e74

08008b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b6a:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <vTaskSwitchContext+0xa4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b72:	4b26      	ldr	r3, [pc, #152]	; (8008c0c <vTaskSwitchContext+0xa8>)
 8008b74:	2201      	movs	r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b78:	e040      	b.n	8008bfc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008b7a:	4b24      	ldr	r3, [pc, #144]	; (8008c0c <vTaskSwitchContext+0xa8>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b80:	4b23      	ldr	r3, [pc, #140]	; (8008c10 <vTaskSwitchContext+0xac>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	e00f      	b.n	8008ba8 <vTaskSwitchContext+0x44>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <vTaskSwitchContext+0x3e>
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
 8008ba0:	e7fe      	b.n	8008ba0 <vTaskSwitchContext+0x3c>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	491a      	ldr	r1, [pc, #104]	; (8008c14 <vTaskSwitchContext+0xb0>)
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0e5      	beq.n	8008b88 <vTaskSwitchContext+0x24>
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a13      	ldr	r2, [pc, #76]	; (8008c14 <vTaskSwitchContext+0xb0>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	605a      	str	r2, [r3, #4]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	3308      	adds	r3, #8
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d104      	bne.n	8008bec <vTaskSwitchContext+0x88>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	605a      	str	r2, [r3, #4]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <vTaskSwitchContext+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <vTaskSwitchContext+0xac>)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6013      	str	r3, [r2, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20000e88 	.word	0x20000e88
 8008c0c:	20000e74 	.word	0x20000e74
 8008c10:	20000e68 	.word	0x20000e68
 8008c14:	20000990 	.word	0x20000990
 8008c18:	2000098c 	.word	0x2000098c

08008c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d109      	bne.n	8008c40 <vTaskPlaceOnEventList+0x24>
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e7fe      	b.n	8008c3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <vTaskPlaceOnEventList+0x44>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3318      	adds	r3, #24
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fe fe54 	bl	80078f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6838      	ldr	r0, [r7, #0]
 8008c52:	f000 fa71 	bl	8009138 <prvAddCurrentTaskToDelayedList>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	2000098c 	.word	0x2000098c

08008c64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <vTaskPlaceOnEventListRestricted+0x26>
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e7fe      	b.n	8008c88 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <vTaskPlaceOnEventListRestricted+0x50>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3318      	adds	r3, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7fe fe0b 	bl	80078ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	68b8      	ldr	r0, [r7, #8]
 8008ca8:	f000 fa46 	bl	8009138 <prvAddCurrentTaskToDelayedList>
	}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	2000098c 	.word	0x2000098c

08008cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <xTaskRemoveFromEventList+0x2a>
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	3318      	adds	r3, #24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fe3e 	bl	8007968 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cec:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <xTaskRemoveFromEventList+0xac>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11d      	bne.n	8008d30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fe35 	bl	8007968 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <xTaskRemoveFromEventList+0xb0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d903      	bls.n	8008d12 <xTaskRemoveFromEventList+0x5a>
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <xTaskRemoveFromEventList+0xb0>)
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4a13      	ldr	r2, [pc, #76]	; (8008d6c <xTaskRemoveFromEventList+0xb4>)
 8008d20:	441a      	add	r2, r3
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fe fdc0 	bl	80078ae <vListInsertEnd>
 8008d2e:	e005      	b.n	8008d3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	3318      	adds	r3, #24
 8008d34:	4619      	mov	r1, r3
 8008d36:	480e      	ldr	r0, [pc, #56]	; (8008d70 <xTaskRemoveFromEventList+0xb8>)
 8008d38:	f7fe fdb9 	bl	80078ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <xTaskRemoveFromEventList+0xbc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d905      	bls.n	8008d56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d4e:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <xTaskRemoveFromEventList+0xc0>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e001      	b.n	8008d5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d5a:	697b      	ldr	r3, [r7, #20]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000e88 	.word	0x20000e88
 8008d68:	20000e68 	.word	0x20000e68
 8008d6c:	20000990 	.word	0x20000990
 8008d70:	20000e20 	.word	0x20000e20
 8008d74:	2000098c 	.word	0x2000098c
 8008d78:	20000e74 	.word	0x20000e74

08008d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <vTaskInternalSetTimeOutState+0x24>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <vTaskInternalSetTimeOutState+0x28>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20000e78 	.word	0x20000e78
 8008da4:	20000e64 	.word	0x20000e64

08008da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <xTaskCheckForTimeOut+0x24>
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	e7fe      	b.n	8008dca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <xTaskCheckForTimeOut+0x3e>
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e7fe      	b.n	8008de4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008de6:	f000 fe69 	bl	8009abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dea:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <xTaskCheckForTimeOut+0xb8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d102      	bne.n	8008e0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e023      	b.n	8008e52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <xTaskCheckForTimeOut+0xbc>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d007      	beq.n	8008e26 <xTaskCheckForTimeOut+0x7e>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d302      	bcc.n	8008e26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e015      	b.n	8008e52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d20b      	bcs.n	8008e48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ff9d 	bl	8008d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e004      	b.n	8008e52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e52:	f000 fe61 	bl	8009b18 <vPortExitCritical>

	return xReturn;
 8008e56:	69fb      	ldr	r3, [r7, #28]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000e64 	.word	0x20000e64
 8008e64:	20000e78 	.word	0x20000e78

08008e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <vTaskMissedYield+0x14>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	20000e74 	.word	0x20000e74

08008e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e88:	f000 f852 	bl	8008f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <prvIdleTask+0x28>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d9f9      	bls.n	8008e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <prvIdleTask+0x2c>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ea4:	e7f0      	b.n	8008e88 <prvIdleTask+0x8>
 8008ea6:	bf00      	nop
 8008ea8:	20000990 	.word	0x20000990
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e00c      	b.n	8008ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a12      	ldr	r2, [pc, #72]	; (8008f10 <prvInitialiseTaskLists+0x60>)
 8008ec8:	4413      	add	r3, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fcc2 	bl	8007854 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b37      	cmp	r3, #55	; 0x37
 8008eda:	d9ef      	bls.n	8008ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <prvInitialiseTaskLists+0x64>)
 8008ede:	f7fe fcb9 	bl	8007854 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ee2:	480d      	ldr	r0, [pc, #52]	; (8008f18 <prvInitialiseTaskLists+0x68>)
 8008ee4:	f7fe fcb6 	bl	8007854 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ee8:	480c      	ldr	r0, [pc, #48]	; (8008f1c <prvInitialiseTaskLists+0x6c>)
 8008eea:	f7fe fcb3 	bl	8007854 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008eee:	480c      	ldr	r0, [pc, #48]	; (8008f20 <prvInitialiseTaskLists+0x70>)
 8008ef0:	f7fe fcb0 	bl	8007854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ef4:	480b      	ldr	r0, [pc, #44]	; (8008f24 <prvInitialiseTaskLists+0x74>)
 8008ef6:	f7fe fcad 	bl	8007854 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <prvInitialiseTaskLists+0x78>)
 8008efc:	4a05      	ldr	r2, [pc, #20]	; (8008f14 <prvInitialiseTaskLists+0x64>)
 8008efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvInitialiseTaskLists+0x7c>)
 8008f02:	4a05      	ldr	r2, [pc, #20]	; (8008f18 <prvInitialiseTaskLists+0x68>)
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000990 	.word	0x20000990
 8008f14:	20000df0 	.word	0x20000df0
 8008f18:	20000e04 	.word	0x20000e04
 8008f1c:	20000e20 	.word	0x20000e20
 8008f20:	20000e34 	.word	0x20000e34
 8008f24:	20000e4c 	.word	0x20000e4c
 8008f28:	20000e18 	.word	0x20000e18
 8008f2c:	20000e1c 	.word	0x20000e1c

08008f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f36:	e019      	b.n	8008f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f38:	f000 fdc0 	bl	8009abc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <prvCheckTasksWaitingTermination+0x4c>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fd0d 	bl	8007968 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <prvCheckTasksWaitingTermination+0x50>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a0a      	ldr	r2, [pc, #40]	; (8008f80 <prvCheckTasksWaitingTermination+0x50>)
 8008f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f62:	f000 fdd9 	bl	8009b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f80e 	bl	8008f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f6c:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e1      	bne.n	8008f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000e34 	.word	0x20000e34
 8008f80:	20000e60 	.word	0x20000e60
 8008f84:	20000e48 	.word	0x20000e48

08008f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d108      	bne.n	8008fac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 ff68 	bl	8009e74 <vPortFree>
				vPortFree( pxTCB );
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 ff65 	bl	8009e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008faa:	e017      	b.n	8008fdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d103      	bne.n	8008fbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 ff5c 	bl	8009e74 <vPortFree>
	}
 8008fbc:	e00e      	b.n	8008fdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d009      	beq.n	8008fdc <prvDeleteTCB+0x54>
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	e7fe      	b.n	8008fda <prvDeleteTCB+0x52>
	}
 8008fdc:	bf00      	nop
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fea:	4b0c      	ldr	r3, [pc, #48]	; (800901c <prvResetNextTaskUnblockTime+0x38>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <prvResetNextTaskUnblockTime+0x3c>)
 8008ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ffc:	e008      	b.n	8009010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffe:	4b07      	ldr	r3, [pc, #28]	; (800901c <prvResetNextTaskUnblockTime+0x38>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	4a04      	ldr	r2, [pc, #16]	; (8009020 <prvResetNextTaskUnblockTime+0x3c>)
 800900e:	6013      	str	r3, [r2, #0]
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	20000e18 	.word	0x20000e18
 8009020:	20000e80 	.word	0x20000e80

08009024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800902a:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <xTaskGetSchedulerState+0x34>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009032:	2301      	movs	r3, #1
 8009034:	607b      	str	r3, [r7, #4]
 8009036:	e008      	b.n	800904a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009038:	4b08      	ldr	r3, [pc, #32]	; (800905c <xTaskGetSchedulerState+0x38>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009040:	2302      	movs	r3, #2
 8009042:	607b      	str	r3, [r7, #4]
 8009044:	e001      	b.n	800904a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009046:	2300      	movs	r3, #0
 8009048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800904a:	687b      	ldr	r3, [r7, #4]
	}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	20000e6c 	.word	0x20000e6c
 800905c:	20000e88 	.word	0x20000e88

08009060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d054      	beq.n	8009120 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009076:	4b2d      	ldr	r3, [pc, #180]	; (800912c <xTaskPriorityDisinherit+0xcc>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	429a      	cmp	r2, r3
 800907e:	d009      	beq.n	8009094 <xTaskPriorityDisinherit+0x34>
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e7fe      	b.n	8009092 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <xTaskPriorityDisinherit+0x50>
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60bb      	str	r3, [r7, #8]
 80090ae:	e7fe      	b.n	80090ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d02c      	beq.n	8009120 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d128      	bne.n	8009120 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fc48 	bl	8007968 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <xTaskPriorityDisinherit+0xd0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d903      	bls.n	8009100 <xTaskPriorityDisinherit+0xa0>
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4a0c      	ldr	r2, [pc, #48]	; (8009130 <xTaskPriorityDisinherit+0xd0>)
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4a09      	ldr	r2, [pc, #36]	; (8009134 <xTaskPriorityDisinherit+0xd4>)
 800910e:	441a      	add	r2, r3
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe fbc9 	bl	80078ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009120:	697b      	ldr	r3, [r7, #20]
	}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	2000098c 	.word	0x2000098c
 8009130:	20000e68 	.word	0x20000e68
 8009134:	20000990 	.word	0x20000990

08009138 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009142:	4b21      	ldr	r3, [pc, #132]	; (80091c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009148:	4b20      	ldr	r3, [pc, #128]	; (80091cc <prvAddCurrentTaskToDelayedList+0x94>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3304      	adds	r3, #4
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fc0a 	bl	8007968 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d10a      	bne.n	8009172 <prvAddCurrentTaskToDelayedList+0x3a>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d007      	beq.n	8009172 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009162:	4b1a      	ldr	r3, [pc, #104]	; (80091cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4819      	ldr	r0, [pc, #100]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800916c:	f7fe fb9f 	bl	80078ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009170:	e026      	b.n	80091c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800917a:	4b14      	ldr	r3, [pc, #80]	; (80091cc <prvAddCurrentTaskToDelayedList+0x94>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	429a      	cmp	r2, r3
 8009188:	d209      	bcs.n	800919e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800918a:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4b0f      	ldr	r3, [pc, #60]	; (80091cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f7fe fbad 	bl	80078f6 <vListInsert>
}
 800919c:	e010      	b.n	80091c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800919e:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <prvAddCurrentTaskToDelayedList+0x94>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f7fe fba3 	bl	80078f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d202      	bcs.n	80091c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091ba:	4a08      	ldr	r2, [pc, #32]	; (80091dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6013      	str	r3, [r2, #0]
}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000e64 	.word	0x20000e64
 80091cc:	2000098c 	.word	0x2000098c
 80091d0:	20000e4c 	.word	0x20000e4c
 80091d4:	20000e1c 	.word	0x20000e1c
 80091d8:	20000e18 	.word	0x20000e18
 80091dc:	20000e80 	.word	0x20000e80

080091e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08a      	sub	sp, #40	; 0x28
 80091e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091ea:	f000 faff 	bl	80097ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091ee:	4b1c      	ldr	r3, [pc, #112]	; (8009260 <xTimerCreateTimerTask+0x80>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d021      	beq.n	800923a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091fe:	1d3a      	adds	r2, r7, #4
 8009200:	f107 0108 	add.w	r1, r7, #8
 8009204:	f107 030c 	add.w	r3, r7, #12
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fb09 	bl	8007820 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	9202      	str	r2, [sp, #8]
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	2305      	movs	r3, #5
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	2300      	movs	r3, #0
 800921e:	460a      	mov	r2, r1
 8009220:	4910      	ldr	r1, [pc, #64]	; (8009264 <xTimerCreateTimerTask+0x84>)
 8009222:	4811      	ldr	r0, [pc, #68]	; (8009268 <xTimerCreateTimerTask+0x88>)
 8009224:	f7ff f92a 	bl	800847c <xTaskCreateStatic>
 8009228:	4602      	mov	r2, r0
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <xTimerCreateTimerTask+0x8c>)
 800922c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <xTimerCreateTimerTask+0x8c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009236:	2301      	movs	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d109      	bne.n	8009254 <xTimerCreateTimerTask+0x74>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	e7fe      	b.n	8009252 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009254:	697b      	ldr	r3, [r7, #20]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000ebc 	.word	0x20000ebc
 8009264:	0800c3a0 	.word	0x0800c3a0
 8009268:	080093a1 	.word	0x080093a1
 800926c:	20000ec0 	.word	0x20000ec0

08009270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08a      	sub	sp, #40	; 0x28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800927e:	2300      	movs	r3, #0
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d109      	bne.n	800929c <xTimerGenericCommand+0x2c>
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	623b      	str	r3, [r7, #32]
 800929a:	e7fe      	b.n	800929a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800929c:	4b19      	ldr	r3, [pc, #100]	; (8009304 <xTimerGenericCommand+0x94>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d02a      	beq.n	80092fa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	dc18      	bgt.n	80092e8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092b6:	f7ff feb5 	bl	8009024 <xTaskGetSchedulerState>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d109      	bne.n	80092d4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092c0:	4b10      	ldr	r3, [pc, #64]	; (8009304 <xTimerGenericCommand+0x94>)
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	f107 0110 	add.w	r1, r7, #16
 80092c8:	2300      	movs	r3, #0
 80092ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092cc:	f7fe fd00 	bl	8007cd0 <xQueueGenericSend>
 80092d0:	6278      	str	r0, [r7, #36]	; 0x24
 80092d2:	e012      	b.n	80092fa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <xTimerGenericCommand+0x94>)
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	f107 0110 	add.w	r1, r7, #16
 80092dc:	2300      	movs	r3, #0
 80092de:	2200      	movs	r2, #0
 80092e0:	f7fe fcf6 	bl	8007cd0 <xQueueGenericSend>
 80092e4:	6278      	str	r0, [r7, #36]	; 0x24
 80092e6:	e008      	b.n	80092fa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <xTimerGenericCommand+0x94>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	f107 0110 	add.w	r1, r7, #16
 80092f0:	2300      	movs	r3, #0
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	f7fe fde6 	bl	8007ec4 <xQueueGenericSendFromISR>
 80092f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3728      	adds	r7, #40	; 0x28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000ebc 	.word	0x20000ebc

08009308 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af02      	add	r7, sp, #8
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009312:	4b22      	ldr	r3, [pc, #136]	; (800939c <prvProcessExpiredTimer+0x94>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	3304      	adds	r3, #4
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fb21 	bl	8007968 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d021      	beq.n	8009378 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	18d1      	adds	r1, r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	6978      	ldr	r0, [r7, #20]
 8009342:	f000 f8d1 	bl	80094e8 <prvInsertTimerInActiveList>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01e      	beq.n	800938a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800934c:	2300      	movs	r3, #0
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	2300      	movs	r3, #0
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	2100      	movs	r1, #0
 8009356:	6978      	ldr	r0, [r7, #20]
 8009358:	f7ff ff8a 	bl	8009270 <xTimerGenericCommand>
 800935c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d112      	bne.n	800938a <prvProcessExpiredTimer+0x82>
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	e7fe      	b.n	8009376 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937e:	f023 0301 	bic.w	r3, r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	6978      	ldr	r0, [r7, #20]
 8009390:	4798      	blx	r3
}
 8009392:	bf00      	nop
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000eb4 	.word	0x20000eb4

080093a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093a8:	f107 0308 	add.w	r3, r7, #8
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 f857 	bl	8009460 <prvGetNextExpireTime>
 80093b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4619      	mov	r1, r3
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 f803 	bl	80093c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093be:	f000 f8d5 	bl	800956c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093c2:	e7f1      	b.n	80093a8 <prvTimerTask+0x8>

080093c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093ce:	f7ff fa57 	bl	8008880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093d2:	f107 0308 	add.w	r3, r7, #8
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f866 	bl	80094a8 <prvSampleTimeNow>
 80093dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d130      	bne.n	8009446 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10a      	bne.n	8009400 <prvProcessTimerOrBlockTask+0x3c>
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d806      	bhi.n	8009400 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093f2:	f7ff fa53 	bl	800889c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff ff85 	bl	8009308 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093fe:	e024      	b.n	800944a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d008      	beq.n	8009418 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009406:	4b13      	ldr	r3, [pc, #76]	; (8009454 <prvProcessTimerOrBlockTask+0x90>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <prvProcessTimerOrBlockTask+0x50>
 8009410:	2301      	movs	r3, #1
 8009412:	e000      	b.n	8009416 <prvProcessTimerOrBlockTask+0x52>
 8009414:	2300      	movs	r3, #0
 8009416:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009418:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <prvProcessTimerOrBlockTask+0x94>)
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	4619      	mov	r1, r3
 8009426:	f7fe fff5 	bl	8008414 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800942a:	f7ff fa37 	bl	800889c <xTaskResumeAll>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <prvProcessTimerOrBlockTask+0x98>)
 8009436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	f3bf 8f6f 	isb	sy
}
 8009444:	e001      	b.n	800944a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009446:	f7ff fa29 	bl	800889c <xTaskResumeAll>
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000eb8 	.word	0x20000eb8
 8009458:	20000ebc 	.word	0x20000ebc
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009468:	4b0e      	ldr	r3, [pc, #56]	; (80094a4 <prvGetNextExpireTime+0x44>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <prvGetNextExpireTime+0x16>
 8009472:	2201      	movs	r2, #1
 8009474:	e000      	b.n	8009478 <prvGetNextExpireTime+0x18>
 8009476:	2200      	movs	r2, #0
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d105      	bne.n	8009490 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <prvGetNextExpireTime+0x44>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e001      	b.n	8009494 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009494:	68fb      	ldr	r3, [r7, #12]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20000eb4 	.word	0x20000eb4

080094a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094b0:	f7ff fa90 	bl	80089d4 <xTaskGetTickCount>
 80094b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094b6:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <prvSampleTimeNow+0x3c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d205      	bcs.n	80094cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094c0:	f000 f930 	bl	8009724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	e002      	b.n	80094d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094d2:	4a04      	ldr	r2, [pc, #16]	; (80094e4 <prvSampleTimeNow+0x3c>)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094d8:	68fb      	ldr	r3, [r7, #12]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20000ec4 	.word	0x20000ec4

080094e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
 80094f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d812      	bhi.n	8009534 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	1ad2      	subs	r2, r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	429a      	cmp	r2, r3
 800951a:	d302      	bcc.n	8009522 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800951c:	2301      	movs	r3, #1
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e01b      	b.n	800955a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009522:	4b10      	ldr	r3, [pc, #64]	; (8009564 <prvInsertTimerInActiveList+0x7c>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3304      	adds	r3, #4
 800952a:	4619      	mov	r1, r3
 800952c:	4610      	mov	r0, r2
 800952e:	f7fe f9e2 	bl	80078f6 <vListInsert>
 8009532:	e012      	b.n	800955a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d206      	bcs.n	800954a <prvInsertTimerInActiveList+0x62>
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d302      	bcc.n	800954a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e007      	b.n	800955a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800954a:	4b07      	ldr	r3, [pc, #28]	; (8009568 <prvInsertTimerInActiveList+0x80>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fe f9ce 	bl	80078f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800955a:	697b      	ldr	r3, [r7, #20]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000eb8 	.word	0x20000eb8
 8009568:	20000eb4 	.word	0x20000eb4

0800956c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08e      	sub	sp, #56	; 0x38
 8009570:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009572:	e0c6      	b.n	8009702 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	da17      	bge.n	80095aa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800957a:	1d3b      	adds	r3, r7, #4
 800957c:	3304      	adds	r3, #4
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <prvProcessReceivedCommands+0x2e>
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	61fb      	str	r3, [r7, #28]
 8009598:	e7fe      	b.n	8009598 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a0:	6850      	ldr	r0, [r2, #4]
 80095a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a4:	6892      	ldr	r2, [r2, #8]
 80095a6:	4611      	mov	r1, r2
 80095a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f2c0 80a7 	blt.w	8009700 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	3304      	adds	r3, #4
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe f9d0 	bl	8007968 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095c8:	463b      	mov	r3, r7
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff ff6c 	bl	80094a8 <prvSampleTimeNow>
 80095d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	f200 8094 	bhi.w	8009702 <prvProcessReceivedCommands+0x196>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <prvProcessReceivedCommands+0x74>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	08009609 	.word	0x08009609
 80095e4:	08009609 	.word	0x08009609
 80095e8:	08009609 	.word	0x08009609
 80095ec:	0800967b 	.word	0x0800967b
 80095f0:	0800968f 	.word	0x0800968f
 80095f4:	080096d7 	.word	0x080096d7
 80095f8:	08009609 	.word	0x08009609
 80095fc:	08009609 	.word	0x08009609
 8009600:	0800967b 	.word	0x0800967b
 8009604:	0800968f 	.word	0x0800968f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	18d1      	adds	r1, r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009628:	f7ff ff5e 	bl	80094e8 <prvInsertTimerInActiveList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d067      	beq.n	8009702 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009640:	f003 0304 	and.w	r3, r3, #4
 8009644:	2b00      	cmp	r3, #0
 8009646:	d05c      	beq.n	8009702 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	441a      	add	r2, r3
 8009650:	2300      	movs	r3, #0
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	2100      	movs	r1, #0
 8009658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965a:	f7ff fe09 	bl	8009270 <xTimerGenericCommand>
 800965e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d14d      	bne.n	8009702 <prvProcessReceivedCommands+0x196>
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	e7fe      	b.n	8009678 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	b2da      	uxtb	r2, r3
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800968c:	e039      	b.n	8009702 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009694:	f043 0301 	orr.w	r3, r3, #1
 8009698:	b2da      	uxtb	r2, r3
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <prvProcessReceivedCommands+0x156>
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	e7fe      	b.n	80096c0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	699a      	ldr	r2, [r3, #24]
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	18d1      	adds	r1, r2, r3
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d0:	f7ff ff0a 	bl	80094e8 <prvInsertTimerInActiveList>
					break;
 80096d4:	e015      	b.n	8009702 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80096e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e6:	f000 fbc5 	bl	8009e74 <vPortFree>
 80096ea:	e00a      	b.n	8009702 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096fe:	e000      	b.n	8009702 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009700:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <prvProcessReceivedCommands+0x1b4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	1d39      	adds	r1, r7, #4
 8009708:	2200      	movs	r2, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fc6e 	bl	8007fec <xQueueReceive>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	f47f af2e 	bne.w	8009574 <prvProcessReceivedCommands+0x8>
	}
}
 8009718:	bf00      	nop
 800971a:	3730      	adds	r7, #48	; 0x30
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20000ebc 	.word	0x20000ebc

08009724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800972a:	e047      	b.n	80097bc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800972c:	4b2d      	ldr	r3, [pc, #180]	; (80097e4 <prvSwitchTimerLists+0xc0>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009736:	4b2b      	ldr	r3, [pc, #172]	; (80097e4 <prvSwitchTimerLists+0xc0>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3304      	adds	r3, #4
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe f90f 	bl	8007968 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d02d      	beq.n	80097bc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	4413      	add	r3, r2
 8009768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d90e      	bls.n	8009790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800977e:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <prvSwitchTimerLists+0xc0>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fe f8b4 	bl	80078f6 <vListInsert>
 800978e:	e015      	b.n	80097bc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009790:	2300      	movs	r3, #0
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2300      	movs	r3, #0
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	2100      	movs	r1, #0
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fd68 	bl	8009270 <xTimerGenericCommand>
 80097a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <prvSwitchTimerLists+0x98>
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	603b      	str	r3, [r7, #0]
 80097ba:	e7fe      	b.n	80097ba <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <prvSwitchTimerLists+0xc0>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1b2      	bne.n	800972c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097c6:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <prvSwitchTimerLists+0xc0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <prvSwitchTimerLists+0xc4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <prvSwitchTimerLists+0xc0>)
 80097d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097d4:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <prvSwitchTimerLists+0xc4>)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	6013      	str	r3, [r2, #0]
}
 80097da:	bf00      	nop
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000eb4 	.word	0x20000eb4
 80097e8:	20000eb8 	.word	0x20000eb8

080097ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097f2:	f000 f963 	bl	8009abc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <prvCheckForValidListAndQueue+0x60>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d120      	bne.n	8009840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097fe:	4814      	ldr	r0, [pc, #80]	; (8009850 <prvCheckForValidListAndQueue+0x64>)
 8009800:	f7fe f828 	bl	8007854 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009804:	4813      	ldr	r0, [pc, #76]	; (8009854 <prvCheckForValidListAndQueue+0x68>)
 8009806:	f7fe f825 	bl	8007854 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800980a:	4b13      	ldr	r3, [pc, #76]	; (8009858 <prvCheckForValidListAndQueue+0x6c>)
 800980c:	4a10      	ldr	r2, [pc, #64]	; (8009850 <prvCheckForValidListAndQueue+0x64>)
 800980e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009810:	4b12      	ldr	r3, [pc, #72]	; (800985c <prvCheckForValidListAndQueue+0x70>)
 8009812:	4a10      	ldr	r2, [pc, #64]	; (8009854 <prvCheckForValidListAndQueue+0x68>)
 8009814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009816:	2300      	movs	r3, #0
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4b11      	ldr	r3, [pc, #68]	; (8009860 <prvCheckForValidListAndQueue+0x74>)
 800981c:	4a11      	ldr	r2, [pc, #68]	; (8009864 <prvCheckForValidListAndQueue+0x78>)
 800981e:	2110      	movs	r1, #16
 8009820:	200a      	movs	r0, #10
 8009822:	f7fe f933 	bl	8007a8c <xQueueGenericCreateStatic>
 8009826:	4602      	mov	r2, r0
 8009828:	4b08      	ldr	r3, [pc, #32]	; (800984c <prvCheckForValidListAndQueue+0x60>)
 800982a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800982c:	4b07      	ldr	r3, [pc, #28]	; (800984c <prvCheckForValidListAndQueue+0x60>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <prvCheckForValidListAndQueue+0x60>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	490b      	ldr	r1, [pc, #44]	; (8009868 <prvCheckForValidListAndQueue+0x7c>)
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fdc2 	bl	80083c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009840:	f000 f96a 	bl	8009b18 <vPortExitCritical>
}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000ebc 	.word	0x20000ebc
 8009850:	20000e8c 	.word	0x20000e8c
 8009854:	20000ea0 	.word	0x20000ea0
 8009858:	20000eb4 	.word	0x20000eb4
 800985c:	20000eb8 	.word	0x20000eb8
 8009860:	20000f68 	.word	0x20000f68
 8009864:	20000ec8 	.word	0x20000ec8
 8009868:	0800c3a8 	.word	0x0800c3a8

0800986c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3b04      	subs	r3, #4
 800987c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3b04      	subs	r3, #4
 800988a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f023 0201 	bic.w	r2, r3, #1
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3b04      	subs	r3, #4
 800989a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800989c:	4a0c      	ldr	r2, [pc, #48]	; (80098d0 <pxPortInitialiseStack+0x64>)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3b14      	subs	r3, #20
 80098a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f06f 0202 	mvn.w	r2, #2
 80098ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3b20      	subs	r3, #32
 80098c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098c2:	68fb      	ldr	r3, [r7, #12]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	080098d5 	.word	0x080098d5

080098d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <prvTaskExitError+0x50>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d009      	beq.n	80098fc <prvTaskExitError+0x28>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e7fe      	b.n	80098fa <prvTaskExitError+0x26>
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800990e:	bf00      	nop
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0fc      	beq.n	8009910 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000058 	.word	0x20000058
	...

08009930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009930:	4b07      	ldr	r3, [pc, #28]	; (8009950 <pxCurrentTCBConst2>)
 8009932:	6819      	ldr	r1, [r3, #0]
 8009934:	6808      	ldr	r0, [r1, #0]
 8009936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993a:	f380 8809 	msr	PSP, r0
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f04f 0000 	mov.w	r0, #0
 8009946:	f380 8811 	msr	BASEPRI, r0
 800994a:	4770      	bx	lr
 800994c:	f3af 8000 	nop.w

08009950 <pxCurrentTCBConst2>:
 8009950:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop

08009958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009958:	4808      	ldr	r0, [pc, #32]	; (800997c <prvPortStartFirstTask+0x24>)
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	6800      	ldr	r0, [r0, #0]
 800995e:	f380 8808 	msr	MSP, r0
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f380 8814 	msr	CONTROL, r0
 800996a:	b662      	cpsie	i
 800996c:	b661      	cpsie	f
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	df00      	svc	0
 8009978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800997a:	bf00      	nop
 800997c:	e000ed08 	.word	0xe000ed08

08009980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009986:	4b44      	ldr	r3, [pc, #272]	; (8009a98 <xPortStartScheduler+0x118>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a44      	ldr	r2, [pc, #272]	; (8009a9c <xPortStartScheduler+0x11c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d109      	bne.n	80099a4 <xPortStartScheduler+0x24>
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	e7fe      	b.n	80099a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099a4:	4b3c      	ldr	r3, [pc, #240]	; (8009a98 <xPortStartScheduler+0x118>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a3d      	ldr	r2, [pc, #244]	; (8009aa0 <xPortStartScheduler+0x120>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d109      	bne.n	80099c2 <xPortStartScheduler+0x42>
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	e7fe      	b.n	80099c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099c2:	4b38      	ldr	r3, [pc, #224]	; (8009aa4 <xPortStartScheduler+0x124>)
 80099c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	22ff      	movs	r2, #255	; 0xff
 80099d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	4b30      	ldr	r3, [pc, #192]	; (8009aa8 <xPortStartScheduler+0x128>)
 80099e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099ea:	4b30      	ldr	r3, [pc, #192]	; (8009aac <xPortStartScheduler+0x12c>)
 80099ec:	2207      	movs	r2, #7
 80099ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099f0:	e009      	b.n	8009a06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80099f2:	4b2e      	ldr	r3, [pc, #184]	; (8009aac <xPortStartScheduler+0x12c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4a2c      	ldr	r2, [pc, #176]	; (8009aac <xPortStartScheduler+0x12c>)
 80099fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0e:	2b80      	cmp	r3, #128	; 0x80
 8009a10:	d0ef      	beq.n	80099f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a12:	4b26      	ldr	r3, [pc, #152]	; (8009aac <xPortStartScheduler+0x12c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f1c3 0307 	rsb	r3, r3, #7
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d009      	beq.n	8009a32 <xPortStartScheduler+0xb2>
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	e7fe      	b.n	8009a30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a32:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <xPortStartScheduler+0x12c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	4a1c      	ldr	r2, [pc, #112]	; (8009aac <xPortStartScheduler+0x12c>)
 8009a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <xPortStartScheduler+0x12c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a44:	4a19      	ldr	r2, [pc, #100]	; (8009aac <xPortStartScheduler+0x12c>)
 8009a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a50:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <xPortStartScheduler+0x130>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a16      	ldr	r2, [pc, #88]	; (8009ab0 <xPortStartScheduler+0x130>)
 8009a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a5c:	4b14      	ldr	r3, [pc, #80]	; (8009ab0 <xPortStartScheduler+0x130>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a13      	ldr	r2, [pc, #76]	; (8009ab0 <xPortStartScheduler+0x130>)
 8009a62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a68:	f000 f8d6 	bl	8009c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a6c:	4b11      	ldr	r3, [pc, #68]	; (8009ab4 <xPortStartScheduler+0x134>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a72:	f000 f8f5 	bl	8009c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <xPortStartScheduler+0x138>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a0f      	ldr	r2, [pc, #60]	; (8009ab8 <xPortStartScheduler+0x138>)
 8009a7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a82:	f7ff ff69 	bl	8009958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a86:	f7ff f86d 	bl	8008b64 <vTaskSwitchContext>
	prvTaskExitError();
 8009a8a:	f7ff ff23 	bl	80098d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000ed00 	.word	0xe000ed00
 8009a9c:	410fc271 	.word	0x410fc271
 8009aa0:	410fc270 	.word	0x410fc270
 8009aa4:	e000e400 	.word	0xe000e400
 8009aa8:	20000fb8 	.word	0x20000fb8
 8009aac:	20000fbc 	.word	0x20000fbc
 8009ab0:	e000ed20 	.word	0xe000ed20
 8009ab4:	20000058 	.word	0x20000058
 8009ab8:	e000ef34 	.word	0xe000ef34

08009abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ad4:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <vPortEnterCritical+0x54>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	4a0d      	ldr	r2, [pc, #52]	; (8009b10 <vPortEnterCritical+0x54>)
 8009adc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <vPortEnterCritical+0x54>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d10e      	bne.n	8009b04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <vPortEnterCritical+0x58>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d009      	beq.n	8009b04 <vPortEnterCritical+0x48>
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	603b      	str	r3, [r7, #0]
 8009b02:	e7fe      	b.n	8009b02 <vPortEnterCritical+0x46>
	}
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	20000058 	.word	0x20000058
 8009b14:	e000ed04 	.word	0xe000ed04

08009b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b1e:	4b11      	ldr	r3, [pc, #68]	; (8009b64 <vPortExitCritical+0x4c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <vPortExitCritical+0x22>
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	607b      	str	r3, [r7, #4]
 8009b38:	e7fe      	b.n	8009b38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009b3a:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <vPortExitCritical+0x4c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	4a08      	ldr	r2, [pc, #32]	; (8009b64 <vPortExitCritical+0x4c>)
 8009b42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <vPortExitCritical+0x4c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <vPortExitCritical+0x3e>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20000058 	.word	0x20000058
	...

08009b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b70:	f3ef 8009 	mrs	r0, PSP
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <pxCurrentTCBConst>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	f01e 0f10 	tst.w	lr, #16
 8009b80:	bf08      	it	eq
 8009b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8a:	6010      	str	r0, [r2, #0]
 8009b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b94:	f380 8811 	msr	BASEPRI, r0
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f7fe ffe0 	bl	8008b64 <vTaskSwitchContext>
 8009ba4:	f04f 0000 	mov.w	r0, #0
 8009ba8:	f380 8811 	msr	BASEPRI, r0
 8009bac:	bc09      	pop	{r0, r3}
 8009bae:	6819      	ldr	r1, [r3, #0]
 8009bb0:	6808      	ldr	r0, [r1, #0]
 8009bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb6:	f01e 0f10 	tst.w	lr, #16
 8009bba:	bf08      	it	eq
 8009bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bc0:	f380 8809 	msr	PSP, r0
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	f3af 8000 	nop.w

08009bd0 <pxCurrentTCBConst>:
 8009bd0:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop

08009bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bf0:	f7fe ff00 	bl	80089f4 <xTaskIncrementTick>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bfa:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <SysTick_Handler+0x3c>)
 8009bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	2300      	movs	r3, #0
 8009c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	e000ed04 	.word	0xe000ed04

08009c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c1c:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <vPortSetupTimerInterrupt+0x34>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <vPortSetupTimerInterrupt+0x38>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <vPortSetupTimerInterrupt+0x3c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a0a      	ldr	r2, [pc, #40]	; (8009c58 <vPortSetupTimerInterrupt+0x40>)
 8009c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c32:	099b      	lsrs	r3, r3, #6
 8009c34:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <vPortSetupTimerInterrupt+0x44>)
 8009c36:	3b01      	subs	r3, #1
 8009c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c3a:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <vPortSetupTimerInterrupt+0x34>)
 8009c3c:	2207      	movs	r2, #7
 8009c3e:	601a      	str	r2, [r3, #0]
}
 8009c40:	bf00      	nop
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	e000e010 	.word	0xe000e010
 8009c50:	e000e018 	.word	0xe000e018
 8009c54:	2000004c 	.word	0x2000004c
 8009c58:	10624dd3 	.word	0x10624dd3
 8009c5c:	e000e014 	.word	0xe000e014

08009c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c70 <vPortEnableVFP+0x10>
 8009c64:	6801      	ldr	r1, [r0, #0]
 8009c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c6a:	6001      	str	r1, [r0, #0]
 8009c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c6e:	bf00      	nop
 8009c70:	e000ed88 	.word	0xe000ed88

08009c74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c7a:	f3ef 8305 	mrs	r3, IPSR
 8009c7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b0f      	cmp	r3, #15
 8009c84:	d913      	bls.n	8009cae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c86:	4a16      	ldr	r2, [pc, #88]	; (8009ce0 <vPortValidateInterruptPriority+0x6c>)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c90:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <vPortValidateInterruptPriority+0x70>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	7afa      	ldrb	r2, [r7, #11]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d209      	bcs.n	8009cae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	607b      	str	r3, [r7, #4]
 8009cac:	e7fe      	b.n	8009cac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cae:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <vPortValidateInterruptPriority+0x74>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cb6:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <vPortValidateInterruptPriority+0x78>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d909      	bls.n	8009cd2 <vPortValidateInterruptPriority+0x5e>
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	e7fe      	b.n	8009cd0 <vPortValidateInterruptPriority+0x5c>
	}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	e000e3f0 	.word	0xe000e3f0
 8009ce4:	20000fb8 	.word	0x20000fb8
 8009ce8:	e000ed0c 	.word	0xe000ed0c
 8009cec:	20000fbc 	.word	0x20000fbc

08009cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08a      	sub	sp, #40	; 0x28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cfc:	f7fe fdc0 	bl	8008880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d00:	4b57      	ldr	r3, [pc, #348]	; (8009e60 <pvPortMalloc+0x170>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d08:	f000 f90c 	bl	8009f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d0c:	4b55      	ldr	r3, [pc, #340]	; (8009e64 <pvPortMalloc+0x174>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4013      	ands	r3, r2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f040 808c 	bne.w	8009e32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01c      	beq.n	8009d5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009d20:	2208      	movs	r2, #8
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4413      	add	r3, r2
 8009d26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d013      	beq.n	8009d5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f023 0307 	bic.w	r3, r3, #7
 8009d38:	3308      	adds	r3, #8
 8009d3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <pvPortMalloc+0x6a>
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e7fe      	b.n	8009d58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d068      	beq.n	8009e32 <pvPortMalloc+0x142>
 8009d60:	4b41      	ldr	r3, [pc, #260]	; (8009e68 <pvPortMalloc+0x178>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d863      	bhi.n	8009e32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d6a:	4b40      	ldr	r3, [pc, #256]	; (8009e6c <pvPortMalloc+0x17c>)
 8009d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d6e:	4b3f      	ldr	r3, [pc, #252]	; (8009e6c <pvPortMalloc+0x17c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d74:	e004      	b.n	8009d80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d903      	bls.n	8009d92 <pvPortMalloc+0xa2>
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f1      	bne.n	8009d76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d92:	4b33      	ldr	r3, [pc, #204]	; (8009e60 <pvPortMalloc+0x170>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d04a      	beq.n	8009e32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2208      	movs	r2, #8
 8009da2:	4413      	add	r3, r2
 8009da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	1ad2      	subs	r2, r2, r3
 8009db6:	2308      	movs	r3, #8
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d91e      	bls.n	8009dfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <pvPortMalloc+0xf4>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	e7fe      	b.n	8009de2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	1ad2      	subs	r2, r2, r3
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009df6:	69b8      	ldr	r0, [r7, #24]
 8009df8:	f000 f8f6 	bl	8009fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dfc:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <pvPortMalloc+0x178>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	4a18      	ldr	r2, [pc, #96]	; (8009e68 <pvPortMalloc+0x178>)
 8009e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e0a:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <pvPortMalloc+0x178>)
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b18      	ldr	r3, [pc, #96]	; (8009e70 <pvPortMalloc+0x180>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d203      	bcs.n	8009e1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <pvPortMalloc+0x178>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a15      	ldr	r2, [pc, #84]	; (8009e70 <pvPortMalloc+0x180>)
 8009e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <pvPortMalloc+0x174>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	431a      	orrs	r2, r3
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e32:	f7fe fd33 	bl	800889c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d009      	beq.n	8009e54 <pvPortMalloc+0x164>
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	e7fe      	b.n	8009e52 <pvPortMalloc+0x162>
	return pvReturn;
 8009e54:	69fb      	ldr	r3, [r7, #28]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3728      	adds	r7, #40	; 0x28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20001f68 	.word	0x20001f68
 8009e64:	20001f74 	.word	0x20001f74
 8009e68:	20001f6c 	.word	0x20001f6c
 8009e6c:	20001f60 	.word	0x20001f60
 8009e70:	20001f70 	.word	0x20001f70

08009e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d046      	beq.n	8009f14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e86:	2308      	movs	r3, #8
 8009e88:	425b      	negs	r3, r3
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	4b20      	ldr	r3, [pc, #128]	; (8009f1c <vPortFree+0xa8>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <vPortFree+0x42>
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	e7fe      	b.n	8009eb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d009      	beq.n	8009ed2 <vPortFree+0x5e>
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	60bb      	str	r3, [r7, #8]
 8009ed0:	e7fe      	b.n	8009ed0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <vPortFree+0xa8>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d019      	beq.n	8009f14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d115      	bne.n	8009f14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <vPortFree+0xa8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ef8:	f7fe fcc2 	bl	8008880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <vPortFree+0xac>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4413      	add	r3, r2
 8009f06:	4a06      	ldr	r2, [pc, #24]	; (8009f20 <vPortFree+0xac>)
 8009f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f0a:	6938      	ldr	r0, [r7, #16]
 8009f0c:	f000 f86c 	bl	8009fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f10:	f7fe fcc4 	bl	800889c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f14:	bf00      	nop
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20001f74 	.word	0x20001f74
 8009f20:	20001f6c 	.word	0x20001f6c

08009f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f2a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f30:	4b27      	ldr	r3, [pc, #156]	; (8009fd0 <prvHeapInit+0xac>)
 8009f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00c      	beq.n	8009f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3307      	adds	r3, #7
 8009f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <prvHeapInit+0xac>)
 8009f54:	4413      	add	r3, r2
 8009f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f5c:	4a1d      	ldr	r2, [pc, #116]	; (8009fd4 <prvHeapInit+0xb0>)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f62:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <prvHeapInit+0xb0>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f70:	2208      	movs	r2, #8
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4a15      	ldr	r2, [pc, #84]	; (8009fd8 <prvHeapInit+0xb4>)
 8009f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f86:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <prvHeapInit+0xb4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f8e:	4b12      	ldr	r3, [pc, #72]	; (8009fd8 <prvHeapInit+0xb4>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <prvHeapInit+0xb4>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a0a      	ldr	r2, [pc, #40]	; (8009fdc <prvHeapInit+0xb8>)
 8009fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	4a09      	ldr	r2, [pc, #36]	; (8009fe0 <prvHeapInit+0xbc>)
 8009fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fbc:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <prvHeapInit+0xc0>)
 8009fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fc2:	601a      	str	r2, [r3, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000fc0 	.word	0x20000fc0
 8009fd4:	20001f60 	.word	0x20001f60
 8009fd8:	20001f68 	.word	0x20001f68
 8009fdc:	20001f70 	.word	0x20001f70
 8009fe0:	20001f6c 	.word	0x20001f6c
 8009fe4:	20001f74 	.word	0x20001f74

08009fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ff0:	4b28      	ldr	r3, [pc, #160]	; (800a094 <prvInsertBlockIntoFreeList+0xac>)
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e002      	b.n	8009ffc <prvInsertBlockIntoFreeList+0x14>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	429a      	cmp	r2, r3
 800a004:	d8f7      	bhi.n	8009ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	4413      	add	r3, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d108      	bne.n	800a02a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	441a      	add	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	441a      	add	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d118      	bne.n	800a070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	4b15      	ldr	r3, [pc, #84]	; (800a098 <prvInsertBlockIntoFreeList+0xb0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d00d      	beq.n	800a066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	441a      	add	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	e008      	b.n	800a078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a066:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <prvInsertBlockIntoFreeList+0xb0>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	e003      	b.n	800a078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d002      	beq.n	800a086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a086:	bf00      	nop
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20001f60 	.word	0x20001f60
 800a098:	20001f68 	.word	0x20001f68

0800a09c <__errno>:
 800a09c:	4b01      	ldr	r3, [pc, #4]	; (800a0a4 <__errno+0x8>)
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	2000005c 	.word	0x2000005c

0800a0a8 <__libc_init_array>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	4e0d      	ldr	r6, [pc, #52]	; (800a0e0 <__libc_init_array+0x38>)
 800a0ac:	4c0d      	ldr	r4, [pc, #52]	; (800a0e4 <__libc_init_array+0x3c>)
 800a0ae:	1ba4      	subs	r4, r4, r6
 800a0b0:	10a4      	asrs	r4, r4, #2
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	42a5      	cmp	r5, r4
 800a0b6:	d109      	bne.n	800a0cc <__libc_init_array+0x24>
 800a0b8:	4e0b      	ldr	r6, [pc, #44]	; (800a0e8 <__libc_init_array+0x40>)
 800a0ba:	4c0c      	ldr	r4, [pc, #48]	; (800a0ec <__libc_init_array+0x44>)
 800a0bc:	f002 f882 	bl	800c1c4 <_init>
 800a0c0:	1ba4      	subs	r4, r4, r6
 800a0c2:	10a4      	asrs	r4, r4, #2
 800a0c4:	2500      	movs	r5, #0
 800a0c6:	42a5      	cmp	r5, r4
 800a0c8:	d105      	bne.n	800a0d6 <__libc_init_array+0x2e>
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0d0:	4798      	blx	r3
 800a0d2:	3501      	adds	r5, #1
 800a0d4:	e7ee      	b.n	800a0b4 <__libc_init_array+0xc>
 800a0d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0da:	4798      	blx	r3
 800a0dc:	3501      	adds	r5, #1
 800a0de:	e7f2      	b.n	800a0c6 <__libc_init_array+0x1e>
 800a0e0:	0800c690 	.word	0x0800c690
 800a0e4:	0800c690 	.word	0x0800c690
 800a0e8:	0800c690 	.word	0x0800c690
 800a0ec:	0800c694 	.word	0x0800c694

0800a0f0 <memcpy>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	1e43      	subs	r3, r0, #1
 800a0f4:	440a      	add	r2, r1
 800a0f6:	4291      	cmp	r1, r2
 800a0f8:	d100      	bne.n	800a0fc <memcpy+0xc>
 800a0fa:	bd10      	pop	{r4, pc}
 800a0fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a100:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a104:	e7f7      	b.n	800a0f6 <memcpy+0x6>

0800a106 <memset>:
 800a106:	4402      	add	r2, r0
 800a108:	4603      	mov	r3, r0
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d100      	bne.n	800a110 <memset+0xa>
 800a10e:	4770      	bx	lr
 800a110:	f803 1b01 	strb.w	r1, [r3], #1
 800a114:	e7f9      	b.n	800a10a <memset+0x4>

0800a116 <__cvt>:
 800a116:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a11a:	ec55 4b10 	vmov	r4, r5, d0
 800a11e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a120:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a124:	2d00      	cmp	r5, #0
 800a126:	460e      	mov	r6, r1
 800a128:	4691      	mov	r9, r2
 800a12a:	4619      	mov	r1, r3
 800a12c:	bfb8      	it	lt
 800a12e:	4622      	movlt	r2, r4
 800a130:	462b      	mov	r3, r5
 800a132:	f027 0720 	bic.w	r7, r7, #32
 800a136:	bfbb      	ittet	lt
 800a138:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a13c:	461d      	movlt	r5, r3
 800a13e:	2300      	movge	r3, #0
 800a140:	232d      	movlt	r3, #45	; 0x2d
 800a142:	bfb8      	it	lt
 800a144:	4614      	movlt	r4, r2
 800a146:	2f46      	cmp	r7, #70	; 0x46
 800a148:	700b      	strb	r3, [r1, #0]
 800a14a:	d004      	beq.n	800a156 <__cvt+0x40>
 800a14c:	2f45      	cmp	r7, #69	; 0x45
 800a14e:	d100      	bne.n	800a152 <__cvt+0x3c>
 800a150:	3601      	adds	r6, #1
 800a152:	2102      	movs	r1, #2
 800a154:	e000      	b.n	800a158 <__cvt+0x42>
 800a156:	2103      	movs	r1, #3
 800a158:	ab03      	add	r3, sp, #12
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	ab02      	add	r3, sp, #8
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	4632      	mov	r2, r6
 800a162:	4653      	mov	r3, sl
 800a164:	ec45 4b10 	vmov	d0, r4, r5
 800a168:	f000 fd02 	bl	800ab70 <_dtoa_r>
 800a16c:	2f47      	cmp	r7, #71	; 0x47
 800a16e:	4680      	mov	r8, r0
 800a170:	d102      	bne.n	800a178 <__cvt+0x62>
 800a172:	f019 0f01 	tst.w	r9, #1
 800a176:	d026      	beq.n	800a1c6 <__cvt+0xb0>
 800a178:	2f46      	cmp	r7, #70	; 0x46
 800a17a:	eb08 0906 	add.w	r9, r8, r6
 800a17e:	d111      	bne.n	800a1a4 <__cvt+0x8e>
 800a180:	f898 3000 	ldrb.w	r3, [r8]
 800a184:	2b30      	cmp	r3, #48	; 0x30
 800a186:	d10a      	bne.n	800a19e <__cvt+0x88>
 800a188:	2200      	movs	r2, #0
 800a18a:	2300      	movs	r3, #0
 800a18c:	4620      	mov	r0, r4
 800a18e:	4629      	mov	r1, r5
 800a190:	f7f6 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a194:	b918      	cbnz	r0, 800a19e <__cvt+0x88>
 800a196:	f1c6 0601 	rsb	r6, r6, #1
 800a19a:	f8ca 6000 	str.w	r6, [sl]
 800a19e:	f8da 3000 	ldr.w	r3, [sl]
 800a1a2:	4499      	add	r9, r3
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7f6 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b0:	b938      	cbnz	r0, 800a1c2 <__cvt+0xac>
 800a1b2:	2230      	movs	r2, #48	; 0x30
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	454b      	cmp	r3, r9
 800a1b8:	d205      	bcs.n	800a1c6 <__cvt+0xb0>
 800a1ba:	1c59      	adds	r1, r3, #1
 800a1bc:	9103      	str	r1, [sp, #12]
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	e7f8      	b.n	800a1b4 <__cvt+0x9e>
 800a1c2:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ca:	eba3 0308 	sub.w	r3, r3, r8
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	b004      	add	sp, #16
 800a1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a1d8 <__exponent>:
 800a1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1da:	2900      	cmp	r1, #0
 800a1dc:	4604      	mov	r4, r0
 800a1de:	bfba      	itte	lt
 800a1e0:	4249      	neglt	r1, r1
 800a1e2:	232d      	movlt	r3, #45	; 0x2d
 800a1e4:	232b      	movge	r3, #43	; 0x2b
 800a1e6:	2909      	cmp	r1, #9
 800a1e8:	f804 2b02 	strb.w	r2, [r4], #2
 800a1ec:	7043      	strb	r3, [r0, #1]
 800a1ee:	dd20      	ble.n	800a232 <__exponent+0x5a>
 800a1f0:	f10d 0307 	add.w	r3, sp, #7
 800a1f4:	461f      	mov	r7, r3
 800a1f6:	260a      	movs	r6, #10
 800a1f8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1fc:	fb06 1115 	mls	r1, r6, r5, r1
 800a200:	3130      	adds	r1, #48	; 0x30
 800a202:	2d09      	cmp	r5, #9
 800a204:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a208:	f103 32ff 	add.w	r2, r3, #4294967295
 800a20c:	4629      	mov	r1, r5
 800a20e:	dc09      	bgt.n	800a224 <__exponent+0x4c>
 800a210:	3130      	adds	r1, #48	; 0x30
 800a212:	3b02      	subs	r3, #2
 800a214:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a218:	42bb      	cmp	r3, r7
 800a21a:	4622      	mov	r2, r4
 800a21c:	d304      	bcc.n	800a228 <__exponent+0x50>
 800a21e:	1a10      	subs	r0, r2, r0
 800a220:	b003      	add	sp, #12
 800a222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a224:	4613      	mov	r3, r2
 800a226:	e7e7      	b.n	800a1f8 <__exponent+0x20>
 800a228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a22c:	f804 2b01 	strb.w	r2, [r4], #1
 800a230:	e7f2      	b.n	800a218 <__exponent+0x40>
 800a232:	2330      	movs	r3, #48	; 0x30
 800a234:	4419      	add	r1, r3
 800a236:	7083      	strb	r3, [r0, #2]
 800a238:	1d02      	adds	r2, r0, #4
 800a23a:	70c1      	strb	r1, [r0, #3]
 800a23c:	e7ef      	b.n	800a21e <__exponent+0x46>
	...

0800a240 <_printf_float>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	b08d      	sub	sp, #52	; 0x34
 800a246:	460c      	mov	r4, r1
 800a248:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a24c:	4616      	mov	r6, r2
 800a24e:	461f      	mov	r7, r3
 800a250:	4605      	mov	r5, r0
 800a252:	f001 fa45 	bl	800b6e0 <_localeconv_r>
 800a256:	6803      	ldr	r3, [r0, #0]
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7f5 ffb8 	bl	80001d0 <strlen>
 800a260:	2300      	movs	r3, #0
 800a262:	930a      	str	r3, [sp, #40]	; 0x28
 800a264:	f8d8 3000 	ldr.w	r3, [r8]
 800a268:	9005      	str	r0, [sp, #20]
 800a26a:	3307      	adds	r3, #7
 800a26c:	f023 0307 	bic.w	r3, r3, #7
 800a270:	f103 0208 	add.w	r2, r3, #8
 800a274:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a278:	f8d4 b000 	ldr.w	fp, [r4]
 800a27c:	f8c8 2000 	str.w	r2, [r8]
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a288:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a28c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	f8cd 8018 	str.w	r8, [sp, #24]
 800a296:	f04f 32ff 	mov.w	r2, #4294967295
 800a29a:	4ba7      	ldr	r3, [pc, #668]	; (800a538 <_printf_float+0x2f8>)
 800a29c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2a0:	f7f6 fc44 	bl	8000b2c <__aeabi_dcmpun>
 800a2a4:	bb70      	cbnz	r0, 800a304 <_printf_float+0xc4>
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	4ba3      	ldr	r3, [pc, #652]	; (800a538 <_printf_float+0x2f8>)
 800a2ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b0:	f7f6 fc1e 	bl	8000af0 <__aeabi_dcmple>
 800a2b4:	bb30      	cbnz	r0, 800a304 <_printf_float+0xc4>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f6 fc0d 	bl	8000adc <__aeabi_dcmplt>
 800a2c2:	b110      	cbz	r0, 800a2ca <_printf_float+0x8a>
 800a2c4:	232d      	movs	r3, #45	; 0x2d
 800a2c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ca:	4a9c      	ldr	r2, [pc, #624]	; (800a53c <_printf_float+0x2fc>)
 800a2cc:	4b9c      	ldr	r3, [pc, #624]	; (800a540 <_printf_float+0x300>)
 800a2ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a2d2:	bf8c      	ite	hi
 800a2d4:	4690      	movhi	r8, r2
 800a2d6:	4698      	movls	r8, r3
 800a2d8:	2303      	movs	r3, #3
 800a2da:	f02b 0204 	bic.w	r2, fp, #4
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	6022      	str	r2, [r4, #0]
 800a2e2:	f04f 0900 	mov.w	r9, #0
 800a2e6:	9700      	str	r7, [sp, #0]
 800a2e8:	4633      	mov	r3, r6
 800a2ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f000 f9e6 	bl	800a6c0 <_printf_common>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	f040 808d 	bne.w	800a414 <_printf_float+0x1d4>
 800a2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fe:	b00d      	add	sp, #52	; 0x34
 800a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	4642      	mov	r2, r8
 800a306:	464b      	mov	r3, r9
 800a308:	4640      	mov	r0, r8
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f6 fc0e 	bl	8000b2c <__aeabi_dcmpun>
 800a310:	b110      	cbz	r0, 800a318 <_printf_float+0xd8>
 800a312:	4a8c      	ldr	r2, [pc, #560]	; (800a544 <_printf_float+0x304>)
 800a314:	4b8c      	ldr	r3, [pc, #560]	; (800a548 <_printf_float+0x308>)
 800a316:	e7da      	b.n	800a2ce <_printf_float+0x8e>
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	1c4b      	adds	r3, r1, #1
 800a31c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a320:	a80a      	add	r0, sp, #40	; 0x28
 800a322:	d13e      	bne.n	800a3a2 <_printf_float+0x162>
 800a324:	2306      	movs	r3, #6
 800a326:	6063      	str	r3, [r4, #4]
 800a328:	2300      	movs	r3, #0
 800a32a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a32e:	ab09      	add	r3, sp, #36	; 0x24
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	ec49 8b10 	vmov	d0, r8, r9
 800a336:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	f8cd a004 	str.w	sl, [sp, #4]
 800a340:	6861      	ldr	r1, [r4, #4]
 800a342:	4628      	mov	r0, r5
 800a344:	f7ff fee7 	bl	800a116 <__cvt>
 800a348:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a34c:	2b47      	cmp	r3, #71	; 0x47
 800a34e:	4680      	mov	r8, r0
 800a350:	d109      	bne.n	800a366 <_printf_float+0x126>
 800a352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a354:	1cd8      	adds	r0, r3, #3
 800a356:	db02      	blt.n	800a35e <_printf_float+0x11e>
 800a358:	6862      	ldr	r2, [r4, #4]
 800a35a:	4293      	cmp	r3, r2
 800a35c:	dd47      	ble.n	800a3ee <_printf_float+0x1ae>
 800a35e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a362:	fa5f fa8a 	uxtb.w	sl, sl
 800a366:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a36a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a36c:	d824      	bhi.n	800a3b8 <_printf_float+0x178>
 800a36e:	3901      	subs	r1, #1
 800a370:	4652      	mov	r2, sl
 800a372:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a376:	9109      	str	r1, [sp, #36]	; 0x24
 800a378:	f7ff ff2e 	bl	800a1d8 <__exponent>
 800a37c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37e:	1813      	adds	r3, r2, r0
 800a380:	2a01      	cmp	r2, #1
 800a382:	4681      	mov	r9, r0
 800a384:	6123      	str	r3, [r4, #16]
 800a386:	dc02      	bgt.n	800a38e <_printf_float+0x14e>
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	07d1      	lsls	r1, r2, #31
 800a38c:	d501      	bpl.n	800a392 <_printf_float+0x152>
 800a38e:	3301      	adds	r3, #1
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0a5      	beq.n	800a2e6 <_printf_float+0xa6>
 800a39a:	232d      	movs	r3, #45	; 0x2d
 800a39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a0:	e7a1      	b.n	800a2e6 <_printf_float+0xa6>
 800a3a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a3a6:	f000 8177 	beq.w	800a698 <_printf_float+0x458>
 800a3aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a3ae:	d1bb      	bne.n	800a328 <_printf_float+0xe8>
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d1b9      	bne.n	800a328 <_printf_float+0xe8>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e7b6      	b.n	800a326 <_printf_float+0xe6>
 800a3b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a3bc:	d119      	bne.n	800a3f2 <_printf_float+0x1b2>
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	dd0c      	ble.n	800a3de <_printf_float+0x19e>
 800a3c4:	6121      	str	r1, [r4, #16]
 800a3c6:	b913      	cbnz	r3, 800a3ce <_printf_float+0x18e>
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	07d2      	lsls	r2, r2, #31
 800a3cc:	d502      	bpl.n	800a3d4 <_printf_float+0x194>
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	440b      	add	r3, r1
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a3d8:	f04f 0900 	mov.w	r9, #0
 800a3dc:	e7d9      	b.n	800a392 <_printf_float+0x152>
 800a3de:	b913      	cbnz	r3, 800a3e6 <_printf_float+0x1a6>
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	07d0      	lsls	r0, r2, #31
 800a3e4:	d501      	bpl.n	800a3ea <_printf_float+0x1aa>
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	e7f3      	b.n	800a3d2 <_printf_float+0x192>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e7f1      	b.n	800a3d2 <_printf_float+0x192>
 800a3ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a3f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	db05      	blt.n	800a406 <_printf_float+0x1c6>
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	6123      	str	r3, [r4, #16]
 800a3fe:	07d1      	lsls	r1, r2, #31
 800a400:	d5e8      	bpl.n	800a3d4 <_printf_float+0x194>
 800a402:	3301      	adds	r3, #1
 800a404:	e7e5      	b.n	800a3d2 <_printf_float+0x192>
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfd4      	ite	le
 800a40a:	f1c3 0302 	rsble	r3, r3, #2
 800a40e:	2301      	movgt	r3, #1
 800a410:	4413      	add	r3, r2
 800a412:	e7de      	b.n	800a3d2 <_printf_float+0x192>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	055a      	lsls	r2, r3, #21
 800a418:	d407      	bmi.n	800a42a <_printf_float+0x1ea>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	4642      	mov	r2, r8
 800a41e:	4631      	mov	r1, r6
 800a420:	4628      	mov	r0, r5
 800a422:	47b8      	blx	r7
 800a424:	3001      	adds	r0, #1
 800a426:	d12b      	bne.n	800a480 <_printf_float+0x240>
 800a428:	e767      	b.n	800a2fa <_printf_float+0xba>
 800a42a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a42e:	f240 80dc 	bls.w	800a5ea <_printf_float+0x3aa>
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a43a:	f7f6 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d033      	beq.n	800a4aa <_printf_float+0x26a>
 800a442:	2301      	movs	r3, #1
 800a444:	4a41      	ldr	r2, [pc, #260]	; (800a54c <_printf_float+0x30c>)
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	f43f af54 	beq.w	800a2fa <_printf_float+0xba>
 800a452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a456:	429a      	cmp	r2, r3
 800a458:	db02      	blt.n	800a460 <_printf_float+0x220>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	07d8      	lsls	r0, r3, #31
 800a45e:	d50f      	bpl.n	800a480 <_printf_float+0x240>
 800a460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a464:	4631      	mov	r1, r6
 800a466:	4628      	mov	r0, r5
 800a468:	47b8      	blx	r7
 800a46a:	3001      	adds	r0, #1
 800a46c:	f43f af45 	beq.w	800a2fa <_printf_float+0xba>
 800a470:	f04f 0800 	mov.w	r8, #0
 800a474:	f104 091a 	add.w	r9, r4, #26
 800a478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47a:	3b01      	subs	r3, #1
 800a47c:	4543      	cmp	r3, r8
 800a47e:	dc09      	bgt.n	800a494 <_printf_float+0x254>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	079b      	lsls	r3, r3, #30
 800a484:	f100 8103 	bmi.w	800a68e <_printf_float+0x44e>
 800a488:	68e0      	ldr	r0, [r4, #12]
 800a48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48c:	4298      	cmp	r0, r3
 800a48e:	bfb8      	it	lt
 800a490:	4618      	movlt	r0, r3
 800a492:	e734      	b.n	800a2fe <_printf_float+0xbe>
 800a494:	2301      	movs	r3, #1
 800a496:	464a      	mov	r2, r9
 800a498:	4631      	mov	r1, r6
 800a49a:	4628      	mov	r0, r5
 800a49c:	47b8      	blx	r7
 800a49e:	3001      	adds	r0, #1
 800a4a0:	f43f af2b 	beq.w	800a2fa <_printf_float+0xba>
 800a4a4:	f108 0801 	add.w	r8, r8, #1
 800a4a8:	e7e6      	b.n	800a478 <_printf_float+0x238>
 800a4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dc2b      	bgt.n	800a508 <_printf_float+0x2c8>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4a26      	ldr	r2, [pc, #152]	; (800a54c <_printf_float+0x30c>)
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f af1d 	beq.w	800a2fa <_printf_float+0xba>
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	b923      	cbnz	r3, 800a4ce <_printf_float+0x28e>
 800a4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c6:	b913      	cbnz	r3, 800a4ce <_printf_float+0x28e>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	07d9      	lsls	r1, r3, #31
 800a4cc:	d5d8      	bpl.n	800a480 <_printf_float+0x240>
 800a4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b8      	blx	r7
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f43f af0e 	beq.w	800a2fa <_printf_float+0xba>
 800a4de:	f04f 0900 	mov.w	r9, #0
 800a4e2:	f104 0a1a 	add.w	sl, r4, #26
 800a4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e8:	425b      	negs	r3, r3
 800a4ea:	454b      	cmp	r3, r9
 800a4ec:	dc01      	bgt.n	800a4f2 <_printf_float+0x2b2>
 800a4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f0:	e794      	b.n	800a41c <_printf_float+0x1dc>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4652      	mov	r2, sl
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f aefc 	beq.w	800a2fa <_printf_float+0xba>
 800a502:	f109 0901 	add.w	r9, r9, #1
 800a506:	e7ee      	b.n	800a4e6 <_printf_float+0x2a6>
 800a508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a50a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a50c:	429a      	cmp	r2, r3
 800a50e:	bfa8      	it	ge
 800a510:	461a      	movge	r2, r3
 800a512:	2a00      	cmp	r2, #0
 800a514:	4691      	mov	r9, r2
 800a516:	dd07      	ble.n	800a528 <_printf_float+0x2e8>
 800a518:	4613      	mov	r3, r2
 800a51a:	4631      	mov	r1, r6
 800a51c:	4642      	mov	r2, r8
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f aee9 	beq.w	800a2fa <_printf_float+0xba>
 800a528:	f104 031a 	add.w	r3, r4, #26
 800a52c:	f04f 0b00 	mov.w	fp, #0
 800a530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a534:	9306      	str	r3, [sp, #24]
 800a536:	e015      	b.n	800a564 <_printf_float+0x324>
 800a538:	7fefffff 	.word	0x7fefffff
 800a53c:	0800c430 	.word	0x0800c430
 800a540:	0800c42c 	.word	0x0800c42c
 800a544:	0800c438 	.word	0x0800c438
 800a548:	0800c434 	.word	0x0800c434
 800a54c:	0800c43c 	.word	0x0800c43c
 800a550:	2301      	movs	r3, #1
 800a552:	9a06      	ldr	r2, [sp, #24]
 800a554:	4631      	mov	r1, r6
 800a556:	4628      	mov	r0, r5
 800a558:	47b8      	blx	r7
 800a55a:	3001      	adds	r0, #1
 800a55c:	f43f aecd 	beq.w	800a2fa <_printf_float+0xba>
 800a560:	f10b 0b01 	add.w	fp, fp, #1
 800a564:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a568:	ebaa 0309 	sub.w	r3, sl, r9
 800a56c:	455b      	cmp	r3, fp
 800a56e:	dcef      	bgt.n	800a550 <_printf_float+0x310>
 800a570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a574:	429a      	cmp	r2, r3
 800a576:	44d0      	add	r8, sl
 800a578:	db15      	blt.n	800a5a6 <_printf_float+0x366>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	07da      	lsls	r2, r3, #31
 800a57e:	d412      	bmi.n	800a5a6 <_printf_float+0x366>
 800a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a582:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a584:	eba3 020a 	sub.w	r2, r3, sl
 800a588:	eba3 0a01 	sub.w	sl, r3, r1
 800a58c:	4592      	cmp	sl, r2
 800a58e:	bfa8      	it	ge
 800a590:	4692      	movge	sl, r2
 800a592:	f1ba 0f00 	cmp.w	sl, #0
 800a596:	dc0e      	bgt.n	800a5b6 <_printf_float+0x376>
 800a598:	f04f 0800 	mov.w	r8, #0
 800a59c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5a0:	f104 091a 	add.w	r9, r4, #26
 800a5a4:	e019      	b.n	800a5da <_printf_float+0x39a>
 800a5a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d1e5      	bne.n	800a580 <_printf_float+0x340>
 800a5b4:	e6a1      	b.n	800a2fa <_printf_float+0xba>
 800a5b6:	4653      	mov	r3, sl
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4628      	mov	r0, r5
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d1e9      	bne.n	800a598 <_printf_float+0x358>
 800a5c4:	e699      	b.n	800a2fa <_printf_float+0xba>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	464a      	mov	r2, r9
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f43f ae92 	beq.w	800a2fa <_printf_float+0xba>
 800a5d6:	f108 0801 	add.w	r8, r8, #1
 800a5da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5de:	1a9b      	subs	r3, r3, r2
 800a5e0:	eba3 030a 	sub.w	r3, r3, sl
 800a5e4:	4543      	cmp	r3, r8
 800a5e6:	dcee      	bgt.n	800a5c6 <_printf_float+0x386>
 800a5e8:	e74a      	b.n	800a480 <_printf_float+0x240>
 800a5ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5ec:	2a01      	cmp	r2, #1
 800a5ee:	dc01      	bgt.n	800a5f4 <_printf_float+0x3b4>
 800a5f0:	07db      	lsls	r3, r3, #31
 800a5f2:	d53a      	bpl.n	800a66a <_printf_float+0x42a>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4642      	mov	r2, r8
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	47b8      	blx	r7
 800a5fe:	3001      	adds	r0, #1
 800a600:	f43f ae7b 	beq.w	800a2fa <_printf_float+0xba>
 800a604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	f108 0801 	add.w	r8, r8, #1
 800a614:	f43f ae71 	beq.w	800a2fa <_printf_float+0xba>
 800a618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61a:	2200      	movs	r2, #0
 800a61c:	f103 3aff 	add.w	sl, r3, #4294967295
 800a620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a624:	2300      	movs	r3, #0
 800a626:	f7f6 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a62a:	b9c8      	cbnz	r0, 800a660 <_printf_float+0x420>
 800a62c:	4653      	mov	r3, sl
 800a62e:	4642      	mov	r2, r8
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	d10e      	bne.n	800a658 <_printf_float+0x418>
 800a63a:	e65e      	b.n	800a2fa <_printf_float+0xba>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4652      	mov	r2, sl
 800a640:	4631      	mov	r1, r6
 800a642:	4628      	mov	r0, r5
 800a644:	47b8      	blx	r7
 800a646:	3001      	adds	r0, #1
 800a648:	f43f ae57 	beq.w	800a2fa <_printf_float+0xba>
 800a64c:	f108 0801 	add.w	r8, r8, #1
 800a650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a652:	3b01      	subs	r3, #1
 800a654:	4543      	cmp	r3, r8
 800a656:	dcf1      	bgt.n	800a63c <_printf_float+0x3fc>
 800a658:	464b      	mov	r3, r9
 800a65a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a65e:	e6de      	b.n	800a41e <_printf_float+0x1de>
 800a660:	f04f 0800 	mov.w	r8, #0
 800a664:	f104 0a1a 	add.w	sl, r4, #26
 800a668:	e7f2      	b.n	800a650 <_printf_float+0x410>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e7df      	b.n	800a62e <_printf_float+0x3ee>
 800a66e:	2301      	movs	r3, #1
 800a670:	464a      	mov	r2, r9
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	f43f ae3e 	beq.w	800a2fa <_printf_float+0xba>
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	68e3      	ldr	r3, [r4, #12]
 800a684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a686:	1a9b      	subs	r3, r3, r2
 800a688:	4543      	cmp	r3, r8
 800a68a:	dcf0      	bgt.n	800a66e <_printf_float+0x42e>
 800a68c:	e6fc      	b.n	800a488 <_printf_float+0x248>
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	f104 0919 	add.w	r9, r4, #25
 800a696:	e7f4      	b.n	800a682 <_printf_float+0x442>
 800a698:	2900      	cmp	r1, #0
 800a69a:	f43f ae8b 	beq.w	800a3b4 <_printf_float+0x174>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a6a4:	ab09      	add	r3, sp, #36	; 0x24
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	ec49 8b10 	vmov	d0, r8, r9
 800a6ac:	6022      	str	r2, [r4, #0]
 800a6ae:	f8cd a004 	str.w	sl, [sp, #4]
 800a6b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	f7ff fd2d 	bl	800a116 <__cvt>
 800a6bc:	4680      	mov	r8, r0
 800a6be:	e648      	b.n	800a352 <_printf_float+0x112>

0800a6c0 <_printf_common>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	4691      	mov	r9, r2
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	688a      	ldr	r2, [r1, #8]
 800a6ca:	690b      	ldr	r3, [r1, #16]
 800a6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	bfb8      	it	lt
 800a6d4:	4613      	movlt	r3, r2
 800a6d6:	f8c9 3000 	str.w	r3, [r9]
 800a6da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	b112      	cbz	r2, 800a6ea <_printf_common+0x2a>
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	f8c9 3000 	str.w	r3, [r9]
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	0699      	lsls	r1, r3, #26
 800a6ee:	bf42      	ittt	mi
 800a6f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a6f4:	3302      	addmi	r3, #2
 800a6f6:	f8c9 3000 	strmi.w	r3, [r9]
 800a6fa:	6825      	ldr	r5, [r4, #0]
 800a6fc:	f015 0506 	ands.w	r5, r5, #6
 800a700:	d107      	bne.n	800a712 <_printf_common+0x52>
 800a702:	f104 0a19 	add.w	sl, r4, #25
 800a706:	68e3      	ldr	r3, [r4, #12]
 800a708:	f8d9 2000 	ldr.w	r2, [r9]
 800a70c:	1a9b      	subs	r3, r3, r2
 800a70e:	42ab      	cmp	r3, r5
 800a710:	dc28      	bgt.n	800a764 <_printf_common+0xa4>
 800a712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	3300      	adds	r3, #0
 800a71a:	bf18      	it	ne
 800a71c:	2301      	movne	r3, #1
 800a71e:	0692      	lsls	r2, r2, #26
 800a720:	d42d      	bmi.n	800a77e <_printf_common+0xbe>
 800a722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a726:	4639      	mov	r1, r7
 800a728:	4630      	mov	r0, r6
 800a72a:	47c0      	blx	r8
 800a72c:	3001      	adds	r0, #1
 800a72e:	d020      	beq.n	800a772 <_printf_common+0xb2>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	68e5      	ldr	r5, [r4, #12]
 800a734:	f8d9 2000 	ldr.w	r2, [r9]
 800a738:	f003 0306 	and.w	r3, r3, #6
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	bf08      	it	eq
 800a740:	1aad      	subeq	r5, r5, r2
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	6922      	ldr	r2, [r4, #16]
 800a746:	bf0c      	ite	eq
 800a748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a74c:	2500      	movne	r5, #0
 800a74e:	4293      	cmp	r3, r2
 800a750:	bfc4      	itt	gt
 800a752:	1a9b      	subgt	r3, r3, r2
 800a754:	18ed      	addgt	r5, r5, r3
 800a756:	f04f 0900 	mov.w	r9, #0
 800a75a:	341a      	adds	r4, #26
 800a75c:	454d      	cmp	r5, r9
 800a75e:	d11a      	bne.n	800a796 <_printf_common+0xd6>
 800a760:	2000      	movs	r0, #0
 800a762:	e008      	b.n	800a776 <_printf_common+0xb6>
 800a764:	2301      	movs	r3, #1
 800a766:	4652      	mov	r2, sl
 800a768:	4639      	mov	r1, r7
 800a76a:	4630      	mov	r0, r6
 800a76c:	47c0      	blx	r8
 800a76e:	3001      	adds	r0, #1
 800a770:	d103      	bne.n	800a77a <_printf_common+0xba>
 800a772:	f04f 30ff 	mov.w	r0, #4294967295
 800a776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77a:	3501      	adds	r5, #1
 800a77c:	e7c3      	b.n	800a706 <_printf_common+0x46>
 800a77e:	18e1      	adds	r1, r4, r3
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	2030      	movs	r0, #48	; 0x30
 800a784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a788:	4422      	add	r2, r4
 800a78a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a78e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a792:	3302      	adds	r3, #2
 800a794:	e7c5      	b.n	800a722 <_printf_common+0x62>
 800a796:	2301      	movs	r3, #1
 800a798:	4622      	mov	r2, r4
 800a79a:	4639      	mov	r1, r7
 800a79c:	4630      	mov	r0, r6
 800a79e:	47c0      	blx	r8
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d0e6      	beq.n	800a772 <_printf_common+0xb2>
 800a7a4:	f109 0901 	add.w	r9, r9, #1
 800a7a8:	e7d8      	b.n	800a75c <_printf_common+0x9c>
	...

0800a7ac <_printf_i>:
 800a7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	7e09      	ldrb	r1, [r1, #24]
 800a7b8:	b085      	sub	sp, #20
 800a7ba:	296e      	cmp	r1, #110	; 0x6e
 800a7bc:	4617      	mov	r7, r2
 800a7be:	4606      	mov	r6, r0
 800a7c0:	4698      	mov	r8, r3
 800a7c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7c4:	f000 80b3 	beq.w	800a92e <_printf_i+0x182>
 800a7c8:	d822      	bhi.n	800a810 <_printf_i+0x64>
 800a7ca:	2963      	cmp	r1, #99	; 0x63
 800a7cc:	d036      	beq.n	800a83c <_printf_i+0x90>
 800a7ce:	d80a      	bhi.n	800a7e6 <_printf_i+0x3a>
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	f000 80b9 	beq.w	800a948 <_printf_i+0x19c>
 800a7d6:	2958      	cmp	r1, #88	; 0x58
 800a7d8:	f000 8083 	beq.w	800a8e2 <_printf_i+0x136>
 800a7dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a7e4:	e032      	b.n	800a84c <_printf_i+0xa0>
 800a7e6:	2964      	cmp	r1, #100	; 0x64
 800a7e8:	d001      	beq.n	800a7ee <_printf_i+0x42>
 800a7ea:	2969      	cmp	r1, #105	; 0x69
 800a7ec:	d1f6      	bne.n	800a7dc <_printf_i+0x30>
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	6813      	ldr	r3, [r2, #0]
 800a7f2:	0605      	lsls	r5, r0, #24
 800a7f4:	f103 0104 	add.w	r1, r3, #4
 800a7f8:	d52a      	bpl.n	800a850 <_printf_i+0xa4>
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6011      	str	r1, [r2, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da03      	bge.n	800a80a <_printf_i+0x5e>
 800a802:	222d      	movs	r2, #45	; 0x2d
 800a804:	425b      	negs	r3, r3
 800a806:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a80a:	486f      	ldr	r0, [pc, #444]	; (800a9c8 <_printf_i+0x21c>)
 800a80c:	220a      	movs	r2, #10
 800a80e:	e039      	b.n	800a884 <_printf_i+0xd8>
 800a810:	2973      	cmp	r1, #115	; 0x73
 800a812:	f000 809d 	beq.w	800a950 <_printf_i+0x1a4>
 800a816:	d808      	bhi.n	800a82a <_printf_i+0x7e>
 800a818:	296f      	cmp	r1, #111	; 0x6f
 800a81a:	d020      	beq.n	800a85e <_printf_i+0xb2>
 800a81c:	2970      	cmp	r1, #112	; 0x70
 800a81e:	d1dd      	bne.n	800a7dc <_printf_i+0x30>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	f043 0320 	orr.w	r3, r3, #32
 800a826:	6023      	str	r3, [r4, #0]
 800a828:	e003      	b.n	800a832 <_printf_i+0x86>
 800a82a:	2975      	cmp	r1, #117	; 0x75
 800a82c:	d017      	beq.n	800a85e <_printf_i+0xb2>
 800a82e:	2978      	cmp	r1, #120	; 0x78
 800a830:	d1d4      	bne.n	800a7dc <_printf_i+0x30>
 800a832:	2378      	movs	r3, #120	; 0x78
 800a834:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a838:	4864      	ldr	r0, [pc, #400]	; (800a9cc <_printf_i+0x220>)
 800a83a:	e055      	b.n	800a8e8 <_printf_i+0x13c>
 800a83c:	6813      	ldr	r3, [r2, #0]
 800a83e:	1d19      	adds	r1, r3, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6011      	str	r1, [r2, #0]
 800a844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a84c:	2301      	movs	r3, #1
 800a84e:	e08c      	b.n	800a96a <_printf_i+0x1be>
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6011      	str	r1, [r2, #0]
 800a854:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a858:	bf18      	it	ne
 800a85a:	b21b      	sxthne	r3, r3
 800a85c:	e7cf      	b.n	800a7fe <_printf_i+0x52>
 800a85e:	6813      	ldr	r3, [r2, #0]
 800a860:	6825      	ldr	r5, [r4, #0]
 800a862:	1d18      	adds	r0, r3, #4
 800a864:	6010      	str	r0, [r2, #0]
 800a866:	0628      	lsls	r0, r5, #24
 800a868:	d501      	bpl.n	800a86e <_printf_i+0xc2>
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	e002      	b.n	800a874 <_printf_i+0xc8>
 800a86e:	0668      	lsls	r0, r5, #25
 800a870:	d5fb      	bpl.n	800a86a <_printf_i+0xbe>
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	4854      	ldr	r0, [pc, #336]	; (800a9c8 <_printf_i+0x21c>)
 800a876:	296f      	cmp	r1, #111	; 0x6f
 800a878:	bf14      	ite	ne
 800a87a:	220a      	movne	r2, #10
 800a87c:	2208      	moveq	r2, #8
 800a87e:	2100      	movs	r1, #0
 800a880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a884:	6865      	ldr	r5, [r4, #4]
 800a886:	60a5      	str	r5, [r4, #8]
 800a888:	2d00      	cmp	r5, #0
 800a88a:	f2c0 8095 	blt.w	800a9b8 <_printf_i+0x20c>
 800a88e:	6821      	ldr	r1, [r4, #0]
 800a890:	f021 0104 	bic.w	r1, r1, #4
 800a894:	6021      	str	r1, [r4, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d13d      	bne.n	800a916 <_printf_i+0x16a>
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	f040 808e 	bne.w	800a9bc <_printf_i+0x210>
 800a8a0:	4665      	mov	r5, ip
 800a8a2:	2a08      	cmp	r2, #8
 800a8a4:	d10b      	bne.n	800a8be <_printf_i+0x112>
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	07db      	lsls	r3, r3, #31
 800a8aa:	d508      	bpl.n	800a8be <_printf_i+0x112>
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	6862      	ldr	r2, [r4, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	bfde      	ittt	le
 800a8b4:	2330      	movle	r3, #48	; 0x30
 800a8b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8be:	ebac 0305 	sub.w	r3, ip, r5
 800a8c2:	6123      	str	r3, [r4, #16]
 800a8c4:	f8cd 8000 	str.w	r8, [sp]
 800a8c8:	463b      	mov	r3, r7
 800a8ca:	aa03      	add	r2, sp, #12
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7ff fef6 	bl	800a6c0 <_printf_common>
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d14d      	bne.n	800a974 <_printf_i+0x1c8>
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	b005      	add	sp, #20
 800a8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	4839      	ldr	r0, [pc, #228]	; (800a9c8 <_printf_i+0x21c>)
 800a8e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a8e8:	6813      	ldr	r3, [r2, #0]
 800a8ea:	6821      	ldr	r1, [r4, #0]
 800a8ec:	1d1d      	adds	r5, r3, #4
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6015      	str	r5, [r2, #0]
 800a8f2:	060a      	lsls	r2, r1, #24
 800a8f4:	d50b      	bpl.n	800a90e <_printf_i+0x162>
 800a8f6:	07ca      	lsls	r2, r1, #31
 800a8f8:	bf44      	itt	mi
 800a8fa:	f041 0120 	orrmi.w	r1, r1, #32
 800a8fe:	6021      	strmi	r1, [r4, #0]
 800a900:	b91b      	cbnz	r3, 800a90a <_printf_i+0x15e>
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	f022 0220 	bic.w	r2, r2, #32
 800a908:	6022      	str	r2, [r4, #0]
 800a90a:	2210      	movs	r2, #16
 800a90c:	e7b7      	b.n	800a87e <_printf_i+0xd2>
 800a90e:	064d      	lsls	r5, r1, #25
 800a910:	bf48      	it	mi
 800a912:	b29b      	uxthmi	r3, r3
 800a914:	e7ef      	b.n	800a8f6 <_printf_i+0x14a>
 800a916:	4665      	mov	r5, ip
 800a918:	fbb3 f1f2 	udiv	r1, r3, r2
 800a91c:	fb02 3311 	mls	r3, r2, r1, r3
 800a920:	5cc3      	ldrb	r3, [r0, r3]
 800a922:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a926:	460b      	mov	r3, r1
 800a928:	2900      	cmp	r1, #0
 800a92a:	d1f5      	bne.n	800a918 <_printf_i+0x16c>
 800a92c:	e7b9      	b.n	800a8a2 <_printf_i+0xf6>
 800a92e:	6813      	ldr	r3, [r2, #0]
 800a930:	6825      	ldr	r5, [r4, #0]
 800a932:	6961      	ldr	r1, [r4, #20]
 800a934:	1d18      	adds	r0, r3, #4
 800a936:	6010      	str	r0, [r2, #0]
 800a938:	0628      	lsls	r0, r5, #24
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	d501      	bpl.n	800a942 <_printf_i+0x196>
 800a93e:	6019      	str	r1, [r3, #0]
 800a940:	e002      	b.n	800a948 <_printf_i+0x19c>
 800a942:	066a      	lsls	r2, r5, #25
 800a944:	d5fb      	bpl.n	800a93e <_printf_i+0x192>
 800a946:	8019      	strh	r1, [r3, #0]
 800a948:	2300      	movs	r3, #0
 800a94a:	6123      	str	r3, [r4, #16]
 800a94c:	4665      	mov	r5, ip
 800a94e:	e7b9      	b.n	800a8c4 <_printf_i+0x118>
 800a950:	6813      	ldr	r3, [r2, #0]
 800a952:	1d19      	adds	r1, r3, #4
 800a954:	6011      	str	r1, [r2, #0]
 800a956:	681d      	ldr	r5, [r3, #0]
 800a958:	6862      	ldr	r2, [r4, #4]
 800a95a:	2100      	movs	r1, #0
 800a95c:	4628      	mov	r0, r5
 800a95e:	f7f5 fc3f 	bl	80001e0 <memchr>
 800a962:	b108      	cbz	r0, 800a968 <_printf_i+0x1bc>
 800a964:	1b40      	subs	r0, r0, r5
 800a966:	6060      	str	r0, [r4, #4]
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	6123      	str	r3, [r4, #16]
 800a96c:	2300      	movs	r3, #0
 800a96e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a972:	e7a7      	b.n	800a8c4 <_printf_i+0x118>
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	462a      	mov	r2, r5
 800a978:	4639      	mov	r1, r7
 800a97a:	4630      	mov	r0, r6
 800a97c:	47c0      	blx	r8
 800a97e:	3001      	adds	r0, #1
 800a980:	d0aa      	beq.n	800a8d8 <_printf_i+0x12c>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	079b      	lsls	r3, r3, #30
 800a986:	d413      	bmi.n	800a9b0 <_printf_i+0x204>
 800a988:	68e0      	ldr	r0, [r4, #12]
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	4298      	cmp	r0, r3
 800a98e:	bfb8      	it	lt
 800a990:	4618      	movlt	r0, r3
 800a992:	e7a3      	b.n	800a8dc <_printf_i+0x130>
 800a994:	2301      	movs	r3, #1
 800a996:	464a      	mov	r2, r9
 800a998:	4639      	mov	r1, r7
 800a99a:	4630      	mov	r0, r6
 800a99c:	47c0      	blx	r8
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d09a      	beq.n	800a8d8 <_printf_i+0x12c>
 800a9a2:	3501      	adds	r5, #1
 800a9a4:	68e3      	ldr	r3, [r4, #12]
 800a9a6:	9a03      	ldr	r2, [sp, #12]
 800a9a8:	1a9b      	subs	r3, r3, r2
 800a9aa:	42ab      	cmp	r3, r5
 800a9ac:	dcf2      	bgt.n	800a994 <_printf_i+0x1e8>
 800a9ae:	e7eb      	b.n	800a988 <_printf_i+0x1dc>
 800a9b0:	2500      	movs	r5, #0
 800a9b2:	f104 0919 	add.w	r9, r4, #25
 800a9b6:	e7f5      	b.n	800a9a4 <_printf_i+0x1f8>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1ac      	bne.n	800a916 <_printf_i+0x16a>
 800a9bc:	7803      	ldrb	r3, [r0, #0]
 800a9be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9c6:	e76c      	b.n	800a8a2 <_printf_i+0xf6>
 800a9c8:	0800c43e 	.word	0x0800c43e
 800a9cc:	0800c44f 	.word	0x0800c44f

0800a9d0 <srand>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <srand+0x38>)
 800a9d4:	681c      	ldr	r4, [r3, #0]
 800a9d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9d8:	4605      	mov	r5, r0
 800a9da:	b97b      	cbnz	r3, 800a9fc <srand+0x2c>
 800a9dc:	2018      	movs	r0, #24
 800a9de:	f000 fe8d 	bl	800b6fc <malloc>
 800a9e2:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <srand+0x3c>)
 800a9e4:	4b0a      	ldr	r3, [pc, #40]	; (800aa10 <srand+0x40>)
 800a9e6:	63a0      	str	r0, [r4, #56]	; 0x38
 800a9e8:	e9c0 2300 	strd	r2, r3, [r0]
 800a9ec:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <srand+0x44>)
 800a9ee:	6083      	str	r3, [r0, #8]
 800a9f0:	230b      	movs	r3, #11
 800a9f2:	8183      	strh	r3, [r0, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a9fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9fe:	2200      	movs	r2, #0
 800aa00:	611d      	str	r5, [r3, #16]
 800aa02:	615a      	str	r2, [r3, #20]
 800aa04:	bd38      	pop	{r3, r4, r5, pc}
 800aa06:	bf00      	nop
 800aa08:	2000005c 	.word	0x2000005c
 800aa0c:	abcd330e 	.word	0xabcd330e
 800aa10:	e66d1234 	.word	0xe66d1234
 800aa14:	0005deec 	.word	0x0005deec

0800aa18 <siprintf>:
 800aa18:	b40e      	push	{r1, r2, r3}
 800aa1a:	b500      	push	{lr}
 800aa1c:	b09c      	sub	sp, #112	; 0x70
 800aa1e:	ab1d      	add	r3, sp, #116	; 0x74
 800aa20:	9002      	str	r0, [sp, #8]
 800aa22:	9006      	str	r0, [sp, #24]
 800aa24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa28:	4809      	ldr	r0, [pc, #36]	; (800aa50 <siprintf+0x38>)
 800aa2a:	9107      	str	r1, [sp, #28]
 800aa2c:	9104      	str	r1, [sp, #16]
 800aa2e:	4909      	ldr	r1, [pc, #36]	; (800aa54 <siprintf+0x3c>)
 800aa30:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa34:	9105      	str	r1, [sp, #20]
 800aa36:	6800      	ldr	r0, [r0, #0]
 800aa38:	9301      	str	r3, [sp, #4]
 800aa3a:	a902      	add	r1, sp, #8
 800aa3c:	f001 fa52 	bl	800bee4 <_svfiprintf_r>
 800aa40:	9b02      	ldr	r3, [sp, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	b01c      	add	sp, #112	; 0x70
 800aa48:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa4c:	b003      	add	sp, #12
 800aa4e:	4770      	bx	lr
 800aa50:	2000005c 	.word	0x2000005c
 800aa54:	ffff0208 	.word	0xffff0208

0800aa58 <quorem>:
 800aa58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	6903      	ldr	r3, [r0, #16]
 800aa5e:	690c      	ldr	r4, [r1, #16]
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	4680      	mov	r8, r0
 800aa64:	f2c0 8082 	blt.w	800ab6c <quorem+0x114>
 800aa68:	3c01      	subs	r4, #1
 800aa6a:	f101 0714 	add.w	r7, r1, #20
 800aa6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aa72:	f100 0614 	add.w	r6, r0, #20
 800aa76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800aa7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800aa7e:	eb06 030c 	add.w	r3, r6, ip
 800aa82:	3501      	adds	r5, #1
 800aa84:	eb07 090c 	add.w	r9, r7, ip
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	fbb0 f5f5 	udiv	r5, r0, r5
 800aa8e:	b395      	cbz	r5, 800aaf6 <quorem+0x9e>
 800aa90:	f04f 0a00 	mov.w	sl, #0
 800aa94:	4638      	mov	r0, r7
 800aa96:	46b6      	mov	lr, r6
 800aa98:	46d3      	mov	fp, sl
 800aa9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa9e:	b293      	uxth	r3, r2
 800aaa0:	fb05 a303 	mla	r3, r5, r3, sl
 800aaa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	ebab 0303 	sub.w	r3, fp, r3
 800aaae:	0c12      	lsrs	r2, r2, #16
 800aab0:	f8de b000 	ldr.w	fp, [lr]
 800aab4:	fb05 a202 	mla	r2, r5, r2, sl
 800aab8:	fa13 f38b 	uxtah	r3, r3, fp
 800aabc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800aac0:	fa1f fb82 	uxth.w	fp, r2
 800aac4:	f8de 2000 	ldr.w	r2, [lr]
 800aac8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800aacc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aad6:	4581      	cmp	r9, r0
 800aad8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aadc:	f84e 3b04 	str.w	r3, [lr], #4
 800aae0:	d2db      	bcs.n	800aa9a <quorem+0x42>
 800aae2:	f856 300c 	ldr.w	r3, [r6, ip]
 800aae6:	b933      	cbnz	r3, 800aaf6 <quorem+0x9e>
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	3b04      	subs	r3, #4
 800aaec:	429e      	cmp	r6, r3
 800aaee:	461a      	mov	r2, r3
 800aaf0:	d330      	bcc.n	800ab54 <quorem+0xfc>
 800aaf2:	f8c8 4010 	str.w	r4, [r8, #16]
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f001 f81e 	bl	800bb38 <__mcmp>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	db25      	blt.n	800ab4c <quorem+0xf4>
 800ab00:	3501      	adds	r5, #1
 800ab02:	4630      	mov	r0, r6
 800ab04:	f04f 0c00 	mov.w	ip, #0
 800ab08:	f857 2b04 	ldr.w	r2, [r7], #4
 800ab0c:	f8d0 e000 	ldr.w	lr, [r0]
 800ab10:	b293      	uxth	r3, r2
 800ab12:	ebac 0303 	sub.w	r3, ip, r3
 800ab16:	0c12      	lsrs	r2, r2, #16
 800ab18:	fa13 f38e 	uxtah	r3, r3, lr
 800ab1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab2a:	45b9      	cmp	r9, r7
 800ab2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab30:	f840 3b04 	str.w	r3, [r0], #4
 800ab34:	d2e8      	bcs.n	800ab08 <quorem+0xb0>
 800ab36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ab3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ab3e:	b92a      	cbnz	r2, 800ab4c <quorem+0xf4>
 800ab40:	3b04      	subs	r3, #4
 800ab42:	429e      	cmp	r6, r3
 800ab44:	461a      	mov	r2, r3
 800ab46:	d30b      	bcc.n	800ab60 <quorem+0x108>
 800ab48:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	b003      	add	sp, #12
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	3b04      	subs	r3, #4
 800ab58:	2a00      	cmp	r2, #0
 800ab5a:	d1ca      	bne.n	800aaf2 <quorem+0x9a>
 800ab5c:	3c01      	subs	r4, #1
 800ab5e:	e7c5      	b.n	800aaec <quorem+0x94>
 800ab60:	6812      	ldr	r2, [r2, #0]
 800ab62:	3b04      	subs	r3, #4
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	d1ef      	bne.n	800ab48 <quorem+0xf0>
 800ab68:	3c01      	subs	r4, #1
 800ab6a:	e7ea      	b.n	800ab42 <quorem+0xea>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e7ee      	b.n	800ab4e <quorem+0xf6>

0800ab70 <_dtoa_r>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	ec57 6b10 	vmov	r6, r7, d0
 800ab78:	b097      	sub	sp, #92	; 0x5c
 800ab7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab7c:	9106      	str	r1, [sp, #24]
 800ab7e:	4604      	mov	r4, r0
 800ab80:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab82:	9312      	str	r3, [sp, #72]	; 0x48
 800ab84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab88:	e9cd 6700 	strd	r6, r7, [sp]
 800ab8c:	b93d      	cbnz	r5, 800ab9e <_dtoa_r+0x2e>
 800ab8e:	2010      	movs	r0, #16
 800ab90:	f000 fdb4 	bl	800b6fc <malloc>
 800ab94:	6260      	str	r0, [r4, #36]	; 0x24
 800ab96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab9a:	6005      	str	r5, [r0, #0]
 800ab9c:	60c5      	str	r5, [r0, #12]
 800ab9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba0:	6819      	ldr	r1, [r3, #0]
 800aba2:	b151      	cbz	r1, 800abba <_dtoa_r+0x4a>
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	604a      	str	r2, [r1, #4]
 800aba8:	2301      	movs	r3, #1
 800abaa:	4093      	lsls	r3, r2
 800abac:	608b      	str	r3, [r1, #8]
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 fde0 	bl	800b774 <_Bfree>
 800abb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	1e3b      	subs	r3, r7, #0
 800abbc:	bfbb      	ittet	lt
 800abbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abc2:	9301      	strlt	r3, [sp, #4]
 800abc4:	2300      	movge	r3, #0
 800abc6:	2201      	movlt	r2, #1
 800abc8:	bfac      	ite	ge
 800abca:	f8c8 3000 	strge.w	r3, [r8]
 800abce:	f8c8 2000 	strlt.w	r2, [r8]
 800abd2:	4baf      	ldr	r3, [pc, #700]	; (800ae90 <_dtoa_r+0x320>)
 800abd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800abd8:	ea33 0308 	bics.w	r3, r3, r8
 800abdc:	d114      	bne.n	800ac08 <_dtoa_r+0x98>
 800abde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abe0:	f242 730f 	movw	r3, #9999	; 0x270f
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	9b00      	ldr	r3, [sp, #0]
 800abe8:	b923      	cbnz	r3, 800abf4 <_dtoa_r+0x84>
 800abea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800abee:	2800      	cmp	r0, #0
 800abf0:	f000 8542 	beq.w	800b678 <_dtoa_r+0xb08>
 800abf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800aea4 <_dtoa_r+0x334>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 8544 	beq.w	800b688 <_dtoa_r+0xb18>
 800ac00:	f10b 0303 	add.w	r3, fp, #3
 800ac04:	f000 bd3e 	b.w	800b684 <_dtoa_r+0xb14>
 800ac08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	4630      	mov	r0, r6
 800ac12:	4639      	mov	r1, r7
 800ac14:	f7f5 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac18:	4681      	mov	r9, r0
 800ac1a:	b168      	cbz	r0, 800ac38 <_dtoa_r+0xc8>
 800ac1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac1e:	2301      	movs	r3, #1
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8524 	beq.w	800b672 <_dtoa_r+0xb02>
 800ac2a:	4b9a      	ldr	r3, [pc, #616]	; (800ae94 <_dtoa_r+0x324>)
 800ac2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac2e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	f000 bd28 	b.w	800b688 <_dtoa_r+0xb18>
 800ac38:	aa14      	add	r2, sp, #80	; 0x50
 800ac3a:	a915      	add	r1, sp, #84	; 0x54
 800ac3c:	ec47 6b10 	vmov	d0, r6, r7
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 fff0 	bl	800bc26 <__d2b>
 800ac46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ac4a:	9004      	str	r0, [sp, #16]
 800ac4c:	2d00      	cmp	r5, #0
 800ac4e:	d07c      	beq.n	800ad4a <_dtoa_r+0x1da>
 800ac50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ac58:	46b2      	mov	sl, r6
 800ac5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ac5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ac66:	2200      	movs	r2, #0
 800ac68:	4b8b      	ldr	r3, [pc, #556]	; (800ae98 <_dtoa_r+0x328>)
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	f7f5 fb0b 	bl	8000288 <__aeabi_dsub>
 800ac72:	a381      	add	r3, pc, #516	; (adr r3, 800ae78 <_dtoa_r+0x308>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fcbe 	bl	80005f8 <__aeabi_dmul>
 800ac7c:	a380      	add	r3, pc, #512	; (adr r3, 800ae80 <_dtoa_r+0x310>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 fb03 	bl	800028c <__adddf3>
 800ac86:	4606      	mov	r6, r0
 800ac88:	4628      	mov	r0, r5
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	f7f5 fc4a 	bl	8000524 <__aeabi_i2d>
 800ac90:	a37d      	add	r3, pc, #500	; (adr r3, 800ae88 <_dtoa_r+0x318>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	f7f5 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4639      	mov	r1, r7
 800aca2:	f7f5 faf3 	bl	800028c <__adddf3>
 800aca6:	4606      	mov	r6, r0
 800aca8:	460f      	mov	r7, r1
 800acaa:	f7f5 ff55 	bl	8000b58 <__aeabi_d2iz>
 800acae:	2200      	movs	r2, #0
 800acb0:	4682      	mov	sl, r0
 800acb2:	2300      	movs	r3, #0
 800acb4:	4630      	mov	r0, r6
 800acb6:	4639      	mov	r1, r7
 800acb8:	f7f5 ff10 	bl	8000adc <__aeabi_dcmplt>
 800acbc:	b148      	cbz	r0, 800acd2 <_dtoa_r+0x162>
 800acbe:	4650      	mov	r0, sl
 800acc0:	f7f5 fc30 	bl	8000524 <__aeabi_i2d>
 800acc4:	4632      	mov	r2, r6
 800acc6:	463b      	mov	r3, r7
 800acc8:	f7f5 fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 800accc:	b908      	cbnz	r0, 800acd2 <_dtoa_r+0x162>
 800acce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acd2:	f1ba 0f16 	cmp.w	sl, #22
 800acd6:	d859      	bhi.n	800ad8c <_dtoa_r+0x21c>
 800acd8:	4970      	ldr	r1, [pc, #448]	; (800ae9c <_dtoa_r+0x32c>)
 800acda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800acde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ace2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace6:	f7f5 ff17 	bl	8000b18 <__aeabi_dcmpgt>
 800acea:	2800      	cmp	r0, #0
 800acec:	d050      	beq.n	800ad90 <_dtoa_r+0x220>
 800acee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acf2:	2300      	movs	r3, #0
 800acf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800acf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acf8:	1b5d      	subs	r5, r3, r5
 800acfa:	f1b5 0801 	subs.w	r8, r5, #1
 800acfe:	bf49      	itett	mi
 800ad00:	f1c5 0301 	rsbmi	r3, r5, #1
 800ad04:	2300      	movpl	r3, #0
 800ad06:	9305      	strmi	r3, [sp, #20]
 800ad08:	f04f 0800 	movmi.w	r8, #0
 800ad0c:	bf58      	it	pl
 800ad0e:	9305      	strpl	r3, [sp, #20]
 800ad10:	f1ba 0f00 	cmp.w	sl, #0
 800ad14:	db3e      	blt.n	800ad94 <_dtoa_r+0x224>
 800ad16:	2300      	movs	r3, #0
 800ad18:	44d0      	add	r8, sl
 800ad1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ad1e:	9307      	str	r3, [sp, #28]
 800ad20:	9b06      	ldr	r3, [sp, #24]
 800ad22:	2b09      	cmp	r3, #9
 800ad24:	f200 8090 	bhi.w	800ae48 <_dtoa_r+0x2d8>
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	bfc4      	itt	gt
 800ad2c:	3b04      	subgt	r3, #4
 800ad2e:	9306      	strgt	r3, [sp, #24]
 800ad30:	9b06      	ldr	r3, [sp, #24]
 800ad32:	f1a3 0302 	sub.w	r3, r3, #2
 800ad36:	bfcc      	ite	gt
 800ad38:	2500      	movgt	r5, #0
 800ad3a:	2501      	movle	r5, #1
 800ad3c:	2b03      	cmp	r3, #3
 800ad3e:	f200 808f 	bhi.w	800ae60 <_dtoa_r+0x2f0>
 800ad42:	e8df f003 	tbb	[pc, r3]
 800ad46:	7f7d      	.short	0x7f7d
 800ad48:	7131      	.short	0x7131
 800ad4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ad4e:	441d      	add	r5, r3
 800ad50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ad54:	2820      	cmp	r0, #32
 800ad56:	dd13      	ble.n	800ad80 <_dtoa_r+0x210>
 800ad58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	fa08 f800 	lsl.w	r8, r8, r0
 800ad62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ad66:	fa23 f000 	lsr.w	r0, r3, r0
 800ad6a:	ea48 0000 	orr.w	r0, r8, r0
 800ad6e:	f7f5 fbc9 	bl	8000504 <__aeabi_ui2d>
 800ad72:	2301      	movs	r3, #1
 800ad74:	4682      	mov	sl, r0
 800ad76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ad7a:	3d01      	subs	r5, #1
 800ad7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad7e:	e772      	b.n	800ac66 <_dtoa_r+0xf6>
 800ad80:	9b00      	ldr	r3, [sp, #0]
 800ad82:	f1c0 0020 	rsb	r0, r0, #32
 800ad86:	fa03 f000 	lsl.w	r0, r3, r0
 800ad8a:	e7f0      	b.n	800ad6e <_dtoa_r+0x1fe>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e7b1      	b.n	800acf4 <_dtoa_r+0x184>
 800ad90:	900f      	str	r0, [sp, #60]	; 0x3c
 800ad92:	e7b0      	b.n	800acf6 <_dtoa_r+0x186>
 800ad94:	9b05      	ldr	r3, [sp, #20]
 800ad96:	eba3 030a 	sub.w	r3, r3, sl
 800ad9a:	9305      	str	r3, [sp, #20]
 800ad9c:	f1ca 0300 	rsb	r3, sl, #0
 800ada0:	9307      	str	r3, [sp, #28]
 800ada2:	2300      	movs	r3, #0
 800ada4:	930e      	str	r3, [sp, #56]	; 0x38
 800ada6:	e7bb      	b.n	800ad20 <_dtoa_r+0x1b0>
 800ada8:	2301      	movs	r3, #1
 800adaa:	930a      	str	r3, [sp, #40]	; 0x28
 800adac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dd59      	ble.n	800ae66 <_dtoa_r+0x2f6>
 800adb2:	9302      	str	r3, [sp, #8]
 800adb4:	4699      	mov	r9, r3
 800adb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adb8:	2200      	movs	r2, #0
 800adba:	6072      	str	r2, [r6, #4]
 800adbc:	2204      	movs	r2, #4
 800adbe:	f102 0014 	add.w	r0, r2, #20
 800adc2:	4298      	cmp	r0, r3
 800adc4:	6871      	ldr	r1, [r6, #4]
 800adc6:	d953      	bls.n	800ae70 <_dtoa_r+0x300>
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 fc9f 	bl	800b70c <_Balloc>
 800adce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800add0:	6030      	str	r0, [r6, #0]
 800add2:	f1b9 0f0e 	cmp.w	r9, #14
 800add6:	f8d3 b000 	ldr.w	fp, [r3]
 800adda:	f200 80e6 	bhi.w	800afaa <_dtoa_r+0x43a>
 800adde:	2d00      	cmp	r5, #0
 800ade0:	f000 80e3 	beq.w	800afaa <_dtoa_r+0x43a>
 800ade4:	ed9d 7b00 	vldr	d7, [sp]
 800ade8:	f1ba 0f00 	cmp.w	sl, #0
 800adec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800adf0:	dd74      	ble.n	800aedc <_dtoa_r+0x36c>
 800adf2:	4a2a      	ldr	r2, [pc, #168]	; (800ae9c <_dtoa_r+0x32c>)
 800adf4:	f00a 030f 	and.w	r3, sl, #15
 800adf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800adfc:	ed93 7b00 	vldr	d7, [r3]
 800ae00:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ae04:	06f0      	lsls	r0, r6, #27
 800ae06:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ae0a:	d565      	bpl.n	800aed8 <_dtoa_r+0x368>
 800ae0c:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <_dtoa_r+0x330>)
 800ae0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae16:	f7f5 fd19 	bl	800084c <__aeabi_ddiv>
 800ae1a:	e9cd 0100 	strd	r0, r1, [sp]
 800ae1e:	f006 060f 	and.w	r6, r6, #15
 800ae22:	2503      	movs	r5, #3
 800ae24:	4f1e      	ldr	r7, [pc, #120]	; (800aea0 <_dtoa_r+0x330>)
 800ae26:	e04c      	b.n	800aec2 <_dtoa_r+0x352>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2e:	4453      	add	r3, sl
 800ae30:	f103 0901 	add.w	r9, r3, #1
 800ae34:	9302      	str	r3, [sp, #8]
 800ae36:	464b      	mov	r3, r9
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	bfb8      	it	lt
 800ae3c:	2301      	movlt	r3, #1
 800ae3e:	e7ba      	b.n	800adb6 <_dtoa_r+0x246>
 800ae40:	2300      	movs	r3, #0
 800ae42:	e7b2      	b.n	800adaa <_dtoa_r+0x23a>
 800ae44:	2300      	movs	r3, #0
 800ae46:	e7f0      	b.n	800ae2a <_dtoa_r+0x2ba>
 800ae48:	2501      	movs	r5, #1
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9306      	str	r3, [sp, #24]
 800ae4e:	950a      	str	r5, [sp, #40]	; 0x28
 800ae50:	f04f 33ff 	mov.w	r3, #4294967295
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	4699      	mov	r9, r3
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2312      	movs	r3, #18
 800ae5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ae5e:	e7aa      	b.n	800adb6 <_dtoa_r+0x246>
 800ae60:	2301      	movs	r3, #1
 800ae62:	930a      	str	r3, [sp, #40]	; 0x28
 800ae64:	e7f4      	b.n	800ae50 <_dtoa_r+0x2e0>
 800ae66:	2301      	movs	r3, #1
 800ae68:	9302      	str	r3, [sp, #8]
 800ae6a:	4699      	mov	r9, r3
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	e7f5      	b.n	800ae5c <_dtoa_r+0x2ec>
 800ae70:	3101      	adds	r1, #1
 800ae72:	6071      	str	r1, [r6, #4]
 800ae74:	0052      	lsls	r2, r2, #1
 800ae76:	e7a2      	b.n	800adbe <_dtoa_r+0x24e>
 800ae78:	636f4361 	.word	0x636f4361
 800ae7c:	3fd287a7 	.word	0x3fd287a7
 800ae80:	8b60c8b3 	.word	0x8b60c8b3
 800ae84:	3fc68a28 	.word	0x3fc68a28
 800ae88:	509f79fb 	.word	0x509f79fb
 800ae8c:	3fd34413 	.word	0x3fd34413
 800ae90:	7ff00000 	.word	0x7ff00000
 800ae94:	0800c43d 	.word	0x0800c43d
 800ae98:	3ff80000 	.word	0x3ff80000
 800ae9c:	0800c498 	.word	0x0800c498
 800aea0:	0800c470 	.word	0x0800c470
 800aea4:	0800c469 	.word	0x0800c469
 800aea8:	07f1      	lsls	r1, r6, #31
 800aeaa:	d508      	bpl.n	800aebe <_dtoa_r+0x34e>
 800aeac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aeb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb4:	f7f5 fba0 	bl	80005f8 <__aeabi_dmul>
 800aeb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aebc:	3501      	adds	r5, #1
 800aebe:	1076      	asrs	r6, r6, #1
 800aec0:	3708      	adds	r7, #8
 800aec2:	2e00      	cmp	r6, #0
 800aec4:	d1f0      	bne.n	800aea8 <_dtoa_r+0x338>
 800aec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aeca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aece:	f7f5 fcbd 	bl	800084c <__aeabi_ddiv>
 800aed2:	e9cd 0100 	strd	r0, r1, [sp]
 800aed6:	e01a      	b.n	800af0e <_dtoa_r+0x39e>
 800aed8:	2502      	movs	r5, #2
 800aeda:	e7a3      	b.n	800ae24 <_dtoa_r+0x2b4>
 800aedc:	f000 80a0 	beq.w	800b020 <_dtoa_r+0x4b0>
 800aee0:	f1ca 0600 	rsb	r6, sl, #0
 800aee4:	4b9f      	ldr	r3, [pc, #636]	; (800b164 <_dtoa_r+0x5f4>)
 800aee6:	4fa0      	ldr	r7, [pc, #640]	; (800b168 <_dtoa_r+0x5f8>)
 800aee8:	f006 020f 	and.w	r2, r6, #15
 800aeec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aef8:	f7f5 fb7e 	bl	80005f8 <__aeabi_dmul>
 800aefc:	e9cd 0100 	strd	r0, r1, [sp]
 800af00:	1136      	asrs	r6, r6, #4
 800af02:	2300      	movs	r3, #0
 800af04:	2502      	movs	r5, #2
 800af06:	2e00      	cmp	r6, #0
 800af08:	d17f      	bne.n	800b00a <_dtoa_r+0x49a>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e1      	bne.n	800aed2 <_dtoa_r+0x362>
 800af0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 8087 	beq.w	800b024 <_dtoa_r+0x4b4>
 800af16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b93      	ldr	r3, [pc, #588]	; (800b16c <_dtoa_r+0x5fc>)
 800af1e:	4630      	mov	r0, r6
 800af20:	4639      	mov	r1, r7
 800af22:	f7f5 fddb 	bl	8000adc <__aeabi_dcmplt>
 800af26:	2800      	cmp	r0, #0
 800af28:	d07c      	beq.n	800b024 <_dtoa_r+0x4b4>
 800af2a:	f1b9 0f00 	cmp.w	r9, #0
 800af2e:	d079      	beq.n	800b024 <_dtoa_r+0x4b4>
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	dd35      	ble.n	800afa2 <_dtoa_r+0x432>
 800af36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800af3a:	9308      	str	r3, [sp, #32]
 800af3c:	4639      	mov	r1, r7
 800af3e:	2200      	movs	r2, #0
 800af40:	4b8b      	ldr	r3, [pc, #556]	; (800b170 <_dtoa_r+0x600>)
 800af42:	4630      	mov	r0, r6
 800af44:	f7f5 fb58 	bl	80005f8 <__aeabi_dmul>
 800af48:	e9cd 0100 	strd	r0, r1, [sp]
 800af4c:	9f02      	ldr	r7, [sp, #8]
 800af4e:	3501      	adds	r5, #1
 800af50:	4628      	mov	r0, r5
 800af52:	f7f5 fae7 	bl	8000524 <__aeabi_i2d>
 800af56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af5a:	f7f5 fb4d 	bl	80005f8 <__aeabi_dmul>
 800af5e:	2200      	movs	r2, #0
 800af60:	4b84      	ldr	r3, [pc, #528]	; (800b174 <_dtoa_r+0x604>)
 800af62:	f7f5 f993 	bl	800028c <__adddf3>
 800af66:	4605      	mov	r5, r0
 800af68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800af6c:	2f00      	cmp	r7, #0
 800af6e:	d15d      	bne.n	800b02c <_dtoa_r+0x4bc>
 800af70:	2200      	movs	r2, #0
 800af72:	4b81      	ldr	r3, [pc, #516]	; (800b178 <_dtoa_r+0x608>)
 800af74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af78:	f7f5 f986 	bl	8000288 <__aeabi_dsub>
 800af7c:	462a      	mov	r2, r5
 800af7e:	4633      	mov	r3, r6
 800af80:	e9cd 0100 	strd	r0, r1, [sp]
 800af84:	f7f5 fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 800af88:	2800      	cmp	r0, #0
 800af8a:	f040 8288 	bne.w	800b49e <_dtoa_r+0x92e>
 800af8e:	462a      	mov	r2, r5
 800af90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800af94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af98:	f7f5 fda0 	bl	8000adc <__aeabi_dcmplt>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f040 827c 	bne.w	800b49a <_dtoa_r+0x92a>
 800afa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afa6:	e9cd 2300 	strd	r2, r3, [sp]
 800afaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afac:	2b00      	cmp	r3, #0
 800afae:	f2c0 8150 	blt.w	800b252 <_dtoa_r+0x6e2>
 800afb2:	f1ba 0f0e 	cmp.w	sl, #14
 800afb6:	f300 814c 	bgt.w	800b252 <_dtoa_r+0x6e2>
 800afba:	4b6a      	ldr	r3, [pc, #424]	; (800b164 <_dtoa_r+0x5f4>)
 800afbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afc0:	ed93 7b00 	vldr	d7, [r3]
 800afc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afcc:	f280 80d8 	bge.w	800b180 <_dtoa_r+0x610>
 800afd0:	f1b9 0f00 	cmp.w	r9, #0
 800afd4:	f300 80d4 	bgt.w	800b180 <_dtoa_r+0x610>
 800afd8:	f040 825e 	bne.w	800b498 <_dtoa_r+0x928>
 800afdc:	2200      	movs	r2, #0
 800afde:	4b66      	ldr	r3, [pc, #408]	; (800b178 <_dtoa_r+0x608>)
 800afe0:	ec51 0b17 	vmov	r0, r1, d7
 800afe4:	f7f5 fb08 	bl	80005f8 <__aeabi_dmul>
 800afe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afec:	f7f5 fd8a 	bl	8000b04 <__aeabi_dcmpge>
 800aff0:	464f      	mov	r7, r9
 800aff2:	464e      	mov	r6, r9
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f040 8234 	bne.w	800b462 <_dtoa_r+0x8f2>
 800affa:	2331      	movs	r3, #49	; 0x31
 800affc:	f10b 0501 	add.w	r5, fp, #1
 800b000:	f88b 3000 	strb.w	r3, [fp]
 800b004:	f10a 0a01 	add.w	sl, sl, #1
 800b008:	e22f      	b.n	800b46a <_dtoa_r+0x8fa>
 800b00a:	07f2      	lsls	r2, r6, #31
 800b00c:	d505      	bpl.n	800b01a <_dtoa_r+0x4aa>
 800b00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b012:	f7f5 faf1 	bl	80005f8 <__aeabi_dmul>
 800b016:	3501      	adds	r5, #1
 800b018:	2301      	movs	r3, #1
 800b01a:	1076      	asrs	r6, r6, #1
 800b01c:	3708      	adds	r7, #8
 800b01e:	e772      	b.n	800af06 <_dtoa_r+0x396>
 800b020:	2502      	movs	r5, #2
 800b022:	e774      	b.n	800af0e <_dtoa_r+0x39e>
 800b024:	f8cd a020 	str.w	sl, [sp, #32]
 800b028:	464f      	mov	r7, r9
 800b02a:	e791      	b.n	800af50 <_dtoa_r+0x3e0>
 800b02c:	4b4d      	ldr	r3, [pc, #308]	; (800b164 <_dtoa_r+0x5f4>)
 800b02e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b032:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d047      	beq.n	800b0cc <_dtoa_r+0x55c>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	2000      	movs	r0, #0
 800b042:	494e      	ldr	r1, [pc, #312]	; (800b17c <_dtoa_r+0x60c>)
 800b044:	f7f5 fc02 	bl	800084c <__aeabi_ddiv>
 800b048:	462a      	mov	r2, r5
 800b04a:	4633      	mov	r3, r6
 800b04c:	f7f5 f91c 	bl	8000288 <__aeabi_dsub>
 800b050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b054:	465d      	mov	r5, fp
 800b056:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b05a:	f7f5 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800b05e:	4606      	mov	r6, r0
 800b060:	f7f5 fa60 	bl	8000524 <__aeabi_i2d>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b06c:	f7f5 f90c 	bl	8000288 <__aeabi_dsub>
 800b070:	3630      	adds	r6, #48	; 0x30
 800b072:	f805 6b01 	strb.w	r6, [r5], #1
 800b076:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b07a:	e9cd 0100 	strd	r0, r1, [sp]
 800b07e:	f7f5 fd2d 	bl	8000adc <__aeabi_dcmplt>
 800b082:	2800      	cmp	r0, #0
 800b084:	d163      	bne.n	800b14e <_dtoa_r+0x5de>
 800b086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b08a:	2000      	movs	r0, #0
 800b08c:	4937      	ldr	r1, [pc, #220]	; (800b16c <_dtoa_r+0x5fc>)
 800b08e:	f7f5 f8fb 	bl	8000288 <__aeabi_dsub>
 800b092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b096:	f7f5 fd21 	bl	8000adc <__aeabi_dcmplt>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f040 80b7 	bne.w	800b20e <_dtoa_r+0x69e>
 800b0a0:	eba5 030b 	sub.w	r3, r5, fp
 800b0a4:	429f      	cmp	r7, r3
 800b0a6:	f77f af7c 	ble.w	800afa2 <_dtoa_r+0x432>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4b30      	ldr	r3, [pc, #192]	; (800b170 <_dtoa_r+0x600>)
 800b0ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0b2:	f7f5 faa1 	bl	80005f8 <__aeabi_dmul>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b0bc:	4b2c      	ldr	r3, [pc, #176]	; (800b170 <_dtoa_r+0x600>)
 800b0be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0c2:	f7f5 fa99 	bl	80005f8 <__aeabi_dmul>
 800b0c6:	e9cd 0100 	strd	r0, r1, [sp]
 800b0ca:	e7c4      	b.n	800b056 <_dtoa_r+0x4e6>
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	4633      	mov	r3, r6
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b0d8:	eb0b 0507 	add.w	r5, fp, r7
 800b0dc:	465e      	mov	r6, fp
 800b0de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0e2:	f7f5 fd39 	bl	8000b58 <__aeabi_d2iz>
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	f7f5 fa1c 	bl	8000524 <__aeabi_i2d>
 800b0ec:	3730      	adds	r7, #48	; 0x30
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0f6:	f7f5 f8c7 	bl	8000288 <__aeabi_dsub>
 800b0fa:	f806 7b01 	strb.w	r7, [r6], #1
 800b0fe:	42ae      	cmp	r6, r5
 800b100:	e9cd 0100 	strd	r0, r1, [sp]
 800b104:	f04f 0200 	mov.w	r2, #0
 800b108:	d126      	bne.n	800b158 <_dtoa_r+0x5e8>
 800b10a:	4b1c      	ldr	r3, [pc, #112]	; (800b17c <_dtoa_r+0x60c>)
 800b10c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b110:	f7f5 f8bc 	bl	800028c <__adddf3>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b11c:	f7f5 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 800b120:	2800      	cmp	r0, #0
 800b122:	d174      	bne.n	800b20e <_dtoa_r+0x69e>
 800b124:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b128:	2000      	movs	r0, #0
 800b12a:	4914      	ldr	r1, [pc, #80]	; (800b17c <_dtoa_r+0x60c>)
 800b12c:	f7f5 f8ac 	bl	8000288 <__aeabi_dsub>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b138:	f7f5 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f43f af30 	beq.w	800afa2 <_dtoa_r+0x432>
 800b142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b146:	2b30      	cmp	r3, #48	; 0x30
 800b148:	f105 32ff 	add.w	r2, r5, #4294967295
 800b14c:	d002      	beq.n	800b154 <_dtoa_r+0x5e4>
 800b14e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b152:	e04a      	b.n	800b1ea <_dtoa_r+0x67a>
 800b154:	4615      	mov	r5, r2
 800b156:	e7f4      	b.n	800b142 <_dtoa_r+0x5d2>
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <_dtoa_r+0x600>)
 800b15a:	f7f5 fa4d 	bl	80005f8 <__aeabi_dmul>
 800b15e:	e9cd 0100 	strd	r0, r1, [sp]
 800b162:	e7bc      	b.n	800b0de <_dtoa_r+0x56e>
 800b164:	0800c498 	.word	0x0800c498
 800b168:	0800c470 	.word	0x0800c470
 800b16c:	3ff00000 	.word	0x3ff00000
 800b170:	40240000 	.word	0x40240000
 800b174:	401c0000 	.word	0x401c0000
 800b178:	40140000 	.word	0x40140000
 800b17c:	3fe00000 	.word	0x3fe00000
 800b180:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b184:	465d      	mov	r5, fp
 800b186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 fb5d 	bl	800084c <__aeabi_ddiv>
 800b192:	f7f5 fce1 	bl	8000b58 <__aeabi_d2iz>
 800b196:	4680      	mov	r8, r0
 800b198:	f7f5 f9c4 	bl	8000524 <__aeabi_i2d>
 800b19c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b1b0:	f7f5 f86a 	bl	8000288 <__aeabi_dsub>
 800b1b4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1b8:	eba5 060b 	sub.w	r6, r5, fp
 800b1bc:	45b1      	cmp	r9, r6
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	d139      	bne.n	800b238 <_dtoa_r+0x6c8>
 800b1c4:	f7f5 f862 	bl	800028c <__adddf3>
 800b1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	460f      	mov	r7, r1
 800b1d0:	f7f5 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 800b1d4:	b9c8      	cbnz	r0, 800b20a <_dtoa_r+0x69a>
 800b1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1da:	4630      	mov	r0, r6
 800b1dc:	4639      	mov	r1, r7
 800b1de:	f7f5 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e2:	b110      	cbz	r0, 800b1ea <_dtoa_r+0x67a>
 800b1e4:	f018 0f01 	tst.w	r8, #1
 800b1e8:	d10f      	bne.n	800b20a <_dtoa_r+0x69a>
 800b1ea:	9904      	ldr	r1, [sp, #16]
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f000 fac1 	bl	800b774 <_Bfree>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1f6:	702b      	strb	r3, [r5, #0]
 800b1f8:	f10a 0301 	add.w	r3, sl, #1
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b200:	2b00      	cmp	r3, #0
 800b202:	f000 8241 	beq.w	800b688 <_dtoa_r+0xb18>
 800b206:	601d      	str	r5, [r3, #0]
 800b208:	e23e      	b.n	800b688 <_dtoa_r+0xb18>
 800b20a:	f8cd a020 	str.w	sl, [sp, #32]
 800b20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b212:	2a39      	cmp	r2, #57	; 0x39
 800b214:	f105 33ff 	add.w	r3, r5, #4294967295
 800b218:	d108      	bne.n	800b22c <_dtoa_r+0x6bc>
 800b21a:	459b      	cmp	fp, r3
 800b21c:	d10a      	bne.n	800b234 <_dtoa_r+0x6c4>
 800b21e:	9b08      	ldr	r3, [sp, #32]
 800b220:	3301      	adds	r3, #1
 800b222:	9308      	str	r3, [sp, #32]
 800b224:	2330      	movs	r3, #48	; 0x30
 800b226:	f88b 3000 	strb.w	r3, [fp]
 800b22a:	465b      	mov	r3, fp
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	3201      	adds	r2, #1
 800b230:	701a      	strb	r2, [r3, #0]
 800b232:	e78c      	b.n	800b14e <_dtoa_r+0x5de>
 800b234:	461d      	mov	r5, r3
 800b236:	e7ea      	b.n	800b20e <_dtoa_r+0x69e>
 800b238:	2200      	movs	r2, #0
 800b23a:	4b9b      	ldr	r3, [pc, #620]	; (800b4a8 <_dtoa_r+0x938>)
 800b23c:	f7f5 f9dc 	bl	80005f8 <__aeabi_dmul>
 800b240:	2200      	movs	r2, #0
 800b242:	2300      	movs	r3, #0
 800b244:	4606      	mov	r6, r0
 800b246:	460f      	mov	r7, r1
 800b248:	f7f5 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d09a      	beq.n	800b186 <_dtoa_r+0x616>
 800b250:	e7cb      	b.n	800b1ea <_dtoa_r+0x67a>
 800b252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b254:	2a00      	cmp	r2, #0
 800b256:	f000 808b 	beq.w	800b370 <_dtoa_r+0x800>
 800b25a:	9a06      	ldr	r2, [sp, #24]
 800b25c:	2a01      	cmp	r2, #1
 800b25e:	dc6e      	bgt.n	800b33e <_dtoa_r+0x7ce>
 800b260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b262:	2a00      	cmp	r2, #0
 800b264:	d067      	beq.n	800b336 <_dtoa_r+0x7c6>
 800b266:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b26a:	9f07      	ldr	r7, [sp, #28]
 800b26c:	9d05      	ldr	r5, [sp, #20]
 800b26e:	9a05      	ldr	r2, [sp, #20]
 800b270:	2101      	movs	r1, #1
 800b272:	441a      	add	r2, r3
 800b274:	4620      	mov	r0, r4
 800b276:	9205      	str	r2, [sp, #20]
 800b278:	4498      	add	r8, r3
 800b27a:	f000 fb1b 	bl	800b8b4 <__i2b>
 800b27e:	4606      	mov	r6, r0
 800b280:	2d00      	cmp	r5, #0
 800b282:	dd0c      	ble.n	800b29e <_dtoa_r+0x72e>
 800b284:	f1b8 0f00 	cmp.w	r8, #0
 800b288:	dd09      	ble.n	800b29e <_dtoa_r+0x72e>
 800b28a:	4545      	cmp	r5, r8
 800b28c:	9a05      	ldr	r2, [sp, #20]
 800b28e:	462b      	mov	r3, r5
 800b290:	bfa8      	it	ge
 800b292:	4643      	movge	r3, r8
 800b294:	1ad2      	subs	r2, r2, r3
 800b296:	9205      	str	r2, [sp, #20]
 800b298:	1aed      	subs	r5, r5, r3
 800b29a:	eba8 0803 	sub.w	r8, r8, r3
 800b29e:	9b07      	ldr	r3, [sp, #28]
 800b2a0:	b1eb      	cbz	r3, 800b2de <_dtoa_r+0x76e>
 800b2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d067      	beq.n	800b378 <_dtoa_r+0x808>
 800b2a8:	b18f      	cbz	r7, 800b2ce <_dtoa_r+0x75e>
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	463a      	mov	r2, r7
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f000 fba0 	bl	800b9f4 <__pow5mult>
 800b2b4:	9a04      	ldr	r2, [sp, #16]
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fb03 	bl	800b8c6 <__multiply>
 800b2c0:	9904      	ldr	r1, [sp, #16]
 800b2c2:	9008      	str	r0, [sp, #32]
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 fa55 	bl	800b774 <_Bfree>
 800b2ca:	9b08      	ldr	r3, [sp, #32]
 800b2cc:	9304      	str	r3, [sp, #16]
 800b2ce:	9b07      	ldr	r3, [sp, #28]
 800b2d0:	1bda      	subs	r2, r3, r7
 800b2d2:	d004      	beq.n	800b2de <_dtoa_r+0x76e>
 800b2d4:	9904      	ldr	r1, [sp, #16]
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 fb8c 	bl	800b9f4 <__pow5mult>
 800b2dc:	9004      	str	r0, [sp, #16]
 800b2de:	2101      	movs	r1, #1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 fae7 	bl	800b8b4 <__i2b>
 800b2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 81d0 	beq.w	800b690 <_dtoa_r+0xb20>
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	4601      	mov	r1, r0
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 fb7d 	bl	800b9f4 <__pow5mult>
 800b2fa:	9b06      	ldr	r3, [sp, #24]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	4607      	mov	r7, r0
 800b300:	dc40      	bgt.n	800b384 <_dtoa_r+0x814>
 800b302:	9b00      	ldr	r3, [sp, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d139      	bne.n	800b37c <_dtoa_r+0x80c>
 800b308:	9b01      	ldr	r3, [sp, #4]
 800b30a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d136      	bne.n	800b380 <_dtoa_r+0x810>
 800b312:	9b01      	ldr	r3, [sp, #4]
 800b314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b318:	0d1b      	lsrs	r3, r3, #20
 800b31a:	051b      	lsls	r3, r3, #20
 800b31c:	b12b      	cbz	r3, 800b32a <_dtoa_r+0x7ba>
 800b31e:	9b05      	ldr	r3, [sp, #20]
 800b320:	3301      	adds	r3, #1
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	f108 0801 	add.w	r8, r8, #1
 800b328:	2301      	movs	r3, #1
 800b32a:	9307      	str	r3, [sp, #28]
 800b32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d12a      	bne.n	800b388 <_dtoa_r+0x818>
 800b332:	2001      	movs	r0, #1
 800b334:	e030      	b.n	800b398 <_dtoa_r+0x828>
 800b336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b338:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b33c:	e795      	b.n	800b26a <_dtoa_r+0x6fa>
 800b33e:	9b07      	ldr	r3, [sp, #28]
 800b340:	f109 37ff 	add.w	r7, r9, #4294967295
 800b344:	42bb      	cmp	r3, r7
 800b346:	bfbf      	itttt	lt
 800b348:	9b07      	ldrlt	r3, [sp, #28]
 800b34a:	9707      	strlt	r7, [sp, #28]
 800b34c:	1afa      	sublt	r2, r7, r3
 800b34e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b350:	bfbb      	ittet	lt
 800b352:	189b      	addlt	r3, r3, r2
 800b354:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b356:	1bdf      	subge	r7, r3, r7
 800b358:	2700      	movlt	r7, #0
 800b35a:	f1b9 0f00 	cmp.w	r9, #0
 800b35e:	bfb5      	itete	lt
 800b360:	9b05      	ldrlt	r3, [sp, #20]
 800b362:	9d05      	ldrge	r5, [sp, #20]
 800b364:	eba3 0509 	sublt.w	r5, r3, r9
 800b368:	464b      	movge	r3, r9
 800b36a:	bfb8      	it	lt
 800b36c:	2300      	movlt	r3, #0
 800b36e:	e77e      	b.n	800b26e <_dtoa_r+0x6fe>
 800b370:	9f07      	ldr	r7, [sp, #28]
 800b372:	9d05      	ldr	r5, [sp, #20]
 800b374:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b376:	e783      	b.n	800b280 <_dtoa_r+0x710>
 800b378:	9a07      	ldr	r2, [sp, #28]
 800b37a:	e7ab      	b.n	800b2d4 <_dtoa_r+0x764>
 800b37c:	2300      	movs	r3, #0
 800b37e:	e7d4      	b.n	800b32a <_dtoa_r+0x7ba>
 800b380:	9b00      	ldr	r3, [sp, #0]
 800b382:	e7d2      	b.n	800b32a <_dtoa_r+0x7ba>
 800b384:	2300      	movs	r3, #0
 800b386:	9307      	str	r3, [sp, #28]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b38e:	6918      	ldr	r0, [r3, #16]
 800b390:	f000 fa42 	bl	800b818 <__hi0bits>
 800b394:	f1c0 0020 	rsb	r0, r0, #32
 800b398:	4440      	add	r0, r8
 800b39a:	f010 001f 	ands.w	r0, r0, #31
 800b39e:	d047      	beq.n	800b430 <_dtoa_r+0x8c0>
 800b3a0:	f1c0 0320 	rsb	r3, r0, #32
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	dd3b      	ble.n	800b420 <_dtoa_r+0x8b0>
 800b3a8:	9b05      	ldr	r3, [sp, #20]
 800b3aa:	f1c0 001c 	rsb	r0, r0, #28
 800b3ae:	4403      	add	r3, r0
 800b3b0:	9305      	str	r3, [sp, #20]
 800b3b2:	4405      	add	r5, r0
 800b3b4:	4480      	add	r8, r0
 800b3b6:	9b05      	ldr	r3, [sp, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	dd05      	ble.n	800b3c8 <_dtoa_r+0x858>
 800b3bc:	461a      	mov	r2, r3
 800b3be:	9904      	ldr	r1, [sp, #16]
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fb65 	bl	800ba90 <__lshift>
 800b3c6:	9004      	str	r0, [sp, #16]
 800b3c8:	f1b8 0f00 	cmp.w	r8, #0
 800b3cc:	dd05      	ble.n	800b3da <_dtoa_r+0x86a>
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	4642      	mov	r2, r8
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fb5c 	bl	800ba90 <__lshift>
 800b3d8:	4607      	mov	r7, r0
 800b3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3dc:	b353      	cbz	r3, 800b434 <_dtoa_r+0x8c4>
 800b3de:	4639      	mov	r1, r7
 800b3e0:	9804      	ldr	r0, [sp, #16]
 800b3e2:	f000 fba9 	bl	800bb38 <__mcmp>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	da24      	bge.n	800b434 <_dtoa_r+0x8c4>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	9904      	ldr	r1, [sp, #16]
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 f9d6 	bl	800b7a2 <__multadd>
 800b3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f8:	9004      	str	r0, [sp, #16]
 800b3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 814d 	beq.w	800b69e <_dtoa_r+0xb2e>
 800b404:	2300      	movs	r3, #0
 800b406:	4631      	mov	r1, r6
 800b408:	220a      	movs	r2, #10
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 f9c9 	bl	800b7a2 <__multadd>
 800b410:	9b02      	ldr	r3, [sp, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	4606      	mov	r6, r0
 800b416:	dc4f      	bgt.n	800b4b8 <_dtoa_r+0x948>
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	dd4c      	ble.n	800b4b8 <_dtoa_r+0x948>
 800b41e:	e011      	b.n	800b444 <_dtoa_r+0x8d4>
 800b420:	d0c9      	beq.n	800b3b6 <_dtoa_r+0x846>
 800b422:	9a05      	ldr	r2, [sp, #20]
 800b424:	331c      	adds	r3, #28
 800b426:	441a      	add	r2, r3
 800b428:	9205      	str	r2, [sp, #20]
 800b42a:	441d      	add	r5, r3
 800b42c:	4498      	add	r8, r3
 800b42e:	e7c2      	b.n	800b3b6 <_dtoa_r+0x846>
 800b430:	4603      	mov	r3, r0
 800b432:	e7f6      	b.n	800b422 <_dtoa_r+0x8b2>
 800b434:	f1b9 0f00 	cmp.w	r9, #0
 800b438:	dc38      	bgt.n	800b4ac <_dtoa_r+0x93c>
 800b43a:	9b06      	ldr	r3, [sp, #24]
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	dd35      	ble.n	800b4ac <_dtoa_r+0x93c>
 800b440:	f8cd 9008 	str.w	r9, [sp, #8]
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	b963      	cbnz	r3, 800b462 <_dtoa_r+0x8f2>
 800b448:	4639      	mov	r1, r7
 800b44a:	2205      	movs	r2, #5
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 f9a8 	bl	800b7a2 <__multadd>
 800b452:	4601      	mov	r1, r0
 800b454:	4607      	mov	r7, r0
 800b456:	9804      	ldr	r0, [sp, #16]
 800b458:	f000 fb6e 	bl	800bb38 <__mcmp>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f73f adcc 	bgt.w	800affa <_dtoa_r+0x48a>
 800b462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b464:	465d      	mov	r5, fp
 800b466:	ea6f 0a03 	mvn.w	sl, r3
 800b46a:	f04f 0900 	mov.w	r9, #0
 800b46e:	4639      	mov	r1, r7
 800b470:	4620      	mov	r0, r4
 800b472:	f000 f97f 	bl	800b774 <_Bfree>
 800b476:	2e00      	cmp	r6, #0
 800b478:	f43f aeb7 	beq.w	800b1ea <_dtoa_r+0x67a>
 800b47c:	f1b9 0f00 	cmp.w	r9, #0
 800b480:	d005      	beq.n	800b48e <_dtoa_r+0x91e>
 800b482:	45b1      	cmp	r9, r6
 800b484:	d003      	beq.n	800b48e <_dtoa_r+0x91e>
 800b486:	4649      	mov	r1, r9
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f973 	bl	800b774 <_Bfree>
 800b48e:	4631      	mov	r1, r6
 800b490:	4620      	mov	r0, r4
 800b492:	f000 f96f 	bl	800b774 <_Bfree>
 800b496:	e6a8      	b.n	800b1ea <_dtoa_r+0x67a>
 800b498:	2700      	movs	r7, #0
 800b49a:	463e      	mov	r6, r7
 800b49c:	e7e1      	b.n	800b462 <_dtoa_r+0x8f2>
 800b49e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b4a2:	463e      	mov	r6, r7
 800b4a4:	e5a9      	b.n	800affa <_dtoa_r+0x48a>
 800b4a6:	bf00      	nop
 800b4a8:	40240000 	.word	0x40240000
 800b4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 80fa 	beq.w	800b6ac <_dtoa_r+0xb3c>
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	dd05      	ble.n	800b4c8 <_dtoa_r+0x958>
 800b4bc:	4631      	mov	r1, r6
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fae5 	bl	800ba90 <__lshift>
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	9b07      	ldr	r3, [sp, #28]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d04c      	beq.n	800b568 <_dtoa_r+0x9f8>
 800b4ce:	6871      	ldr	r1, [r6, #4]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 f91b 	bl	800b70c <_Balloc>
 800b4d6:	6932      	ldr	r2, [r6, #16]
 800b4d8:	3202      	adds	r2, #2
 800b4da:	4605      	mov	r5, r0
 800b4dc:	0092      	lsls	r2, r2, #2
 800b4de:	f106 010c 	add.w	r1, r6, #12
 800b4e2:	300c      	adds	r0, #12
 800b4e4:	f7fe fe04 	bl	800a0f0 <memcpy>
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 facf 	bl	800ba90 <__lshift>
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	f8cd b014 	str.w	fp, [sp, #20]
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	46b1      	mov	r9, r6
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	4606      	mov	r6, r0
 800b502:	4639      	mov	r1, r7
 800b504:	9804      	ldr	r0, [sp, #16]
 800b506:	f7ff faa7 	bl	800aa58 <quorem>
 800b50a:	4649      	mov	r1, r9
 800b50c:	4605      	mov	r5, r0
 800b50e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b512:	9804      	ldr	r0, [sp, #16]
 800b514:	f000 fb10 	bl	800bb38 <__mcmp>
 800b518:	4632      	mov	r2, r6
 800b51a:	9000      	str	r0, [sp, #0]
 800b51c:	4639      	mov	r1, r7
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fb24 	bl	800bb6c <__mdiff>
 800b524:	68c3      	ldr	r3, [r0, #12]
 800b526:	4602      	mov	r2, r0
 800b528:	bb03      	cbnz	r3, 800b56c <_dtoa_r+0x9fc>
 800b52a:	4601      	mov	r1, r0
 800b52c:	9008      	str	r0, [sp, #32]
 800b52e:	9804      	ldr	r0, [sp, #16]
 800b530:	f000 fb02 	bl	800bb38 <__mcmp>
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	4603      	mov	r3, r0
 800b538:	4611      	mov	r1, r2
 800b53a:	4620      	mov	r0, r4
 800b53c:	9308      	str	r3, [sp, #32]
 800b53e:	f000 f919 	bl	800b774 <_Bfree>
 800b542:	9b08      	ldr	r3, [sp, #32]
 800b544:	b9a3      	cbnz	r3, 800b570 <_dtoa_r+0xa00>
 800b546:	9a06      	ldr	r2, [sp, #24]
 800b548:	b992      	cbnz	r2, 800b570 <_dtoa_r+0xa00>
 800b54a:	9a07      	ldr	r2, [sp, #28]
 800b54c:	b982      	cbnz	r2, 800b570 <_dtoa_r+0xa00>
 800b54e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b552:	d029      	beq.n	800b5a8 <_dtoa_r+0xa38>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	dd01      	ble.n	800b55e <_dtoa_r+0x9ee>
 800b55a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b55e:	9b05      	ldr	r3, [sp, #20]
 800b560:	1c5d      	adds	r5, r3, #1
 800b562:	f883 8000 	strb.w	r8, [r3]
 800b566:	e782      	b.n	800b46e <_dtoa_r+0x8fe>
 800b568:	4630      	mov	r0, r6
 800b56a:	e7c2      	b.n	800b4f2 <_dtoa_r+0x982>
 800b56c:	2301      	movs	r3, #1
 800b56e:	e7e3      	b.n	800b538 <_dtoa_r+0x9c8>
 800b570:	9a00      	ldr	r2, [sp, #0]
 800b572:	2a00      	cmp	r2, #0
 800b574:	db04      	blt.n	800b580 <_dtoa_r+0xa10>
 800b576:	d125      	bne.n	800b5c4 <_dtoa_r+0xa54>
 800b578:	9a06      	ldr	r2, [sp, #24]
 800b57a:	bb1a      	cbnz	r2, 800b5c4 <_dtoa_r+0xa54>
 800b57c:	9a07      	ldr	r2, [sp, #28]
 800b57e:	bb0a      	cbnz	r2, 800b5c4 <_dtoa_r+0xa54>
 800b580:	2b00      	cmp	r3, #0
 800b582:	ddec      	ble.n	800b55e <_dtoa_r+0x9ee>
 800b584:	2201      	movs	r2, #1
 800b586:	9904      	ldr	r1, [sp, #16]
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 fa81 	bl	800ba90 <__lshift>
 800b58e:	4639      	mov	r1, r7
 800b590:	9004      	str	r0, [sp, #16]
 800b592:	f000 fad1 	bl	800bb38 <__mcmp>
 800b596:	2800      	cmp	r0, #0
 800b598:	dc03      	bgt.n	800b5a2 <_dtoa_r+0xa32>
 800b59a:	d1e0      	bne.n	800b55e <_dtoa_r+0x9ee>
 800b59c:	f018 0f01 	tst.w	r8, #1
 800b5a0:	d0dd      	beq.n	800b55e <_dtoa_r+0x9ee>
 800b5a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5a6:	d1d8      	bne.n	800b55a <_dtoa_r+0x9ea>
 800b5a8:	9b05      	ldr	r3, [sp, #20]
 800b5aa:	9a05      	ldr	r2, [sp, #20]
 800b5ac:	1c5d      	adds	r5, r3, #1
 800b5ae:	2339      	movs	r3, #57	; 0x39
 800b5b0:	7013      	strb	r3, [r2, #0]
 800b5b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5b6:	2b39      	cmp	r3, #57	; 0x39
 800b5b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b5bc:	d04f      	beq.n	800b65e <_dtoa_r+0xaee>
 800b5be:	3301      	adds	r3, #1
 800b5c0:	7013      	strb	r3, [r2, #0]
 800b5c2:	e754      	b.n	800b46e <_dtoa_r+0x8fe>
 800b5c4:	9a05      	ldr	r2, [sp, #20]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f102 0501 	add.w	r5, r2, #1
 800b5cc:	dd06      	ble.n	800b5dc <_dtoa_r+0xa6c>
 800b5ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5d2:	d0e9      	beq.n	800b5a8 <_dtoa_r+0xa38>
 800b5d4:	f108 0801 	add.w	r8, r8, #1
 800b5d8:	9b05      	ldr	r3, [sp, #20]
 800b5da:	e7c2      	b.n	800b562 <_dtoa_r+0x9f2>
 800b5dc:	9a02      	ldr	r2, [sp, #8]
 800b5de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b5e2:	eba5 030b 	sub.w	r3, r5, fp
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d021      	beq.n	800b62e <_dtoa_r+0xabe>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	220a      	movs	r2, #10
 800b5ee:	9904      	ldr	r1, [sp, #16]
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 f8d6 	bl	800b7a2 <__multadd>
 800b5f6:	45b1      	cmp	r9, r6
 800b5f8:	9004      	str	r0, [sp, #16]
 800b5fa:	f04f 0300 	mov.w	r3, #0
 800b5fe:	f04f 020a 	mov.w	r2, #10
 800b602:	4649      	mov	r1, r9
 800b604:	4620      	mov	r0, r4
 800b606:	d105      	bne.n	800b614 <_dtoa_r+0xaa4>
 800b608:	f000 f8cb 	bl	800b7a2 <__multadd>
 800b60c:	4681      	mov	r9, r0
 800b60e:	4606      	mov	r6, r0
 800b610:	9505      	str	r5, [sp, #20]
 800b612:	e776      	b.n	800b502 <_dtoa_r+0x992>
 800b614:	f000 f8c5 	bl	800b7a2 <__multadd>
 800b618:	4631      	mov	r1, r6
 800b61a:	4681      	mov	r9, r0
 800b61c:	2300      	movs	r3, #0
 800b61e:	220a      	movs	r2, #10
 800b620:	4620      	mov	r0, r4
 800b622:	f000 f8be 	bl	800b7a2 <__multadd>
 800b626:	4606      	mov	r6, r0
 800b628:	e7f2      	b.n	800b610 <_dtoa_r+0xaa0>
 800b62a:	f04f 0900 	mov.w	r9, #0
 800b62e:	2201      	movs	r2, #1
 800b630:	9904      	ldr	r1, [sp, #16]
 800b632:	4620      	mov	r0, r4
 800b634:	f000 fa2c 	bl	800ba90 <__lshift>
 800b638:	4639      	mov	r1, r7
 800b63a:	9004      	str	r0, [sp, #16]
 800b63c:	f000 fa7c 	bl	800bb38 <__mcmp>
 800b640:	2800      	cmp	r0, #0
 800b642:	dcb6      	bgt.n	800b5b2 <_dtoa_r+0xa42>
 800b644:	d102      	bne.n	800b64c <_dtoa_r+0xadc>
 800b646:	f018 0f01 	tst.w	r8, #1
 800b64a:	d1b2      	bne.n	800b5b2 <_dtoa_r+0xa42>
 800b64c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b650:	2b30      	cmp	r3, #48	; 0x30
 800b652:	f105 32ff 	add.w	r2, r5, #4294967295
 800b656:	f47f af0a 	bne.w	800b46e <_dtoa_r+0x8fe>
 800b65a:	4615      	mov	r5, r2
 800b65c:	e7f6      	b.n	800b64c <_dtoa_r+0xadc>
 800b65e:	4593      	cmp	fp, r2
 800b660:	d105      	bne.n	800b66e <_dtoa_r+0xafe>
 800b662:	2331      	movs	r3, #49	; 0x31
 800b664:	f10a 0a01 	add.w	sl, sl, #1
 800b668:	f88b 3000 	strb.w	r3, [fp]
 800b66c:	e6ff      	b.n	800b46e <_dtoa_r+0x8fe>
 800b66e:	4615      	mov	r5, r2
 800b670:	e79f      	b.n	800b5b2 <_dtoa_r+0xa42>
 800b672:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b6d8 <_dtoa_r+0xb68>
 800b676:	e007      	b.n	800b688 <_dtoa_r+0xb18>
 800b678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b67a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b6dc <_dtoa_r+0xb6c>
 800b67e:	b11b      	cbz	r3, 800b688 <_dtoa_r+0xb18>
 800b680:	f10b 0308 	add.w	r3, fp, #8
 800b684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	4658      	mov	r0, fp
 800b68a:	b017      	add	sp, #92	; 0x5c
 800b68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b690:	9b06      	ldr	r3, [sp, #24]
 800b692:	2b01      	cmp	r3, #1
 800b694:	f77f ae35 	ble.w	800b302 <_dtoa_r+0x792>
 800b698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b69a:	9307      	str	r3, [sp, #28]
 800b69c:	e649      	b.n	800b332 <_dtoa_r+0x7c2>
 800b69e:	9b02      	ldr	r3, [sp, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	dc03      	bgt.n	800b6ac <_dtoa_r+0xb3c>
 800b6a4:	9b06      	ldr	r3, [sp, #24]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	f73f aecc 	bgt.w	800b444 <_dtoa_r+0x8d4>
 800b6ac:	465d      	mov	r5, fp
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	9804      	ldr	r0, [sp, #16]
 800b6b2:	f7ff f9d1 	bl	800aa58 <quorem>
 800b6b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b6ba:	f805 8b01 	strb.w	r8, [r5], #1
 800b6be:	9a02      	ldr	r2, [sp, #8]
 800b6c0:	eba5 030b 	sub.w	r3, r5, fp
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	ddb0      	ble.n	800b62a <_dtoa_r+0xaba>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	220a      	movs	r2, #10
 800b6cc:	9904      	ldr	r1, [sp, #16]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 f867 	bl	800b7a2 <__multadd>
 800b6d4:	9004      	str	r0, [sp, #16]
 800b6d6:	e7ea      	b.n	800b6ae <_dtoa_r+0xb3e>
 800b6d8:	0800c43c 	.word	0x0800c43c
 800b6dc:	0800c460 	.word	0x0800c460

0800b6e0 <_localeconv_r>:
 800b6e0:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <_localeconv_r+0x14>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6a18      	ldr	r0, [r3, #32]
 800b6e6:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <_localeconv_r+0x18>)
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	bf08      	it	eq
 800b6ec:	4618      	moveq	r0, r3
 800b6ee:	30f0      	adds	r0, #240	; 0xf0
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	2000005c 	.word	0x2000005c
 800b6f8:	200000c0 	.word	0x200000c0

0800b6fc <malloc>:
 800b6fc:	4b02      	ldr	r3, [pc, #8]	; (800b708 <malloc+0xc>)
 800b6fe:	4601      	mov	r1, r0
 800b700:	6818      	ldr	r0, [r3, #0]
 800b702:	f000 bb3b 	b.w	800bd7c <_malloc_r>
 800b706:	bf00      	nop
 800b708:	2000005c 	.word	0x2000005c

0800b70c <_Balloc>:
 800b70c:	b570      	push	{r4, r5, r6, lr}
 800b70e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b710:	4604      	mov	r4, r0
 800b712:	460e      	mov	r6, r1
 800b714:	b93d      	cbnz	r5, 800b726 <_Balloc+0x1a>
 800b716:	2010      	movs	r0, #16
 800b718:	f7ff fff0 	bl	800b6fc <malloc>
 800b71c:	6260      	str	r0, [r4, #36]	; 0x24
 800b71e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b722:	6005      	str	r5, [r0, #0]
 800b724:	60c5      	str	r5, [r0, #12]
 800b726:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b728:	68eb      	ldr	r3, [r5, #12]
 800b72a:	b183      	cbz	r3, 800b74e <_Balloc+0x42>
 800b72c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b734:	b9b8      	cbnz	r0, 800b766 <_Balloc+0x5a>
 800b736:	2101      	movs	r1, #1
 800b738:	fa01 f506 	lsl.w	r5, r1, r6
 800b73c:	1d6a      	adds	r2, r5, #5
 800b73e:	0092      	lsls	r2, r2, #2
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fabf 	bl	800bcc4 <_calloc_r>
 800b746:	b160      	cbz	r0, 800b762 <_Balloc+0x56>
 800b748:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b74c:	e00e      	b.n	800b76c <_Balloc+0x60>
 800b74e:	2221      	movs	r2, #33	; 0x21
 800b750:	2104      	movs	r1, #4
 800b752:	4620      	mov	r0, r4
 800b754:	f000 fab6 	bl	800bcc4 <_calloc_r>
 800b758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b75a:	60e8      	str	r0, [r5, #12]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1e4      	bne.n	800b72c <_Balloc+0x20>
 800b762:	2000      	movs	r0, #0
 800b764:	bd70      	pop	{r4, r5, r6, pc}
 800b766:	6802      	ldr	r2, [r0, #0]
 800b768:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b76c:	2300      	movs	r3, #0
 800b76e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b772:	e7f7      	b.n	800b764 <_Balloc+0x58>

0800b774 <_Bfree>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b778:	4606      	mov	r6, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	b93c      	cbnz	r4, 800b78e <_Bfree+0x1a>
 800b77e:	2010      	movs	r0, #16
 800b780:	f7ff ffbc 	bl	800b6fc <malloc>
 800b784:	6270      	str	r0, [r6, #36]	; 0x24
 800b786:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b78a:	6004      	str	r4, [r0, #0]
 800b78c:	60c4      	str	r4, [r0, #12]
 800b78e:	b13d      	cbz	r5, 800b7a0 <_Bfree+0x2c>
 800b790:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b792:	686a      	ldr	r2, [r5, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b79a:	6029      	str	r1, [r5, #0]
 800b79c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}

0800b7a2 <__multadd>:
 800b7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a6:	690d      	ldr	r5, [r1, #16]
 800b7a8:	461f      	mov	r7, r3
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	f101 0c14 	add.w	ip, r1, #20
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f8dc 0000 	ldr.w	r0, [ip]
 800b7b8:	b281      	uxth	r1, r0
 800b7ba:	fb02 7101 	mla	r1, r2, r1, r7
 800b7be:	0c0f      	lsrs	r7, r1, #16
 800b7c0:	0c00      	lsrs	r0, r0, #16
 800b7c2:	fb02 7000 	mla	r0, r2, r0, r7
 800b7c6:	b289      	uxth	r1, r1
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b7ce:	429d      	cmp	r5, r3
 800b7d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b7d4:	f84c 1b04 	str.w	r1, [ip], #4
 800b7d8:	dcec      	bgt.n	800b7b4 <__multadd+0x12>
 800b7da:	b1d7      	cbz	r7, 800b812 <__multadd+0x70>
 800b7dc:	68a3      	ldr	r3, [r4, #8]
 800b7de:	42ab      	cmp	r3, r5
 800b7e0:	dc12      	bgt.n	800b808 <__multadd+0x66>
 800b7e2:	6861      	ldr	r1, [r4, #4]
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	3101      	adds	r1, #1
 800b7e8:	f7ff ff90 	bl	800b70c <_Balloc>
 800b7ec:	6922      	ldr	r2, [r4, #16]
 800b7ee:	3202      	adds	r2, #2
 800b7f0:	f104 010c 	add.w	r1, r4, #12
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	0092      	lsls	r2, r2, #2
 800b7f8:	300c      	adds	r0, #12
 800b7fa:	f7fe fc79 	bl	800a0f0 <memcpy>
 800b7fe:	4621      	mov	r1, r4
 800b800:	4630      	mov	r0, r6
 800b802:	f7ff ffb7 	bl	800b774 <_Bfree>
 800b806:	4644      	mov	r4, r8
 800b808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b80c:	3501      	adds	r5, #1
 800b80e:	615f      	str	r7, [r3, #20]
 800b810:	6125      	str	r5, [r4, #16]
 800b812:	4620      	mov	r0, r4
 800b814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b818 <__hi0bits>:
 800b818:	0c02      	lsrs	r2, r0, #16
 800b81a:	0412      	lsls	r2, r2, #16
 800b81c:	4603      	mov	r3, r0
 800b81e:	b9b2      	cbnz	r2, 800b84e <__hi0bits+0x36>
 800b820:	0403      	lsls	r3, r0, #16
 800b822:	2010      	movs	r0, #16
 800b824:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b828:	bf04      	itt	eq
 800b82a:	021b      	lsleq	r3, r3, #8
 800b82c:	3008      	addeq	r0, #8
 800b82e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b832:	bf04      	itt	eq
 800b834:	011b      	lsleq	r3, r3, #4
 800b836:	3004      	addeq	r0, #4
 800b838:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b83c:	bf04      	itt	eq
 800b83e:	009b      	lsleq	r3, r3, #2
 800b840:	3002      	addeq	r0, #2
 800b842:	2b00      	cmp	r3, #0
 800b844:	db06      	blt.n	800b854 <__hi0bits+0x3c>
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	d503      	bpl.n	800b852 <__hi0bits+0x3a>
 800b84a:	3001      	adds	r0, #1
 800b84c:	4770      	bx	lr
 800b84e:	2000      	movs	r0, #0
 800b850:	e7e8      	b.n	800b824 <__hi0bits+0xc>
 800b852:	2020      	movs	r0, #32
 800b854:	4770      	bx	lr

0800b856 <__lo0bits>:
 800b856:	6803      	ldr	r3, [r0, #0]
 800b858:	f013 0207 	ands.w	r2, r3, #7
 800b85c:	4601      	mov	r1, r0
 800b85e:	d00b      	beq.n	800b878 <__lo0bits+0x22>
 800b860:	07da      	lsls	r2, r3, #31
 800b862:	d423      	bmi.n	800b8ac <__lo0bits+0x56>
 800b864:	0798      	lsls	r0, r3, #30
 800b866:	bf49      	itett	mi
 800b868:	085b      	lsrmi	r3, r3, #1
 800b86a:	089b      	lsrpl	r3, r3, #2
 800b86c:	2001      	movmi	r0, #1
 800b86e:	600b      	strmi	r3, [r1, #0]
 800b870:	bf5c      	itt	pl
 800b872:	600b      	strpl	r3, [r1, #0]
 800b874:	2002      	movpl	r0, #2
 800b876:	4770      	bx	lr
 800b878:	b298      	uxth	r0, r3
 800b87a:	b9a8      	cbnz	r0, 800b8a8 <__lo0bits+0x52>
 800b87c:	0c1b      	lsrs	r3, r3, #16
 800b87e:	2010      	movs	r0, #16
 800b880:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b884:	bf04      	itt	eq
 800b886:	0a1b      	lsreq	r3, r3, #8
 800b888:	3008      	addeq	r0, #8
 800b88a:	071a      	lsls	r2, r3, #28
 800b88c:	bf04      	itt	eq
 800b88e:	091b      	lsreq	r3, r3, #4
 800b890:	3004      	addeq	r0, #4
 800b892:	079a      	lsls	r2, r3, #30
 800b894:	bf04      	itt	eq
 800b896:	089b      	lsreq	r3, r3, #2
 800b898:	3002      	addeq	r0, #2
 800b89a:	07da      	lsls	r2, r3, #31
 800b89c:	d402      	bmi.n	800b8a4 <__lo0bits+0x4e>
 800b89e:	085b      	lsrs	r3, r3, #1
 800b8a0:	d006      	beq.n	800b8b0 <__lo0bits+0x5a>
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	600b      	str	r3, [r1, #0]
 800b8a6:	4770      	bx	lr
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	e7e9      	b.n	800b880 <__lo0bits+0x2a>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	4770      	bx	lr
 800b8b0:	2020      	movs	r0, #32
 800b8b2:	4770      	bx	lr

0800b8b4 <__i2b>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	f7ff ff27 	bl	800b70c <_Balloc>
 800b8be:	2201      	movs	r2, #1
 800b8c0:	6144      	str	r4, [r0, #20]
 800b8c2:	6102      	str	r2, [r0, #16]
 800b8c4:	bd10      	pop	{r4, pc}

0800b8c6 <__multiply>:
 800b8c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ca:	4614      	mov	r4, r2
 800b8cc:	690a      	ldr	r2, [r1, #16]
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	bfb8      	it	lt
 800b8d4:	460b      	movlt	r3, r1
 800b8d6:	4688      	mov	r8, r1
 800b8d8:	bfbc      	itt	lt
 800b8da:	46a0      	movlt	r8, r4
 800b8dc:	461c      	movlt	r4, r3
 800b8de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8ee:	eb07 0609 	add.w	r6, r7, r9
 800b8f2:	42b3      	cmp	r3, r6
 800b8f4:	bfb8      	it	lt
 800b8f6:	3101      	addlt	r1, #1
 800b8f8:	f7ff ff08 	bl	800b70c <_Balloc>
 800b8fc:	f100 0514 	add.w	r5, r0, #20
 800b900:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b904:	462b      	mov	r3, r5
 800b906:	2200      	movs	r2, #0
 800b908:	4573      	cmp	r3, lr
 800b90a:	d316      	bcc.n	800b93a <__multiply+0x74>
 800b90c:	f104 0214 	add.w	r2, r4, #20
 800b910:	f108 0114 	add.w	r1, r8, #20
 800b914:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b918:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	9b00      	ldr	r3, [sp, #0]
 800b920:	9201      	str	r2, [sp, #4]
 800b922:	4293      	cmp	r3, r2
 800b924:	d80c      	bhi.n	800b940 <__multiply+0x7a>
 800b926:	2e00      	cmp	r6, #0
 800b928:	dd03      	ble.n	800b932 <__multiply+0x6c>
 800b92a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d05d      	beq.n	800b9ee <__multiply+0x128>
 800b932:	6106      	str	r6, [r0, #16]
 800b934:	b003      	add	sp, #12
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	f843 2b04 	str.w	r2, [r3], #4
 800b93e:	e7e3      	b.n	800b908 <__multiply+0x42>
 800b940:	f8b2 b000 	ldrh.w	fp, [r2]
 800b944:	f1bb 0f00 	cmp.w	fp, #0
 800b948:	d023      	beq.n	800b992 <__multiply+0xcc>
 800b94a:	4689      	mov	r9, r1
 800b94c:	46ac      	mov	ip, r5
 800b94e:	f04f 0800 	mov.w	r8, #0
 800b952:	f859 4b04 	ldr.w	r4, [r9], #4
 800b956:	f8dc a000 	ldr.w	sl, [ip]
 800b95a:	b2a3      	uxth	r3, r4
 800b95c:	fa1f fa8a 	uxth.w	sl, sl
 800b960:	fb0b a303 	mla	r3, fp, r3, sl
 800b964:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b968:	f8dc 4000 	ldr.w	r4, [ip]
 800b96c:	4443      	add	r3, r8
 800b96e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b972:	fb0b 840a 	mla	r4, fp, sl, r8
 800b976:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b97a:	46e2      	mov	sl, ip
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b982:	454f      	cmp	r7, r9
 800b984:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b988:	f84a 3b04 	str.w	r3, [sl], #4
 800b98c:	d82b      	bhi.n	800b9e6 <__multiply+0x120>
 800b98e:	f8cc 8004 	str.w	r8, [ip, #4]
 800b992:	9b01      	ldr	r3, [sp, #4]
 800b994:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b998:	3204      	adds	r2, #4
 800b99a:	f1ba 0f00 	cmp.w	sl, #0
 800b99e:	d020      	beq.n	800b9e2 <__multiply+0x11c>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	4689      	mov	r9, r1
 800b9a4:	46a8      	mov	r8, r5
 800b9a6:	f04f 0b00 	mov.w	fp, #0
 800b9aa:	f8b9 c000 	ldrh.w	ip, [r9]
 800b9ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b9b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800b9b6:	445c      	add	r4, fp
 800b9b8:	46c4      	mov	ip, r8
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b9c0:	f84c 3b04 	str.w	r3, [ip], #4
 800b9c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b9cc:	0c1b      	lsrs	r3, r3, #16
 800b9ce:	fb0a b303 	mla	r3, sl, r3, fp
 800b9d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b9d6:	454f      	cmp	r7, r9
 800b9d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b9dc:	d805      	bhi.n	800b9ea <__multiply+0x124>
 800b9de:	f8c8 3004 	str.w	r3, [r8, #4]
 800b9e2:	3504      	adds	r5, #4
 800b9e4:	e79b      	b.n	800b91e <__multiply+0x58>
 800b9e6:	46d4      	mov	ip, sl
 800b9e8:	e7b3      	b.n	800b952 <__multiply+0x8c>
 800b9ea:	46e0      	mov	r8, ip
 800b9ec:	e7dd      	b.n	800b9aa <__multiply+0xe4>
 800b9ee:	3e01      	subs	r6, #1
 800b9f0:	e799      	b.n	800b926 <__multiply+0x60>
	...

0800b9f4 <__pow5mult>:
 800b9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f8:	4615      	mov	r5, r2
 800b9fa:	f012 0203 	ands.w	r2, r2, #3
 800b9fe:	4606      	mov	r6, r0
 800ba00:	460f      	mov	r7, r1
 800ba02:	d007      	beq.n	800ba14 <__pow5mult+0x20>
 800ba04:	3a01      	subs	r2, #1
 800ba06:	4c21      	ldr	r4, [pc, #132]	; (800ba8c <__pow5mult+0x98>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba0e:	f7ff fec8 	bl	800b7a2 <__multadd>
 800ba12:	4607      	mov	r7, r0
 800ba14:	10ad      	asrs	r5, r5, #2
 800ba16:	d035      	beq.n	800ba84 <__pow5mult+0x90>
 800ba18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba1a:	b93c      	cbnz	r4, 800ba2c <__pow5mult+0x38>
 800ba1c:	2010      	movs	r0, #16
 800ba1e:	f7ff fe6d 	bl	800b6fc <malloc>
 800ba22:	6270      	str	r0, [r6, #36]	; 0x24
 800ba24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba28:	6004      	str	r4, [r0, #0]
 800ba2a:	60c4      	str	r4, [r0, #12]
 800ba2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba34:	b94c      	cbnz	r4, 800ba4a <__pow5mult+0x56>
 800ba36:	f240 2171 	movw	r1, #625	; 0x271
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ff3a 	bl	800b8b4 <__i2b>
 800ba40:	2300      	movs	r3, #0
 800ba42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba46:	4604      	mov	r4, r0
 800ba48:	6003      	str	r3, [r0, #0]
 800ba4a:	f04f 0800 	mov.w	r8, #0
 800ba4e:	07eb      	lsls	r3, r5, #31
 800ba50:	d50a      	bpl.n	800ba68 <__pow5mult+0x74>
 800ba52:	4639      	mov	r1, r7
 800ba54:	4622      	mov	r2, r4
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7ff ff35 	bl	800b8c6 <__multiply>
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4681      	mov	r9, r0
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7ff fe87 	bl	800b774 <_Bfree>
 800ba66:	464f      	mov	r7, r9
 800ba68:	106d      	asrs	r5, r5, #1
 800ba6a:	d00b      	beq.n	800ba84 <__pow5mult+0x90>
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	b938      	cbnz	r0, 800ba80 <__pow5mult+0x8c>
 800ba70:	4622      	mov	r2, r4
 800ba72:	4621      	mov	r1, r4
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff ff26 	bl	800b8c6 <__multiply>
 800ba7a:	6020      	str	r0, [r4, #0]
 800ba7c:	f8c0 8000 	str.w	r8, [r0]
 800ba80:	4604      	mov	r4, r0
 800ba82:	e7e4      	b.n	800ba4e <__pow5mult+0x5a>
 800ba84:	4638      	mov	r0, r7
 800ba86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba8a:	bf00      	nop
 800ba8c:	0800c560 	.word	0x0800c560

0800ba90 <__lshift>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	460c      	mov	r4, r1
 800ba96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	6849      	ldr	r1, [r1, #4]
 800ba9e:	eb0a 0903 	add.w	r9, sl, r3
 800baa2:	68a3      	ldr	r3, [r4, #8]
 800baa4:	4607      	mov	r7, r0
 800baa6:	4616      	mov	r6, r2
 800baa8:	f109 0501 	add.w	r5, r9, #1
 800baac:	42ab      	cmp	r3, r5
 800baae:	db32      	blt.n	800bb16 <__lshift+0x86>
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff fe2b 	bl	800b70c <_Balloc>
 800bab6:	2300      	movs	r3, #0
 800bab8:	4680      	mov	r8, r0
 800baba:	f100 0114 	add.w	r1, r0, #20
 800babe:	461a      	mov	r2, r3
 800bac0:	4553      	cmp	r3, sl
 800bac2:	db2b      	blt.n	800bb1c <__lshift+0x8c>
 800bac4:	6920      	ldr	r0, [r4, #16]
 800bac6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baca:	f104 0314 	add.w	r3, r4, #20
 800bace:	f016 021f 	ands.w	r2, r6, #31
 800bad2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bad6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bada:	d025      	beq.n	800bb28 <__lshift+0x98>
 800badc:	f1c2 0e20 	rsb	lr, r2, #32
 800bae0:	2000      	movs	r0, #0
 800bae2:	681e      	ldr	r6, [r3, #0]
 800bae4:	468a      	mov	sl, r1
 800bae6:	4096      	lsls	r6, r2
 800bae8:	4330      	orrs	r0, r6
 800baea:	f84a 0b04 	str.w	r0, [sl], #4
 800baee:	f853 0b04 	ldr.w	r0, [r3], #4
 800baf2:	459c      	cmp	ip, r3
 800baf4:	fa20 f00e 	lsr.w	r0, r0, lr
 800baf8:	d814      	bhi.n	800bb24 <__lshift+0x94>
 800bafa:	6048      	str	r0, [r1, #4]
 800bafc:	b108      	cbz	r0, 800bb02 <__lshift+0x72>
 800bafe:	f109 0502 	add.w	r5, r9, #2
 800bb02:	3d01      	subs	r5, #1
 800bb04:	4638      	mov	r0, r7
 800bb06:	f8c8 5010 	str.w	r5, [r8, #16]
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	f7ff fe32 	bl	800b774 <_Bfree>
 800bb10:	4640      	mov	r0, r8
 800bb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb16:	3101      	adds	r1, #1
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	e7c7      	b.n	800baac <__lshift+0x1c>
 800bb1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bb20:	3301      	adds	r3, #1
 800bb22:	e7cd      	b.n	800bac0 <__lshift+0x30>
 800bb24:	4651      	mov	r1, sl
 800bb26:	e7dc      	b.n	800bae2 <__lshift+0x52>
 800bb28:	3904      	subs	r1, #4
 800bb2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb32:	459c      	cmp	ip, r3
 800bb34:	d8f9      	bhi.n	800bb2a <__lshift+0x9a>
 800bb36:	e7e4      	b.n	800bb02 <__lshift+0x72>

0800bb38 <__mcmp>:
 800bb38:	6903      	ldr	r3, [r0, #16]
 800bb3a:	690a      	ldr	r2, [r1, #16]
 800bb3c:	1a9b      	subs	r3, r3, r2
 800bb3e:	b530      	push	{r4, r5, lr}
 800bb40:	d10c      	bne.n	800bb5c <__mcmp+0x24>
 800bb42:	0092      	lsls	r2, r2, #2
 800bb44:	3014      	adds	r0, #20
 800bb46:	3114      	adds	r1, #20
 800bb48:	1884      	adds	r4, r0, r2
 800bb4a:	4411      	add	r1, r2
 800bb4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb54:	4295      	cmp	r5, r2
 800bb56:	d003      	beq.n	800bb60 <__mcmp+0x28>
 800bb58:	d305      	bcc.n	800bb66 <__mcmp+0x2e>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	bd30      	pop	{r4, r5, pc}
 800bb60:	42a0      	cmp	r0, r4
 800bb62:	d3f3      	bcc.n	800bb4c <__mcmp+0x14>
 800bb64:	e7fa      	b.n	800bb5c <__mcmp+0x24>
 800bb66:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6a:	e7f7      	b.n	800bb5c <__mcmp+0x24>

0800bb6c <__mdiff>:
 800bb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb70:	460d      	mov	r5, r1
 800bb72:	4607      	mov	r7, r0
 800bb74:	4611      	mov	r1, r2
 800bb76:	4628      	mov	r0, r5
 800bb78:	4614      	mov	r4, r2
 800bb7a:	f7ff ffdd 	bl	800bb38 <__mcmp>
 800bb7e:	1e06      	subs	r6, r0, #0
 800bb80:	d108      	bne.n	800bb94 <__mdiff+0x28>
 800bb82:	4631      	mov	r1, r6
 800bb84:	4638      	mov	r0, r7
 800bb86:	f7ff fdc1 	bl	800b70c <_Balloc>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	bfa4      	itt	ge
 800bb96:	4623      	movge	r3, r4
 800bb98:	462c      	movge	r4, r5
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	6861      	ldr	r1, [r4, #4]
 800bb9e:	bfa6      	itte	ge
 800bba0:	461d      	movge	r5, r3
 800bba2:	2600      	movge	r6, #0
 800bba4:	2601      	movlt	r6, #1
 800bba6:	f7ff fdb1 	bl	800b70c <_Balloc>
 800bbaa:	692b      	ldr	r3, [r5, #16]
 800bbac:	60c6      	str	r6, [r0, #12]
 800bbae:	6926      	ldr	r6, [r4, #16]
 800bbb0:	f105 0914 	add.w	r9, r5, #20
 800bbb4:	f104 0214 	add.w	r2, r4, #20
 800bbb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bbbc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bbc0:	f100 0514 	add.w	r5, r0, #20
 800bbc4:	f04f 0e00 	mov.w	lr, #0
 800bbc8:	f852 ab04 	ldr.w	sl, [r2], #4
 800bbcc:	f859 4b04 	ldr.w	r4, [r9], #4
 800bbd0:	fa1e f18a 	uxtah	r1, lr, sl
 800bbd4:	b2a3      	uxth	r3, r4
 800bbd6:	1ac9      	subs	r1, r1, r3
 800bbd8:	0c23      	lsrs	r3, r4, #16
 800bbda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800bbde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bbe2:	b289      	uxth	r1, r1
 800bbe4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bbe8:	45c8      	cmp	r8, r9
 800bbea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bbee:	4694      	mov	ip, r2
 800bbf0:	f845 3b04 	str.w	r3, [r5], #4
 800bbf4:	d8e8      	bhi.n	800bbc8 <__mdiff+0x5c>
 800bbf6:	45bc      	cmp	ip, r7
 800bbf8:	d304      	bcc.n	800bc04 <__mdiff+0x98>
 800bbfa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bbfe:	b183      	cbz	r3, 800bc22 <__mdiff+0xb6>
 800bc00:	6106      	str	r6, [r0, #16]
 800bc02:	e7c5      	b.n	800bb90 <__mdiff+0x24>
 800bc04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc08:	fa1e f381 	uxtah	r3, lr, r1
 800bc0c:	141a      	asrs	r2, r3, #16
 800bc0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bc1c:	f845 3b04 	str.w	r3, [r5], #4
 800bc20:	e7e9      	b.n	800bbf6 <__mdiff+0x8a>
 800bc22:	3e01      	subs	r6, #1
 800bc24:	e7e9      	b.n	800bbfa <__mdiff+0x8e>

0800bc26 <__d2b>:
 800bc26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc2a:	460e      	mov	r6, r1
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	ec59 8b10 	vmov	r8, r9, d0
 800bc32:	4615      	mov	r5, r2
 800bc34:	f7ff fd6a 	bl	800b70c <_Balloc>
 800bc38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc42:	bb34      	cbnz	r4, 800bc92 <__d2b+0x6c>
 800bc44:	9301      	str	r3, [sp, #4]
 800bc46:	f1b8 0300 	subs.w	r3, r8, #0
 800bc4a:	d027      	beq.n	800bc9c <__d2b+0x76>
 800bc4c:	a802      	add	r0, sp, #8
 800bc4e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bc52:	f7ff fe00 	bl	800b856 <__lo0bits>
 800bc56:	9900      	ldr	r1, [sp, #0]
 800bc58:	b1f0      	cbz	r0, 800bc98 <__d2b+0x72>
 800bc5a:	9a01      	ldr	r2, [sp, #4]
 800bc5c:	f1c0 0320 	rsb	r3, r0, #32
 800bc60:	fa02 f303 	lsl.w	r3, r2, r3
 800bc64:	430b      	orrs	r3, r1
 800bc66:	40c2      	lsrs	r2, r0
 800bc68:	617b      	str	r3, [r7, #20]
 800bc6a:	9201      	str	r2, [sp, #4]
 800bc6c:	9b01      	ldr	r3, [sp, #4]
 800bc6e:	61bb      	str	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bf14      	ite	ne
 800bc74:	2102      	movne	r1, #2
 800bc76:	2101      	moveq	r1, #1
 800bc78:	6139      	str	r1, [r7, #16]
 800bc7a:	b1c4      	cbz	r4, 800bcae <__d2b+0x88>
 800bc7c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bc80:	4404      	add	r4, r0
 800bc82:	6034      	str	r4, [r6, #0]
 800bc84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc88:	6028      	str	r0, [r5, #0]
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	b003      	add	sp, #12
 800bc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc96:	e7d5      	b.n	800bc44 <__d2b+0x1e>
 800bc98:	6179      	str	r1, [r7, #20]
 800bc9a:	e7e7      	b.n	800bc6c <__d2b+0x46>
 800bc9c:	a801      	add	r0, sp, #4
 800bc9e:	f7ff fdda 	bl	800b856 <__lo0bits>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	2101      	movs	r1, #1
 800bca8:	6139      	str	r1, [r7, #16]
 800bcaa:	3020      	adds	r0, #32
 800bcac:	e7e5      	b.n	800bc7a <__d2b+0x54>
 800bcae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bcb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcb6:	6030      	str	r0, [r6, #0]
 800bcb8:	6918      	ldr	r0, [r3, #16]
 800bcba:	f7ff fdad 	bl	800b818 <__hi0bits>
 800bcbe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bcc2:	e7e1      	b.n	800bc88 <__d2b+0x62>

0800bcc4 <_calloc_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	fb02 f401 	mul.w	r4, r2, r1
 800bcca:	4621      	mov	r1, r4
 800bccc:	f000 f856 	bl	800bd7c <_malloc_r>
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	b118      	cbz	r0, 800bcdc <_calloc_r+0x18>
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	f7fe fa15 	bl	800a106 <memset>
 800bcdc:	4628      	mov	r0, r5
 800bcde:	bd38      	pop	{r3, r4, r5, pc}

0800bce0 <_free_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4605      	mov	r5, r0
 800bce4:	2900      	cmp	r1, #0
 800bce6:	d045      	beq.n	800bd74 <_free_r+0x94>
 800bce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcec:	1f0c      	subs	r4, r1, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	18e4      	addlt	r4, r4, r3
 800bcf4:	f000 fa29 	bl	800c14a <__malloc_lock>
 800bcf8:	4a1f      	ldr	r2, [pc, #124]	; (800bd78 <_free_r+0x98>)
 800bcfa:	6813      	ldr	r3, [r2, #0]
 800bcfc:	4610      	mov	r0, r2
 800bcfe:	b933      	cbnz	r3, 800bd0e <_free_r+0x2e>
 800bd00:	6063      	str	r3, [r4, #4]
 800bd02:	6014      	str	r4, [r2, #0]
 800bd04:	4628      	mov	r0, r5
 800bd06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd0a:	f000 ba1f 	b.w	800c14c <__malloc_unlock>
 800bd0e:	42a3      	cmp	r3, r4
 800bd10:	d90c      	bls.n	800bd2c <_free_r+0x4c>
 800bd12:	6821      	ldr	r1, [r4, #0]
 800bd14:	1862      	adds	r2, r4, r1
 800bd16:	4293      	cmp	r3, r2
 800bd18:	bf04      	itt	eq
 800bd1a:	681a      	ldreq	r2, [r3, #0]
 800bd1c:	685b      	ldreq	r3, [r3, #4]
 800bd1e:	6063      	str	r3, [r4, #4]
 800bd20:	bf04      	itt	eq
 800bd22:	1852      	addeq	r2, r2, r1
 800bd24:	6022      	streq	r2, [r4, #0]
 800bd26:	6004      	str	r4, [r0, #0]
 800bd28:	e7ec      	b.n	800bd04 <_free_r+0x24>
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	b10a      	cbz	r2, 800bd34 <_free_r+0x54>
 800bd30:	42a2      	cmp	r2, r4
 800bd32:	d9fa      	bls.n	800bd2a <_free_r+0x4a>
 800bd34:	6819      	ldr	r1, [r3, #0]
 800bd36:	1858      	adds	r0, r3, r1
 800bd38:	42a0      	cmp	r0, r4
 800bd3a:	d10b      	bne.n	800bd54 <_free_r+0x74>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	4401      	add	r1, r0
 800bd40:	1858      	adds	r0, r3, r1
 800bd42:	4282      	cmp	r2, r0
 800bd44:	6019      	str	r1, [r3, #0]
 800bd46:	d1dd      	bne.n	800bd04 <_free_r+0x24>
 800bd48:	6810      	ldr	r0, [r2, #0]
 800bd4a:	6852      	ldr	r2, [r2, #4]
 800bd4c:	605a      	str	r2, [r3, #4]
 800bd4e:	4401      	add	r1, r0
 800bd50:	6019      	str	r1, [r3, #0]
 800bd52:	e7d7      	b.n	800bd04 <_free_r+0x24>
 800bd54:	d902      	bls.n	800bd5c <_free_r+0x7c>
 800bd56:	230c      	movs	r3, #12
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	e7d3      	b.n	800bd04 <_free_r+0x24>
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	1821      	adds	r1, r4, r0
 800bd60:	428a      	cmp	r2, r1
 800bd62:	bf04      	itt	eq
 800bd64:	6811      	ldreq	r1, [r2, #0]
 800bd66:	6852      	ldreq	r2, [r2, #4]
 800bd68:	6062      	str	r2, [r4, #4]
 800bd6a:	bf04      	itt	eq
 800bd6c:	1809      	addeq	r1, r1, r0
 800bd6e:	6021      	streq	r1, [r4, #0]
 800bd70:	605c      	str	r4, [r3, #4]
 800bd72:	e7c7      	b.n	800bd04 <_free_r+0x24>
 800bd74:	bd38      	pop	{r3, r4, r5, pc}
 800bd76:	bf00      	nop
 800bd78:	20001f78 	.word	0x20001f78

0800bd7c <_malloc_r>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	1ccd      	adds	r5, r1, #3
 800bd80:	f025 0503 	bic.w	r5, r5, #3
 800bd84:	3508      	adds	r5, #8
 800bd86:	2d0c      	cmp	r5, #12
 800bd88:	bf38      	it	cc
 800bd8a:	250c      	movcc	r5, #12
 800bd8c:	2d00      	cmp	r5, #0
 800bd8e:	4606      	mov	r6, r0
 800bd90:	db01      	blt.n	800bd96 <_malloc_r+0x1a>
 800bd92:	42a9      	cmp	r1, r5
 800bd94:	d903      	bls.n	800bd9e <_malloc_r+0x22>
 800bd96:	230c      	movs	r3, #12
 800bd98:	6033      	str	r3, [r6, #0]
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
 800bd9e:	f000 f9d4 	bl	800c14a <__malloc_lock>
 800bda2:	4a21      	ldr	r2, [pc, #132]	; (800be28 <_malloc_r+0xac>)
 800bda4:	6814      	ldr	r4, [r2, #0]
 800bda6:	4621      	mov	r1, r4
 800bda8:	b991      	cbnz	r1, 800bdd0 <_malloc_r+0x54>
 800bdaa:	4c20      	ldr	r4, [pc, #128]	; (800be2c <_malloc_r+0xb0>)
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	b91b      	cbnz	r3, 800bdb8 <_malloc_r+0x3c>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f000 f98f 	bl	800c0d4 <_sbrk_r>
 800bdb6:	6020      	str	r0, [r4, #0]
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 f98a 	bl	800c0d4 <_sbrk_r>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d124      	bne.n	800be0e <_malloc_r+0x92>
 800bdc4:	230c      	movs	r3, #12
 800bdc6:	6033      	str	r3, [r6, #0]
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 f9bf 	bl	800c14c <__malloc_unlock>
 800bdce:	e7e4      	b.n	800bd9a <_malloc_r+0x1e>
 800bdd0:	680b      	ldr	r3, [r1, #0]
 800bdd2:	1b5b      	subs	r3, r3, r5
 800bdd4:	d418      	bmi.n	800be08 <_malloc_r+0x8c>
 800bdd6:	2b0b      	cmp	r3, #11
 800bdd8:	d90f      	bls.n	800bdfa <_malloc_r+0x7e>
 800bdda:	600b      	str	r3, [r1, #0]
 800bddc:	50cd      	str	r5, [r1, r3]
 800bdde:	18cc      	adds	r4, r1, r3
 800bde0:	4630      	mov	r0, r6
 800bde2:	f000 f9b3 	bl	800c14c <__malloc_unlock>
 800bde6:	f104 000b 	add.w	r0, r4, #11
 800bdea:	1d23      	adds	r3, r4, #4
 800bdec:	f020 0007 	bic.w	r0, r0, #7
 800bdf0:	1ac3      	subs	r3, r0, r3
 800bdf2:	d0d3      	beq.n	800bd9c <_malloc_r+0x20>
 800bdf4:	425a      	negs	r2, r3
 800bdf6:	50e2      	str	r2, [r4, r3]
 800bdf8:	e7d0      	b.n	800bd9c <_malloc_r+0x20>
 800bdfa:	428c      	cmp	r4, r1
 800bdfc:	684b      	ldr	r3, [r1, #4]
 800bdfe:	bf16      	itet	ne
 800be00:	6063      	strne	r3, [r4, #4]
 800be02:	6013      	streq	r3, [r2, #0]
 800be04:	460c      	movne	r4, r1
 800be06:	e7eb      	b.n	800bde0 <_malloc_r+0x64>
 800be08:	460c      	mov	r4, r1
 800be0a:	6849      	ldr	r1, [r1, #4]
 800be0c:	e7cc      	b.n	800bda8 <_malloc_r+0x2c>
 800be0e:	1cc4      	adds	r4, r0, #3
 800be10:	f024 0403 	bic.w	r4, r4, #3
 800be14:	42a0      	cmp	r0, r4
 800be16:	d005      	beq.n	800be24 <_malloc_r+0xa8>
 800be18:	1a21      	subs	r1, r4, r0
 800be1a:	4630      	mov	r0, r6
 800be1c:	f000 f95a 	bl	800c0d4 <_sbrk_r>
 800be20:	3001      	adds	r0, #1
 800be22:	d0cf      	beq.n	800bdc4 <_malloc_r+0x48>
 800be24:	6025      	str	r5, [r4, #0]
 800be26:	e7db      	b.n	800bde0 <_malloc_r+0x64>
 800be28:	20001f78 	.word	0x20001f78
 800be2c:	20001f7c 	.word	0x20001f7c

0800be30 <__ssputs_r>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	688e      	ldr	r6, [r1, #8]
 800be36:	429e      	cmp	r6, r3
 800be38:	4682      	mov	sl, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	4690      	mov	r8, r2
 800be3e:	4699      	mov	r9, r3
 800be40:	d837      	bhi.n	800beb2 <__ssputs_r+0x82>
 800be42:	898a      	ldrh	r2, [r1, #12]
 800be44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be48:	d031      	beq.n	800beae <__ssputs_r+0x7e>
 800be4a:	6825      	ldr	r5, [r4, #0]
 800be4c:	6909      	ldr	r1, [r1, #16]
 800be4e:	1a6f      	subs	r7, r5, r1
 800be50:	6965      	ldr	r5, [r4, #20]
 800be52:	2302      	movs	r3, #2
 800be54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be58:	fb95 f5f3 	sdiv	r5, r5, r3
 800be5c:	f109 0301 	add.w	r3, r9, #1
 800be60:	443b      	add	r3, r7
 800be62:	429d      	cmp	r5, r3
 800be64:	bf38      	it	cc
 800be66:	461d      	movcc	r5, r3
 800be68:	0553      	lsls	r3, r2, #21
 800be6a:	d530      	bpl.n	800bece <__ssputs_r+0x9e>
 800be6c:	4629      	mov	r1, r5
 800be6e:	f7ff ff85 	bl	800bd7c <_malloc_r>
 800be72:	4606      	mov	r6, r0
 800be74:	b950      	cbnz	r0, 800be8c <__ssputs_r+0x5c>
 800be76:	230c      	movs	r3, #12
 800be78:	f8ca 3000 	str.w	r3, [sl]
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	f04f 30ff 	mov.w	r0, #4294967295
 800be88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8c:	463a      	mov	r2, r7
 800be8e:	6921      	ldr	r1, [r4, #16]
 800be90:	f7fe f92e 	bl	800a0f0 <memcpy>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	6126      	str	r6, [r4, #16]
 800bea2:	6165      	str	r5, [r4, #20]
 800bea4:	443e      	add	r6, r7
 800bea6:	1bed      	subs	r5, r5, r7
 800bea8:	6026      	str	r6, [r4, #0]
 800beaa:	60a5      	str	r5, [r4, #8]
 800beac:	464e      	mov	r6, r9
 800beae:	454e      	cmp	r6, r9
 800beb0:	d900      	bls.n	800beb4 <__ssputs_r+0x84>
 800beb2:	464e      	mov	r6, r9
 800beb4:	4632      	mov	r2, r6
 800beb6:	4641      	mov	r1, r8
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	f000 f92d 	bl	800c118 <memmove>
 800bebe:	68a3      	ldr	r3, [r4, #8]
 800bec0:	1b9b      	subs	r3, r3, r6
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	441e      	add	r6, r3
 800bec8:	6026      	str	r6, [r4, #0]
 800beca:	2000      	movs	r0, #0
 800becc:	e7dc      	b.n	800be88 <__ssputs_r+0x58>
 800bece:	462a      	mov	r2, r5
 800bed0:	f000 f93d 	bl	800c14e <_realloc_r>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d1e2      	bne.n	800bea0 <__ssputs_r+0x70>
 800beda:	6921      	ldr	r1, [r4, #16]
 800bedc:	4650      	mov	r0, sl
 800bede:	f7ff feff 	bl	800bce0 <_free_r>
 800bee2:	e7c8      	b.n	800be76 <__ssputs_r+0x46>

0800bee4 <_svfiprintf_r>:
 800bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	461d      	mov	r5, r3
 800beea:	898b      	ldrh	r3, [r1, #12]
 800beec:	061f      	lsls	r7, r3, #24
 800beee:	b09d      	sub	sp, #116	; 0x74
 800bef0:	4680      	mov	r8, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4616      	mov	r6, r2
 800bef6:	d50f      	bpl.n	800bf18 <_svfiprintf_r+0x34>
 800bef8:	690b      	ldr	r3, [r1, #16]
 800befa:	b96b      	cbnz	r3, 800bf18 <_svfiprintf_r+0x34>
 800befc:	2140      	movs	r1, #64	; 0x40
 800befe:	f7ff ff3d 	bl	800bd7c <_malloc_r>
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	6120      	str	r0, [r4, #16]
 800bf06:	b928      	cbnz	r0, 800bf14 <_svfiprintf_r+0x30>
 800bf08:	230c      	movs	r3, #12
 800bf0a:	f8c8 3000 	str.w	r3, [r8]
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	e0c8      	b.n	800c0a6 <_svfiprintf_r+0x1c2>
 800bf14:	2340      	movs	r3, #64	; 0x40
 800bf16:	6163      	str	r3, [r4, #20]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf22:	2330      	movs	r3, #48	; 0x30
 800bf24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf28:	9503      	str	r5, [sp, #12]
 800bf2a:	f04f 0b01 	mov.w	fp, #1
 800bf2e:	4637      	mov	r7, r6
 800bf30:	463d      	mov	r5, r7
 800bf32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf36:	b10b      	cbz	r3, 800bf3c <_svfiprintf_r+0x58>
 800bf38:	2b25      	cmp	r3, #37	; 0x25
 800bf3a:	d13e      	bne.n	800bfba <_svfiprintf_r+0xd6>
 800bf3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf40:	d00b      	beq.n	800bf5a <_svfiprintf_r+0x76>
 800bf42:	4653      	mov	r3, sl
 800bf44:	4632      	mov	r2, r6
 800bf46:	4621      	mov	r1, r4
 800bf48:	4640      	mov	r0, r8
 800bf4a:	f7ff ff71 	bl	800be30 <__ssputs_r>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f000 80a4 	beq.w	800c09c <_svfiprintf_r+0x1b8>
 800bf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf56:	4453      	add	r3, sl
 800bf58:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5a:	783b      	ldrb	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 809d 	beq.w	800c09c <_svfiprintf_r+0x1b8>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf74:	931a      	str	r3, [sp, #104]	; 0x68
 800bf76:	462f      	mov	r7, r5
 800bf78:	2205      	movs	r2, #5
 800bf7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf7e:	4850      	ldr	r0, [pc, #320]	; (800c0c0 <_svfiprintf_r+0x1dc>)
 800bf80:	f7f4 f92e 	bl	80001e0 <memchr>
 800bf84:	9b04      	ldr	r3, [sp, #16]
 800bf86:	b9d0      	cbnz	r0, 800bfbe <_svfiprintf_r+0xda>
 800bf88:	06d9      	lsls	r1, r3, #27
 800bf8a:	bf44      	itt	mi
 800bf8c:	2220      	movmi	r2, #32
 800bf8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf92:	071a      	lsls	r2, r3, #28
 800bf94:	bf44      	itt	mi
 800bf96:	222b      	movmi	r2, #43	; 0x2b
 800bf98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf9c:	782a      	ldrb	r2, [r5, #0]
 800bf9e:	2a2a      	cmp	r2, #42	; 0x2a
 800bfa0:	d015      	beq.n	800bfce <_svfiprintf_r+0xea>
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	462f      	mov	r7, r5
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	250a      	movs	r5, #10
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb0:	3b30      	subs	r3, #48	; 0x30
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d94d      	bls.n	800c052 <_svfiprintf_r+0x16e>
 800bfb6:	b1b8      	cbz	r0, 800bfe8 <_svfiprintf_r+0x104>
 800bfb8:	e00f      	b.n	800bfda <_svfiprintf_r+0xf6>
 800bfba:	462f      	mov	r7, r5
 800bfbc:	e7b8      	b.n	800bf30 <_svfiprintf_r+0x4c>
 800bfbe:	4a40      	ldr	r2, [pc, #256]	; (800c0c0 <_svfiprintf_r+0x1dc>)
 800bfc0:	1a80      	subs	r0, r0, r2
 800bfc2:	fa0b f000 	lsl.w	r0, fp, r0
 800bfc6:	4318      	orrs	r0, r3
 800bfc8:	9004      	str	r0, [sp, #16]
 800bfca:	463d      	mov	r5, r7
 800bfcc:	e7d3      	b.n	800bf76 <_svfiprintf_r+0x92>
 800bfce:	9a03      	ldr	r2, [sp, #12]
 800bfd0:	1d11      	adds	r1, r2, #4
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	9103      	str	r1, [sp, #12]
 800bfd6:	2a00      	cmp	r2, #0
 800bfd8:	db01      	blt.n	800bfde <_svfiprintf_r+0xfa>
 800bfda:	9207      	str	r2, [sp, #28]
 800bfdc:	e004      	b.n	800bfe8 <_svfiprintf_r+0x104>
 800bfde:	4252      	negs	r2, r2
 800bfe0:	f043 0302 	orr.w	r3, r3, #2
 800bfe4:	9207      	str	r2, [sp, #28]
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	783b      	ldrb	r3, [r7, #0]
 800bfea:	2b2e      	cmp	r3, #46	; 0x2e
 800bfec:	d10c      	bne.n	800c008 <_svfiprintf_r+0x124>
 800bfee:	787b      	ldrb	r3, [r7, #1]
 800bff0:	2b2a      	cmp	r3, #42	; 0x2a
 800bff2:	d133      	bne.n	800c05c <_svfiprintf_r+0x178>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	1d1a      	adds	r2, r3, #4
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	9203      	str	r2, [sp, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bfb8      	it	lt
 800c000:	f04f 33ff 	movlt.w	r3, #4294967295
 800c004:	3702      	adds	r7, #2
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	4d2e      	ldr	r5, [pc, #184]	; (800c0c4 <_svfiprintf_r+0x1e0>)
 800c00a:	7839      	ldrb	r1, [r7, #0]
 800c00c:	2203      	movs	r2, #3
 800c00e:	4628      	mov	r0, r5
 800c010:	f7f4 f8e6 	bl	80001e0 <memchr>
 800c014:	b138      	cbz	r0, 800c026 <_svfiprintf_r+0x142>
 800c016:	2340      	movs	r3, #64	; 0x40
 800c018:	1b40      	subs	r0, r0, r5
 800c01a:	fa03 f000 	lsl.w	r0, r3, r0
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	4303      	orrs	r3, r0
 800c022:	3701      	adds	r7, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	7839      	ldrb	r1, [r7, #0]
 800c028:	4827      	ldr	r0, [pc, #156]	; (800c0c8 <_svfiprintf_r+0x1e4>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	2206      	movs	r2, #6
 800c030:	1c7e      	adds	r6, r7, #1
 800c032:	f7f4 f8d5 	bl	80001e0 <memchr>
 800c036:	2800      	cmp	r0, #0
 800c038:	d038      	beq.n	800c0ac <_svfiprintf_r+0x1c8>
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <_svfiprintf_r+0x1e8>)
 800c03c:	bb13      	cbnz	r3, 800c084 <_svfiprintf_r+0x1a0>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	f023 0307 	bic.w	r3, r3, #7
 800c046:	3308      	adds	r3, #8
 800c048:	9303      	str	r3, [sp, #12]
 800c04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04c:	444b      	add	r3, r9
 800c04e:	9309      	str	r3, [sp, #36]	; 0x24
 800c050:	e76d      	b.n	800bf2e <_svfiprintf_r+0x4a>
 800c052:	fb05 3202 	mla	r2, r5, r2, r3
 800c056:	2001      	movs	r0, #1
 800c058:	460f      	mov	r7, r1
 800c05a:	e7a6      	b.n	800bfaa <_svfiprintf_r+0xc6>
 800c05c:	2300      	movs	r3, #0
 800c05e:	3701      	adds	r7, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	4619      	mov	r1, r3
 800c064:	250a      	movs	r5, #10
 800c066:	4638      	mov	r0, r7
 800c068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06c:	3a30      	subs	r2, #48	; 0x30
 800c06e:	2a09      	cmp	r2, #9
 800c070:	d903      	bls.n	800c07a <_svfiprintf_r+0x196>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0c8      	beq.n	800c008 <_svfiprintf_r+0x124>
 800c076:	9105      	str	r1, [sp, #20]
 800c078:	e7c6      	b.n	800c008 <_svfiprintf_r+0x124>
 800c07a:	fb05 2101 	mla	r1, r5, r1, r2
 800c07e:	2301      	movs	r3, #1
 800c080:	4607      	mov	r7, r0
 800c082:	e7f0      	b.n	800c066 <_svfiprintf_r+0x182>
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4622      	mov	r2, r4
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <_svfiprintf_r+0x1ec>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4640      	mov	r0, r8
 800c090:	f7fe f8d6 	bl	800a240 <_printf_float>
 800c094:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c098:	4681      	mov	r9, r0
 800c09a:	d1d6      	bne.n	800c04a <_svfiprintf_r+0x166>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	065b      	lsls	r3, r3, #25
 800c0a0:	f53f af35 	bmi.w	800bf0e <_svfiprintf_r+0x2a>
 800c0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a6:	b01d      	add	sp, #116	; 0x74
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <_svfiprintf_r+0x1ec>)
 800c0b4:	a904      	add	r1, sp, #16
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	f7fe fb78 	bl	800a7ac <_printf_i>
 800c0bc:	e7ea      	b.n	800c094 <_svfiprintf_r+0x1b0>
 800c0be:	bf00      	nop
 800c0c0:	0800c56c 	.word	0x0800c56c
 800c0c4:	0800c572 	.word	0x0800c572
 800c0c8:	0800c576 	.word	0x0800c576
 800c0cc:	0800a241 	.word	0x0800a241
 800c0d0:	0800be31 	.word	0x0800be31

0800c0d4 <_sbrk_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4c06      	ldr	r4, [pc, #24]	; (800c0f0 <_sbrk_r+0x1c>)
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4605      	mov	r5, r0
 800c0dc:	4608      	mov	r0, r1
 800c0de:	6023      	str	r3, [r4, #0]
 800c0e0:	f7f6 ffb6 	bl	8003050 <_sbrk>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	d102      	bne.n	800c0ee <_sbrk_r+0x1a>
 800c0e8:	6823      	ldr	r3, [r4, #0]
 800c0ea:	b103      	cbz	r3, 800c0ee <_sbrk_r+0x1a>
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	200026ac 	.word	0x200026ac

0800c0f4 <__ascii_mbtowc>:
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	b901      	cbnz	r1, 800c0fa <__ascii_mbtowc+0x6>
 800c0f8:	a901      	add	r1, sp, #4
 800c0fa:	b142      	cbz	r2, 800c10e <__ascii_mbtowc+0x1a>
 800c0fc:	b14b      	cbz	r3, 800c112 <__ascii_mbtowc+0x1e>
 800c0fe:	7813      	ldrb	r3, [r2, #0]
 800c100:	600b      	str	r3, [r1, #0]
 800c102:	7812      	ldrb	r2, [r2, #0]
 800c104:	1c10      	adds	r0, r2, #0
 800c106:	bf18      	it	ne
 800c108:	2001      	movne	r0, #1
 800c10a:	b002      	add	sp, #8
 800c10c:	4770      	bx	lr
 800c10e:	4610      	mov	r0, r2
 800c110:	e7fb      	b.n	800c10a <__ascii_mbtowc+0x16>
 800c112:	f06f 0001 	mvn.w	r0, #1
 800c116:	e7f8      	b.n	800c10a <__ascii_mbtowc+0x16>

0800c118 <memmove>:
 800c118:	4288      	cmp	r0, r1
 800c11a:	b510      	push	{r4, lr}
 800c11c:	eb01 0302 	add.w	r3, r1, r2
 800c120:	d807      	bhi.n	800c132 <memmove+0x1a>
 800c122:	1e42      	subs	r2, r0, #1
 800c124:	4299      	cmp	r1, r3
 800c126:	d00a      	beq.n	800c13e <memmove+0x26>
 800c128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c12c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c130:	e7f8      	b.n	800c124 <memmove+0xc>
 800c132:	4283      	cmp	r3, r0
 800c134:	d9f5      	bls.n	800c122 <memmove+0xa>
 800c136:	1881      	adds	r1, r0, r2
 800c138:	1ad2      	subs	r2, r2, r3
 800c13a:	42d3      	cmn	r3, r2
 800c13c:	d100      	bne.n	800c140 <memmove+0x28>
 800c13e:	bd10      	pop	{r4, pc}
 800c140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c144:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c148:	e7f7      	b.n	800c13a <memmove+0x22>

0800c14a <__malloc_lock>:
 800c14a:	4770      	bx	lr

0800c14c <__malloc_unlock>:
 800c14c:	4770      	bx	lr

0800c14e <_realloc_r>:
 800c14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c150:	4607      	mov	r7, r0
 800c152:	4614      	mov	r4, r2
 800c154:	460e      	mov	r6, r1
 800c156:	b921      	cbnz	r1, 800c162 <_realloc_r+0x14>
 800c158:	4611      	mov	r1, r2
 800c15a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c15e:	f7ff be0d 	b.w	800bd7c <_malloc_r>
 800c162:	b922      	cbnz	r2, 800c16e <_realloc_r+0x20>
 800c164:	f7ff fdbc 	bl	800bce0 <_free_r>
 800c168:	4625      	mov	r5, r4
 800c16a:	4628      	mov	r0, r5
 800c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c16e:	f000 f821 	bl	800c1b4 <_malloc_usable_size_r>
 800c172:	42a0      	cmp	r0, r4
 800c174:	d20f      	bcs.n	800c196 <_realloc_r+0x48>
 800c176:	4621      	mov	r1, r4
 800c178:	4638      	mov	r0, r7
 800c17a:	f7ff fdff 	bl	800bd7c <_malloc_r>
 800c17e:	4605      	mov	r5, r0
 800c180:	2800      	cmp	r0, #0
 800c182:	d0f2      	beq.n	800c16a <_realloc_r+0x1c>
 800c184:	4631      	mov	r1, r6
 800c186:	4622      	mov	r2, r4
 800c188:	f7fd ffb2 	bl	800a0f0 <memcpy>
 800c18c:	4631      	mov	r1, r6
 800c18e:	4638      	mov	r0, r7
 800c190:	f7ff fda6 	bl	800bce0 <_free_r>
 800c194:	e7e9      	b.n	800c16a <_realloc_r+0x1c>
 800c196:	4635      	mov	r5, r6
 800c198:	e7e7      	b.n	800c16a <_realloc_r+0x1c>

0800c19a <__ascii_wctomb>:
 800c19a:	b149      	cbz	r1, 800c1b0 <__ascii_wctomb+0x16>
 800c19c:	2aff      	cmp	r2, #255	; 0xff
 800c19e:	bf85      	ittet	hi
 800c1a0:	238a      	movhi	r3, #138	; 0x8a
 800c1a2:	6003      	strhi	r3, [r0, #0]
 800c1a4:	700a      	strbls	r2, [r1, #0]
 800c1a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1aa:	bf98      	it	ls
 800c1ac:	2001      	movls	r0, #1
 800c1ae:	4770      	bx	lr
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	4770      	bx	lr

0800c1b4 <_malloc_usable_size_r>:
 800c1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b8:	1f18      	subs	r0, r3, #4
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	bfbc      	itt	lt
 800c1be:	580b      	ldrlt	r3, [r1, r0]
 800c1c0:	18c0      	addlt	r0, r0, r3
 800c1c2:	4770      	bx	lr

0800c1c4 <_init>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	bf00      	nop
 800c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ca:	bc08      	pop	{r3}
 800c1cc:	469e      	mov	lr, r3
 800c1ce:	4770      	bx	lr

0800c1d0 <_fini>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	bf00      	nop
 800c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d6:	bc08      	pop	{r3}
 800c1d8:	469e      	mov	lr, r3
 800c1da:	4770      	bx	lr
